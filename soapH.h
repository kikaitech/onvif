/* soapH.h
   Generated by gSOAP 2.8.109 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MoveStatus_DEFINED
#define SOAP_TYPE_tt__MoveStatus_DEFINED

inline void soap_default_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__MoveStatus
	*a = SOAP_DEFAULT_tt__MoveStatus;
#else
	*a = (enum tt__MoveStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap*, const char*, int, const enum tt__MoveStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap*, enum tt__MoveStatus);
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *);

SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_new_tt__MoveStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap*, const enum tt__MoveStatus *, const char*, const char*);

inline int soap_write_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap*, enum tt__MoveStatus *, const char*, const char*);

inline int soap_read_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__MoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDType_DEFINED
#define SOAP_TYPE_tt__OSDType_DEFINED

inline void soap_default_tt__OSDType(struct soap *soap, enum tt__OSDType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__OSDType
	*a = SOAP_DEFAULT_tt__OSDType;
#else
	*a = (enum tt__OSDType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType(struct soap*, const char*, int, const enum tt__OSDType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__OSDType2s(struct soap*, enum tt__OSDType);
SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_in_tt__OSDType(struct soap*, const char*, enum tt__OSDType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__OSDType(struct soap*, const char*, enum tt__OSDType *);

SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_new_tt__OSDType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__OSDType(struct soap*, const enum tt__OSDType *, const char*, const char*);

inline int soap_write_tt__OSDType(struct soap *soap, enum tt__OSDType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__OSDType(soap, p, "tt:OSDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDType(struct soap *soap, const char *URL, enum tt__OSDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__OSDType(soap, p, "tt:OSDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDType(struct soap *soap, const char *URL, enum tt__OSDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__OSDType(soap, p, "tt:OSDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDType(struct soap *soap, const char *URL, enum tt__OSDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__OSDType(soap, p, "tt:OSDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_get_tt__OSDType(struct soap*, enum tt__OSDType *, const char*, const char*);

inline int soap_read_tt__OSDType(struct soap *soap, enum tt__OSDType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__OSDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDType(struct soap *soap, const char *URL, enum tt__OSDType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDType(struct soap *soap, enum tt__OSDType *p)
{
	if (::soap_read_tt__OSDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationMode_DEFINED

inline void soap_default_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ImageStabilizationMode
	*a = SOAP_DEFAULT_tt__ImageStabilizationMode;
#else
	*a = (enum tt__ImageStabilizationMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode(struct soap*, const char*, int, const enum tt__ImageStabilizationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ImageStabilizationMode2s(struct soap*, enum tt__ImageStabilizationMode);
SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *);

SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_new_tt__ImageStabilizationMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ImageStabilizationMode(struct soap*, const enum tt__ImageStabilizationMode *, const char*, const char*);

inline int soap_write_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ImageStabilizationMode(soap, p, "tt:ImageStabilizationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ImageStabilizationMode(struct soap *soap, const char *URL, enum tt__ImageStabilizationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ImageStabilizationMode(soap, p, "tt:ImageStabilizationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImageStabilizationMode(struct soap *soap, const char *URL, enum tt__ImageStabilizationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ImageStabilizationMode(soap, p, "tt:ImageStabilizationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImageStabilizationMode(struct soap *soap, const char *URL, enum tt__ImageStabilizationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ImageStabilizationMode(soap, p, "tt:ImageStabilizationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode(struct soap*, enum tt__ImageStabilizationMode *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ImageStabilizationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImageStabilizationMode(struct soap *soap, const char *URL, enum tt__ImageStabilizationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImageStabilizationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImageStabilizationMode(struct soap *soap, enum tt__ImageStabilizationMode *p)
{
	if (::soap_read_tt__ImageStabilizationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode_DEFINED
#define SOAP_TYPE_tt__IrCutFilterMode_DEFINED

inline void soap_default_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IrCutFilterMode
	*a = SOAP_DEFAULT_tt__IrCutFilterMode;
#else
	*a = (enum tt__IrCutFilterMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode(struct soap*, const char*, int, const enum tt__IrCutFilterMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterMode2s(struct soap*, enum tt__IrCutFilterMode);
SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_in_tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *);

SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_new_tt__IrCutFilterMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterMode(struct soap*, const enum tt__IrCutFilterMode *, const char*, const char*);

inline int soap_write_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IrCutFilterMode(soap, p, "tt:IrCutFilterMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IrCutFilterMode(struct soap *soap, const char *URL, enum tt__IrCutFilterMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IrCutFilterMode(soap, p, "tt:IrCutFilterMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IrCutFilterMode(struct soap *soap, const char *URL, enum tt__IrCutFilterMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IrCutFilterMode(soap, p, "tt:IrCutFilterMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IrCutFilterMode(struct soap *soap, const char *URL, enum tt__IrCutFilterMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IrCutFilterMode(soap, p, "tt:IrCutFilterMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_get_tt__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *, const char*, const char*);

inline int soap_read_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IrCutFilterMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IrCutFilterMode(struct soap *soap, const char *URL, enum tt__IrCutFilterMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IrCutFilterMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IrCutFilterMode(struct soap *soap, enum tt__IrCutFilterMode *p)
{
	if (::soap_read_tt__IrCutFilterMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode_DEFINED
#define SOAP_TYPE_tt__WhiteBalanceMode_DEFINED

inline void soap_default_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__WhiteBalanceMode
	*a = SOAP_DEFAULT_tt__WhiteBalanceMode;
#else
	*a = (enum tt__WhiteBalanceMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode(struct soap*, const char*, int, const enum tt__WhiteBalanceMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WhiteBalanceMode2s(struct soap*, enum tt__WhiteBalanceMode);
SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *);

SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_new_tt__WhiteBalanceMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WhiteBalanceMode(struct soap*, const enum tt__WhiteBalanceMode *, const char*, const char*);

inline int soap_write_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__WhiteBalanceMode(soap, p, "tt:WhiteBalanceMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__WhiteBalanceMode(struct soap *soap, const char *URL, enum tt__WhiteBalanceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WhiteBalanceMode(soap, p, "tt:WhiteBalanceMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WhiteBalanceMode(struct soap *soap, const char *URL, enum tt__WhiteBalanceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WhiteBalanceMode(soap, p, "tt:WhiteBalanceMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WhiteBalanceMode(struct soap *soap, const char *URL, enum tt__WhiteBalanceMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WhiteBalanceMode(soap, p, "tt:WhiteBalanceMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode(struct soap*, enum tt__WhiteBalanceMode *, const char*, const char*);

inline int soap_read_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__WhiteBalanceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WhiteBalanceMode(struct soap *soap, const char *URL, enum tt__WhiteBalanceMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WhiteBalanceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WhiteBalanceMode(struct soap *soap, enum tt__WhiteBalanceMode *p)
{
	if (::soap_read_tt__WhiteBalanceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ExposureMode_DEFINED
#define SOAP_TYPE_tt__ExposureMode_DEFINED

inline void soap_default_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ExposureMode
	*a = SOAP_DEFAULT_tt__ExposureMode;
#else
	*a = (enum tt__ExposureMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode(struct soap*, const char*, int, const enum tt__ExposureMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposureMode2s(struct soap*, enum tt__ExposureMode);
SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_in_tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *);

SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_new_tt__ExposureMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposureMode(struct soap*, const enum tt__ExposureMode *, const char*, const char*);

inline int soap_write_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ExposureMode(soap, p, "tt:ExposureMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ExposureMode(struct soap *soap, const char *URL, enum tt__ExposureMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposureMode(soap, p, "tt:ExposureMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ExposureMode(struct soap *soap, const char *URL, enum tt__ExposureMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposureMode(soap, p, "tt:ExposureMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ExposureMode(struct soap *soap, const char *URL, enum tt__ExposureMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposureMode(soap, p, "tt:ExposureMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_get_tt__ExposureMode(struct soap*, enum tt__ExposureMode *, const char*, const char*);

inline int soap_read_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ExposureMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ExposureMode(struct soap *soap, const char *URL, enum tt__ExposureMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ExposureMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ExposureMode(struct soap *soap, enum tt__ExposureMode *p)
{
	if (::soap_read_tt__ExposureMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority_DEFINED
#define SOAP_TYPE_tt__ExposurePriority_DEFINED

inline void soap_default_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ExposurePriority
	*a = SOAP_DEFAULT_tt__ExposurePriority;
#else
	*a = (enum tt__ExposurePriority)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority(struct soap*, const char*, int, const enum tt__ExposurePriority *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposurePriority2s(struct soap*, enum tt__ExposurePriority);
SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_in_tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *);

SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_new_tt__ExposurePriority(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposurePriority(struct soap*, const enum tt__ExposurePriority *, const char*, const char*);

inline int soap_write_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ExposurePriority(soap, p, "tt:ExposurePriority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ExposurePriority(struct soap *soap, const char *URL, enum tt__ExposurePriority const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposurePriority(soap, p, "tt:ExposurePriority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ExposurePriority(struct soap *soap, const char *URL, enum tt__ExposurePriority const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposurePriority(soap, p, "tt:ExposurePriority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ExposurePriority(struct soap *soap, const char *URL, enum tt__ExposurePriority const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ExposurePriority(soap, p, "tt:ExposurePriority", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_get_tt__ExposurePriority(struct soap*, enum tt__ExposurePriority *, const char*, const char*);

inline int soap_read_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ExposurePriority(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ExposurePriority(struct soap *soap, const char *URL, enum tt__ExposurePriority *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ExposurePriority(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ExposurePriority(struct soap *soap, enum tt__ExposurePriority *p)
{
	if (::soap_read_tt__ExposurePriority(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode_DEFINED
#define SOAP_TYPE_tt__BacklightCompensationMode_DEFINED

inline void soap_default_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__BacklightCompensationMode
	*a = SOAP_DEFAULT_tt__BacklightCompensationMode;
#else
	*a = (enum tt__BacklightCompensationMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode(struct soap*, const char*, int, const enum tt__BacklightCompensationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__BacklightCompensationMode2s(struct soap*, enum tt__BacklightCompensationMode);
SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *);

SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_new_tt__BacklightCompensationMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__BacklightCompensationMode(struct soap*, const enum tt__BacklightCompensationMode *, const char*, const char*);

inline int soap_write_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__BacklightCompensationMode(soap, p, "tt:BacklightCompensationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__BacklightCompensationMode(struct soap *soap, const char *URL, enum tt__BacklightCompensationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__BacklightCompensationMode(soap, p, "tt:BacklightCompensationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__BacklightCompensationMode(struct soap *soap, const char *URL, enum tt__BacklightCompensationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__BacklightCompensationMode(soap, p, "tt:BacklightCompensationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__BacklightCompensationMode(struct soap *soap, const char *URL, enum tt__BacklightCompensationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__BacklightCompensationMode(soap, p, "tt:BacklightCompensationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode(struct soap*, enum tt__BacklightCompensationMode *, const char*, const char*);

inline int soap_read_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__BacklightCompensationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__BacklightCompensationMode(struct soap *soap, const char *URL, enum tt__BacklightCompensationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__BacklightCompensationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__BacklightCompensationMode(struct soap *soap, enum tt__BacklightCompensationMode *p)
{
	if (::soap_read_tt__BacklightCompensationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode_DEFINED
#define SOAP_TYPE_tt__WideDynamicMode_DEFINED

inline void soap_default_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__WideDynamicMode
	*a = SOAP_DEFAULT_tt__WideDynamicMode;
#else
	*a = (enum tt__WideDynamicMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode(struct soap*, const char*, int, const enum tt__WideDynamicMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WideDynamicMode2s(struct soap*, enum tt__WideDynamicMode);
SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_in_tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *);

SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_new_tt__WideDynamicMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WideDynamicMode(struct soap*, const enum tt__WideDynamicMode *, const char*, const char*);

inline int soap_write_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__WideDynamicMode(soap, p, "tt:WideDynamicMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__WideDynamicMode(struct soap *soap, const char *URL, enum tt__WideDynamicMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WideDynamicMode(soap, p, "tt:WideDynamicMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WideDynamicMode(struct soap *soap, const char *URL, enum tt__WideDynamicMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WideDynamicMode(soap, p, "tt:WideDynamicMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WideDynamicMode(struct soap *soap, const char *URL, enum tt__WideDynamicMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__WideDynamicMode(soap, p, "tt:WideDynamicMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_get_tt__WideDynamicMode(struct soap*, enum tt__WideDynamicMode *, const char*, const char*);

inline int soap_read_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__WideDynamicMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WideDynamicMode(struct soap *soap, const char *URL, enum tt__WideDynamicMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WideDynamicMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WideDynamicMode(struct soap *soap, enum tt__WideDynamicMode *p)
{
	if (::soap_read_tt__WideDynamicMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode_DEFINED
#define SOAP_TYPE_tt__AutoFocusMode_DEFINED

inline void soap_default_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__AutoFocusMode
	*a = SOAP_DEFAULT_tt__AutoFocusMode;
#else
	*a = (enum tt__AutoFocusMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode(struct soap*, const char*, int, const enum tt__AutoFocusMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AutoFocusMode2s(struct soap*, enum tt__AutoFocusMode);
SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_in_tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *);

SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_new_tt__AutoFocusMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AutoFocusMode(struct soap*, const enum tt__AutoFocusMode *, const char*, const char*);

inline int soap_write_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AutoFocusMode(soap, p, "tt:AutoFocusMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AutoFocusMode(struct soap *soap, const char *URL, enum tt__AutoFocusMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AutoFocusMode(soap, p, "tt:AutoFocusMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AutoFocusMode(struct soap *soap, const char *URL, enum tt__AutoFocusMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AutoFocusMode(soap, p, "tt:AutoFocusMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AutoFocusMode(struct soap *soap, const char *URL, enum tt__AutoFocusMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AutoFocusMode(soap, p, "tt:AutoFocusMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_get_tt__AutoFocusMode(struct soap*, enum tt__AutoFocusMode *, const char*, const char*);

inline int soap_read_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AutoFocusMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AutoFocusMode(struct soap *soap, const char *URL, enum tt__AutoFocusMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AutoFocusMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AutoFocusMode(struct soap *soap, enum tt__AutoFocusMode *p)
{
	if (::soap_read_tt__AutoFocusMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED

inline void soap_default_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourOperation
	*a = SOAP_DEFAULT_tt__PTZPresetTourOperation;
#else
	*a = (enum tt__PTZPresetTourOperation)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap*, const char*, int, const enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap*, enum tt__PTZPresetTourOperation);
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *);

SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_new_tt__PTZPresetTourOperation(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap*, const enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED

inline void soap_default_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourDirection
	*a = SOAP_DEFAULT_tt__PTZPresetTourDirection;
#else
	*a = (enum tt__PTZPresetTourDirection)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap*, const char*, int, const enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap*, enum tt__PTZPresetTourDirection);
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *);

SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_new_tt__PTZPresetTourDirection(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap*, const enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourState_DEFINED

inline void soap_default_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourState
	*a = SOAP_DEFAULT_tt__PTZPresetTourState;
#else
	*a = (enum tt__PTZPresetTourState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap*, const char*, int, const enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap*, enum tt__PTZPresetTourState);
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *);

SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_new_tt__PTZPresetTourState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap*, const enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseMode_DEFINED
#define SOAP_TYPE_tt__ReverseMode_DEFINED

inline void soap_default_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ReverseMode
	*a = SOAP_DEFAULT_tt__ReverseMode;
#else
	*a = (enum tt__ReverseMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap*, const char*, int, const enum tt__ReverseMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap*, enum tt__ReverseMode);
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *);

SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_new_tt__ReverseMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap*, const enum tt__ReverseMode *, const char*, const char*);

inline int soap_write_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap*, enum tt__ReverseMode *, const char*, const char*);

inline int soap_read_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReverseMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipMode_DEFINED
#define SOAP_TYPE_tt__EFlipMode_DEFINED

inline void soap_default_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__EFlipMode
	*a = SOAP_DEFAULT_tt__EFlipMode;
#else
	*a = (enum tt__EFlipMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap*, const char*, int, const enum tt__EFlipMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap*, enum tt__EFlipMode);
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *);

SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_new_tt__EFlipMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap*, const enum tt__EFlipMode *, const char*, const char*);

inline int soap_write_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap*, enum tt__EFlipMode *, const char*, const char*);

inline int soap_read_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__EFlipMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPType_DEFINED
#define SOAP_TYPE_tt__IPType_DEFINED

inline void soap_default_tt__IPType(struct soap *soap, enum tt__IPType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IPType
	*a = SOAP_DEFAULT_tt__IPType;
#else
	*a = (enum tt__IPType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType(struct soap*, const char*, int, const enum tt__IPType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPType2s(struct soap*, enum tt__IPType);
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_in_tt__IPType(struct soap*, const char*, enum tt__IPType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPType(struct soap*, const char*, enum tt__IPType *);

SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_new_tt__IPType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPType(struct soap*, const enum tt__IPType *, const char*, const char*);

inline int soap_write_tt__IPType(struct soap *soap, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_get_tt__IPType(struct soap*, enum tt__IPType *, const char*, const char*);

inline int soap_read_tt__IPType(struct soap *soap, enum tt__IPType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IPType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPType(struct soap *soap, enum tt__IPType *p)
{
	if (::soap_read_tt__IPType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol_DEFINED
#define SOAP_TYPE_tt__TransportProtocol_DEFINED

inline void soap_default_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__TransportProtocol
	*a = SOAP_DEFAULT_tt__TransportProtocol;
#else
	*a = (enum tt__TransportProtocol)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol(struct soap*, const char*, int, const enum tt__TransportProtocol *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TransportProtocol2s(struct soap*, enum tt__TransportProtocol);
SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_in_tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *);

SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_new_tt__TransportProtocol(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TransportProtocol(struct soap*, const enum tt__TransportProtocol *, const char*, const char*);

inline int soap_write_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__TransportProtocol(soap, p, "tt:TransportProtocol", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__TransportProtocol(struct soap *soap, const char *URL, enum tt__TransportProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__TransportProtocol(soap, p, "tt:TransportProtocol", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__TransportProtocol(struct soap *soap, const char *URL, enum tt__TransportProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__TransportProtocol(soap, p, "tt:TransportProtocol", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__TransportProtocol(struct soap *soap, const char *URL, enum tt__TransportProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__TransportProtocol(soap, p, "tt:TransportProtocol", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_get_tt__TransportProtocol(struct soap*, enum tt__TransportProtocol *, const char*, const char*);

inline int soap_read_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__TransportProtocol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__TransportProtocol(struct soap *soap, const char *URL, enum tt__TransportProtocol *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__TransportProtocol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__TransportProtocol(struct soap *soap, enum tt__TransportProtocol *p)
{
	if (::soap_read_tt__TransportProtocol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StreamType_DEFINED
#define SOAP_TYPE_tt__StreamType_DEFINED

inline void soap_default_tt__StreamType(struct soap *soap, enum tt__StreamType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__StreamType
	*a = SOAP_DEFAULT_tt__StreamType;
#else
	*a = (enum tt__StreamType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType(struct soap*, const char*, int, const enum tt__StreamType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__StreamType2s(struct soap*, enum tt__StreamType);
SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_in_tt__StreamType(struct soap*, const char*, enum tt__StreamType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__StreamType(struct soap*, const char*, enum tt__StreamType *);

SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_new_tt__StreamType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StreamType(struct soap*, const enum tt__StreamType *, const char*, const char*);

inline int soap_write_tt__StreamType(struct soap *soap, enum tt__StreamType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StreamType(soap, p, "tt:StreamType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StreamType(struct soap *soap, const char *URL, enum tt__StreamType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StreamType(soap, p, "tt:StreamType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StreamType(struct soap *soap, const char *URL, enum tt__StreamType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StreamType(soap, p, "tt:StreamType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StreamType(struct soap *soap, const char *URL, enum tt__StreamType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StreamType(soap, p, "tt:StreamType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_get_tt__StreamType(struct soap*, enum tt__StreamType *, const char*, const char*);

inline int soap_read_tt__StreamType(struct soap *soap, enum tt__StreamType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StreamType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StreamType(struct soap *soap, const char *URL, enum tt__StreamType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StreamType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StreamType(struct soap *soap, enum tt__StreamType *p)
{
	if (::soap_read_tt__StreamType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding_DEFINED
#define SOAP_TYPE_tt__AudioEncoding_DEFINED

inline void soap_default_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__AudioEncoding
	*a = SOAP_DEFAULT_tt__AudioEncoding;
#else
	*a = (enum tt__AudioEncoding)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding(struct soap*, const char*, int, const enum tt__AudioEncoding *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncoding2s(struct soap*, enum tt__AudioEncoding);
SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_in_tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *);

SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_new_tt__AudioEncoding(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncoding(struct soap*, const enum tt__AudioEncoding *, const char*, const char*);

inline int soap_write_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AudioEncoding(soap, p, "tt:AudioEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioEncoding(struct soap *soap, const char *URL, enum tt__AudioEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AudioEncoding(soap, p, "tt:AudioEncoding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioEncoding(struct soap *soap, const char *URL, enum tt__AudioEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AudioEncoding(soap, p, "tt:AudioEncoding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioEncoding(struct soap *soap, const char *URL, enum tt__AudioEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AudioEncoding(soap, p, "tt:AudioEncoding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_get_tt__AudioEncoding(struct soap*, enum tt__AudioEncoding *, const char*, const char*);

inline int soap_read_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AudioEncoding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioEncoding(struct soap *soap, const char *URL, enum tt__AudioEncoding *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioEncoding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioEncoding(struct soap *soap, enum tt__AudioEncoding *p)
{
	if (::soap_read_tt__AudioEncoding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__H264Profile_DEFINED
#define SOAP_TYPE_tt__H264Profile_DEFINED

inline void soap_default_tt__H264Profile(struct soap *soap, enum tt__H264Profile *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__H264Profile
	*a = SOAP_DEFAULT_tt__H264Profile;
#else
	*a = (enum tt__H264Profile)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile(struct soap*, const char*, int, const enum tt__H264Profile *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__H264Profile2s(struct soap*, enum tt__H264Profile);
SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_in_tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *);

SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_new_tt__H264Profile(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__H264Profile(struct soap*, const enum tt__H264Profile *, const char*, const char*);

inline int soap_write_tt__H264Profile(struct soap *soap, enum tt__H264Profile const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__H264Profile(soap, p, "tt:H264Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__H264Profile(struct soap *soap, const char *URL, enum tt__H264Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__H264Profile(soap, p, "tt:H264Profile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__H264Profile(struct soap *soap, const char *URL, enum tt__H264Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__H264Profile(soap, p, "tt:H264Profile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__H264Profile(struct soap *soap, const char *URL, enum tt__H264Profile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__H264Profile(soap, p, "tt:H264Profile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_get_tt__H264Profile(struct soap*, enum tt__H264Profile *, const char*, const char*);

inline int soap_read_tt__H264Profile(struct soap *soap, enum tt__H264Profile *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__H264Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__H264Profile(struct soap *soap, const char *URL, enum tt__H264Profile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__H264Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__H264Profile(struct soap *soap, enum tt__H264Profile *p)
{
	if (::soap_read_tt__H264Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile_DEFINED
#define SOAP_TYPE_tt__Mpeg4Profile_DEFINED

inline void soap_default_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Mpeg4Profile
	*a = SOAP_DEFAULT_tt__Mpeg4Profile;
#else
	*a = (enum tt__Mpeg4Profile)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile(struct soap*, const char*, int, const enum tt__Mpeg4Profile *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Mpeg4Profile2s(struct soap*, enum tt__Mpeg4Profile);
SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_in_tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *);

SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_new_tt__Mpeg4Profile(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Mpeg4Profile(struct soap*, const enum tt__Mpeg4Profile *, const char*, const char*);

inline int soap_write_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Mpeg4Profile(soap, p, "tt:Mpeg4Profile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Mpeg4Profile(struct soap *soap, const char *URL, enum tt__Mpeg4Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Mpeg4Profile(soap, p, "tt:Mpeg4Profile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Mpeg4Profile(struct soap *soap, const char *URL, enum tt__Mpeg4Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Mpeg4Profile(soap, p, "tt:Mpeg4Profile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Mpeg4Profile(struct soap *soap, const char *URL, enum tt__Mpeg4Profile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Mpeg4Profile(soap, p, "tt:Mpeg4Profile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_get_tt__Mpeg4Profile(struct soap*, enum tt__Mpeg4Profile *, const char*, const char*);

inline int soap_read_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Mpeg4Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Mpeg4Profile(struct soap *soap, const char *URL, enum tt__Mpeg4Profile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Mpeg4Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Mpeg4Profile(struct soap *soap, enum tt__Mpeg4Profile *p)
{
	if (::soap_read_tt__Mpeg4Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding_DEFINED
#define SOAP_TYPE_tt__VideoEncoding_DEFINED

inline void soap_default_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__VideoEncoding
	*a = SOAP_DEFAULT_tt__VideoEncoding;
#else
	*a = (enum tt__VideoEncoding)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding(struct soap*, const char*, int, const enum tt__VideoEncoding *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncoding2s(struct soap*, enum tt__VideoEncoding);
SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_in_tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *);

SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_new_tt__VideoEncoding(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncoding(struct soap*, const enum tt__VideoEncoding *, const char*, const char*);

inline int soap_write_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__VideoEncoding(soap, p, "tt:VideoEncoding", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoEncoding(struct soap *soap, const char *URL, enum tt__VideoEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__VideoEncoding(soap, p, "tt:VideoEncoding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoEncoding(struct soap *soap, const char *URL, enum tt__VideoEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__VideoEncoding(soap, p, "tt:VideoEncoding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoEncoding(struct soap *soap, const char *URL, enum tt__VideoEncoding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__VideoEncoding(soap, p, "tt:VideoEncoding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_get_tt__VideoEncoding(struct soap*, enum tt__VideoEncoding *, const char*, const char*);

inline int soap_read_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__VideoEncoding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoEncoding(struct soap *soap, const char *URL, enum tt__VideoEncoding *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoEncoding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoEncoding(struct soap *soap, enum tt__VideoEncoding *p)
{
	if (::soap_read_tt__VideoEncoding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationMode_DEFINED
#define SOAP_TYPE_tt__SceneOrientationMode_DEFINED

inline void soap_default_tt__SceneOrientationMode(struct soap *soap, enum tt__SceneOrientationMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__SceneOrientationMode
	*a = SOAP_DEFAULT_tt__SceneOrientationMode;
#else
	*a = (enum tt__SceneOrientationMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationMode(struct soap*, const char*, int, const enum tt__SceneOrientationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SceneOrientationMode2s(struct soap*, enum tt__SceneOrientationMode);
SOAP_FMAC3 enum tt__SceneOrientationMode * SOAP_FMAC4 soap_in_tt__SceneOrientationMode(struct soap*, const char*, enum tt__SceneOrientationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SceneOrientationMode(struct soap*, const char*, enum tt__SceneOrientationMode *);

SOAP_FMAC3 enum tt__SceneOrientationMode * SOAP_FMAC4 soap_new_tt__SceneOrientationMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SceneOrientationMode(struct soap*, const enum tt__SceneOrientationMode *, const char*, const char*);

inline int soap_write_tt__SceneOrientationMode(struct soap *soap, enum tt__SceneOrientationMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__SceneOrientationMode(soap, p, "tt:SceneOrientationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__SceneOrientationMode(struct soap *soap, const char *URL, enum tt__SceneOrientationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SceneOrientationMode(soap, p, "tt:SceneOrientationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SceneOrientationMode(struct soap *soap, const char *URL, enum tt__SceneOrientationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SceneOrientationMode(soap, p, "tt:SceneOrientationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SceneOrientationMode(struct soap *soap, const char *URL, enum tt__SceneOrientationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SceneOrientationMode(soap, p, "tt:SceneOrientationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SceneOrientationMode * SOAP_FMAC4 soap_get_tt__SceneOrientationMode(struct soap*, enum tt__SceneOrientationMode *, const char*, const char*);

inline int soap_read_tt__SceneOrientationMode(struct soap *soap, enum tt__SceneOrientationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__SceneOrientationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SceneOrientationMode(struct soap *soap, const char *URL, enum tt__SceneOrientationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SceneOrientationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SceneOrientationMode(struct soap *soap, enum tt__SceneOrientationMode *p)
{
	if (::soap_read_tt__SceneOrientationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RotateMode_DEFINED
#define SOAP_TYPE_tt__RotateMode_DEFINED

inline void soap_default_tt__RotateMode(struct soap *soap, enum tt__RotateMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__RotateMode
	*a = SOAP_DEFAULT_tt__RotateMode;
#else
	*a = (enum tt__RotateMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode(struct soap*, const char*, int, const enum tt__RotateMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RotateMode2s(struct soap*, enum tt__RotateMode);
SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_in_tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *);

SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_new_tt__RotateMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RotateMode(struct soap*, const enum tt__RotateMode *, const char*, const char*);

inline int soap_write_tt__RotateMode(struct soap *soap, enum tt__RotateMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__RotateMode(soap, p, "tt:RotateMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__RotateMode(struct soap *soap, const char *URL, enum tt__RotateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RotateMode(soap, p, "tt:RotateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RotateMode(struct soap *soap, const char *URL, enum tt__RotateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RotateMode(soap, p, "tt:RotateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RotateMode(struct soap *soap, const char *URL, enum tt__RotateMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RotateMode(soap, p, "tt:RotateMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_get_tt__RotateMode(struct soap*, enum tt__RotateMode *, const char*, const char*);

inline int soap_read_tt__RotateMode(struct soap *soap, enum tt__RotateMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__RotateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RotateMode(struct soap *soap, const char *URL, enum tt__RotateMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RotateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RotateMode(struct soap *soap, enum tt__RotateMode *p)
{
	if (::soap_read_tt__RotateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem_DEFINED
#define SOAP_TYPE__tt__ItemList_ElementItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_ElementItem(struct soap*, const char*, int, const _tt__ItemList_ElementItem *, const char*);
SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_in__tt__ItemList_ElementItem(struct soap*, const char*, _tt__ItemList_ElementItem *, const char*);
SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_ElementItem * soap_new__tt__ItemList_ElementItem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemList_ElementItem * soap_new_req__tt__ItemList_ElementItem(
	struct soap *soap,
	const std::string& Name)
{
	_tt__ItemList_ElementItem *_p = ::soap_new__tt__ItemList_ElementItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_ElementItem::Name = Name;
	}
	return _p;
}

inline _tt__ItemList_ElementItem * soap_new_set__tt__ItemList_ElementItem(
	struct soap *soap,
	const std::string& Name)
{
	_tt__ItemList_ElementItem *_p = ::soap_new__tt__ItemList_ElementItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_ElementItem::Name = Name;
	}
	return _p;
}

inline int soap_write__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-ElementItem", p->soap_type() == SOAP_TYPE__tt__ItemList_ElementItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tt__ItemList_ElementItem(struct soap *soap, const char *URL, _tt__ItemList_ElementItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-ElementItem", p->soap_type() == SOAP_TYPE__tt__ItemList_ElementItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tt__ItemList_ElementItem(struct soap *soap, const char *URL, _tt__ItemList_ElementItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-ElementItem", p->soap_type() == SOAP_TYPE__tt__ItemList_ElementItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tt__ItemList_ElementItem(struct soap *soap, const char *URL, _tt__ItemList_ElementItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-ElementItem", p->soap_type() == SOAP_TYPE__tt__ItemList_ElementItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_get__tt__ItemList_ElementItem(struct soap*, _tt__ItemList_ElementItem *, const char*, const char*);

inline int soap_read__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tt__ItemList_ElementItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tt__ItemList_ElementItem(struct soap *soap, const char *URL, _tt__ItemList_ElementItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tt__ItemList_ElementItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem *p)
{
	if (::soap_read__tt__ItemList_ElementItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem_DEFINED
#define SOAP_TYPE__tt__ItemList_SimpleItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_SimpleItem(struct soap*, const char*, int, const _tt__ItemList_SimpleItem *, const char*);
SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_in__tt__ItemList_SimpleItem(struct soap*, const char*, _tt__ItemList_SimpleItem *, const char*);
SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_SimpleItem * soap_new__tt__ItemList_SimpleItem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL);
}

inline _tt__ItemList_SimpleItem * soap_new_req__tt__ItemList_SimpleItem(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	_tt__ItemList_SimpleItem *_p = ::soap_new__tt__ItemList_SimpleItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_SimpleItem::Name = Name;
		_p->_tt__ItemList_SimpleItem::Value = Value;
	}
	return _p;
}

inline _tt__ItemList_SimpleItem * soap_new_set__tt__ItemList_SimpleItem(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	_tt__ItemList_SimpleItem *_p = ::soap_new__tt__ItemList_SimpleItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tt__ItemList_SimpleItem::Name = Name;
		_p->_tt__ItemList_SimpleItem::Value = Value;
	}
	return _p;
}

inline int soap_write__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-SimpleItem", p->soap_type() == SOAP_TYPE__tt__ItemList_SimpleItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tt__ItemList_SimpleItem(struct soap *soap, const char *URL, _tt__ItemList_SimpleItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-SimpleItem", p->soap_type() == SOAP_TYPE__tt__ItemList_SimpleItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tt__ItemList_SimpleItem(struct soap *soap, const char *URL, _tt__ItemList_SimpleItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-SimpleItem", p->soap_type() == SOAP_TYPE__tt__ItemList_SimpleItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tt__ItemList_SimpleItem(struct soap *soap, const char *URL, _tt__ItemList_SimpleItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList-SimpleItem", p->soap_type() == SOAP_TYPE__tt__ItemList_SimpleItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_get__tt__ItemList_SimpleItem(struct soap*, _tt__ItemList_SimpleItem *, const char*, const char*);

inline int soap_read__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tt__ItemList_SimpleItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tt__ItemList_SimpleItem(struct soap *soap, const char *URL, _tt__ItemList_SimpleItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tt__ItemList_SimpleItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem *p)
{
	if (::soap_read__tt__ItemList_SimpleItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _tt__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tt__EventSubscription_SubscriptionPolicy * soap_new__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_req__tt__EventSubscription_SubscriptionPolicy(
	struct soap *soap)
{
	_tt__EventSubscription_SubscriptionPolicy *_p = ::soap_new__tt__EventSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_set__tt__EventSubscription_SubscriptionPolicy(
	struct soap *soap)
{
	_tt__EventSubscription_SubscriptionPolicy *_p = ::soap_new__tt__EventSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tt__EventSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tt__EventSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tt__EventSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tt__EventSubscription_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tt__EventSubscription_SubscriptionPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tt__EventSubscription_SubscriptionPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy *p)
{
	if (::soap_read__tt__EventSubscription_SubscriptionPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken_DEFINED
#define SOAP_TYPE_tt__ReferenceToken_DEFINED

inline void soap_default_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);

#define soap_tt__ReferenceToken2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceToken(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_new_tt__ReferenceToken soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceToken(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReferenceToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReferenceToken(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Description_DEFINED
#define SOAP_TYPE_tt__Description_DEFINED

inline void soap_default_tt__Description(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Description(struct soap*, const std::string *);

#define soap_tt__Description2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Description(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Description(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Description(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Description soap_instantiate_std__string


#define soap_new_tt__Description soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Description(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Description(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Description(soap, p, "tt:Description", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Description(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Description(soap, p, "tt:Description", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Description(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Description(soap, p, "tt:Description", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Description(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Description(soap, p, "tt:Description", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Description(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Description(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Description(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Description(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Description(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Description(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Description(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData_DEFINED
#define SOAP_TYPE_tt__AuxiliaryData_DEFINED

inline void soap_default_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);

#define soap_tt__AuxiliaryData2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AuxiliaryData(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 128, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_new_tt__AuxiliaryData soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AuxiliaryData(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* tt__IPv6Address is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__IPv6Address_DEFINED
#define SOAP_TYPE_tt__IPv6Address_DEFINED

#define soap_default_tt__IPv6Address soap_default_xsd__token


#define soap_serialize_tt__IPv6Address soap_serialize_xsd__token


#define soap_tt__IPv6Address2s(soap, a) ((a).c_str())

#define soap_out_tt__IPv6Address soap_out_xsd__token


#define soap_s2tt__IPv6Address(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__IPv6Address soap_in_xsd__token


#define soap_instantiate_tt__IPv6Address soap_instantiate_xsd__token


#define soap_new_tt__IPv6Address soap_new_xsd__token


#define soap_put_tt__IPv6Address soap_put_xsd__token


#define soap_write_tt__IPv6Address soap_write_xsd__token


#define soap_PUT_tt__IPv6Address soap_PUT_xsd__token


#define soap_PATCH_tt__IPv6Address soap_PATCH_xsd__token


#define soap_POST_send_tt__IPv6Address soap_POST_send_xsd__token


#define soap_get_tt__IPv6Address soap_get_xsd__token


#define soap_read_tt__IPv6Address soap_read_xsd__token


#define soap_GET_tt__IPv6Address soap_GET_xsd__token


#define soap_POST_recv_tt__IPv6Address soap_POST_recv_xsd__token

#endif
/* tt__IPv4Address is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__IPv4Address_DEFINED
#define SOAP_TYPE_tt__IPv4Address_DEFINED

#define soap_default_tt__IPv4Address soap_default_xsd__token


#define soap_serialize_tt__IPv4Address soap_serialize_xsd__token


#define soap_tt__IPv4Address2s(soap, a) ((a).c_str())

#define soap_out_tt__IPv4Address soap_out_xsd__token


#define soap_s2tt__IPv4Address(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__IPv4Address soap_in_xsd__token


#define soap_instantiate_tt__IPv4Address soap_instantiate_xsd__token


#define soap_new_tt__IPv4Address soap_new_xsd__token


#define soap_put_tt__IPv4Address soap_put_xsd__token


#define soap_write_tt__IPv4Address soap_write_xsd__token


#define soap_PUT_tt__IPv4Address soap_PUT_xsd__token


#define soap_PATCH_tt__IPv4Address soap_PATCH_xsd__token


#define soap_POST_send_tt__IPv4Address soap_POST_send_xsd__token


#define soap_get_tt__IPv4Address soap_get_xsd__token


#define soap_read_tt__IPv4Address soap_read_xsd__token


#define soap_GET_tt__IPv4Address soap_GET_xsd__token


#define soap_POST_recv_tt__IPv4Address soap_POST_recv_xsd__token

#endif

#ifndef SOAP_TYPE_tt__Name_DEFINED
#define SOAP_TYPE_tt__Name_DEFINED

inline void soap_default_tt__Name(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);

#define soap_tt__Name2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Name(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_new_tt__Name soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Name(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Name(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Name(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Name(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__EncodingTypes_DEFINED
#define SOAP_TYPE_trt__EncodingTypes_DEFINED

inline void soap_default_trt__EncodingTypes(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_trt__EncodingTypes(struct soap*, const std::string *);

#define soap_trt__EncodingTypes2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__EncodingTypes(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2trt__EncodingTypes(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_trt__EncodingTypes(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_trt__EncodingTypes soap_instantiate_std__string


#define soap_new_trt__EncodingTypes soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_trt__EncodingTypes(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_trt__EncodingTypes(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_trt__EncodingTypes(soap, p, "trt:EncodingTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_trt__EncodingTypes(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_trt__EncodingTypes(soap, p, "trt:EncodingTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__EncodingTypes(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_trt__EncodingTypes(soap, p, "trt:EncodingTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__EncodingTypes(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_trt__EncodingTypes(soap, p, "trt:EncodingTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_trt__EncodingTypes(struct soap*, std::string *, const char*, const char*);

inline int soap_read_trt__EncodingTypes(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_trt__EncodingTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__EncodingTypes(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__EncodingTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__EncodingTypes(struct soap *soap, std::string *p)
{
	if (::soap_read_trt__EncodingTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StringList_DEFINED
#define SOAP_TYPE_tt__StringList_DEFINED

inline void soap_default_tt__StringList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringList(struct soap*, const std::string *);

#define soap_tt__StringList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringList soap_instantiate_std__string


#define soap_new_tt__StringList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StringList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StringList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StringList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StringAttrList_DEFINED
#define SOAP_TYPE_tt__StringAttrList_DEFINED

inline void soap_default_tt__StringAttrList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringAttrList(struct soap*, const std::string *);

#define soap_tt__StringAttrList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringAttrList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringAttrList soap_instantiate_std__string


#define soap_new_tt__StringAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringAttrList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StringAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StringAttrList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StringAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StringAttrList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__StringAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntAttrList_DEFINED
#define SOAP_TYPE_tt__IntAttrList_DEFINED

inline void soap_default_tt__IntAttrList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntAttrList(struct soap*, const std::string *);

#define soap_tt__IntAttrList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__IntAttrList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__IntAttrList soap_instantiate_std__string


#define soap_new_tt__IntAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__IntAttrList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IntAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntAttrList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__DeleteOSDResponse_DEFINED
#define SOAP_TYPE__trt__DeleteOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteOSDResponse(struct soap*, const char*, int, const _trt__DeleteOSDResponse *, const char*);
SOAP_FMAC3 _trt__DeleteOSDResponse * SOAP_FMAC4 soap_in__trt__DeleteOSDResponse(struct soap*, const char*, _trt__DeleteOSDResponse *, const char*);
SOAP_FMAC1 _trt__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteOSDResponse * soap_new__trt__DeleteOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteOSDResponse * soap_new_req__trt__DeleteOSDResponse(
	struct soap *soap)
{
	_trt__DeleteOSDResponse *_p = ::soap_new__trt__DeleteOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__DeleteOSDResponse * soap_new_set__trt__DeleteOSDResponse(
	struct soap *soap)
{
	_trt__DeleteOSDResponse *_p = ::soap_new__trt__DeleteOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__DeleteOSDResponse(struct soap *soap, _trt__DeleteOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSDResponse", p->soap_type() == SOAP_TYPE__trt__DeleteOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__DeleteOSDResponse(struct soap *soap, const char *URL, _trt__DeleteOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSDResponse", p->soap_type() == SOAP_TYPE__trt__DeleteOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__DeleteOSDResponse(struct soap *soap, const char *URL, _trt__DeleteOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSDResponse", p->soap_type() == SOAP_TYPE__trt__DeleteOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__DeleteOSDResponse(struct soap *soap, const char *URL, _trt__DeleteOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSDResponse", p->soap_type() == SOAP_TYPE__trt__DeleteOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteOSDResponse * SOAP_FMAC4 soap_get__trt__DeleteOSDResponse(struct soap*, _trt__DeleteOSDResponse *, const char*, const char*);

inline int soap_read__trt__DeleteOSDResponse(struct soap *soap, _trt__DeleteOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__DeleteOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__DeleteOSDResponse(struct soap *soap, const char *URL, _trt__DeleteOSDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__DeleteOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__DeleteOSDResponse(struct soap *soap, _trt__DeleteOSDResponse *p)
{
	if (::soap_read__trt__DeleteOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__DeleteOSD_DEFINED
#define SOAP_TYPE__trt__DeleteOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteOSD(struct soap*, const char*, int, const _trt__DeleteOSD *, const char*);
SOAP_FMAC3 _trt__DeleteOSD * SOAP_FMAC4 soap_in__trt__DeleteOSD(struct soap*, const char*, _trt__DeleteOSD *, const char*);
SOAP_FMAC1 _trt__DeleteOSD * SOAP_FMAC2 soap_instantiate__trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteOSD * soap_new__trt__DeleteOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteOSD * soap_new_req__trt__DeleteOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__DeleteOSD *_p = ::soap_new__trt__DeleteOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__DeleteOSD * soap_new_set__trt__DeleteOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__DeleteOSD *_p = ::soap_new__trt__DeleteOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline int soap_write__trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSD", p->soap_type() == SOAP_TYPE__trt__DeleteOSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__DeleteOSD(struct soap *soap, const char *URL, _trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSD", p->soap_type() == SOAP_TYPE__trt__DeleteOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__DeleteOSD(struct soap *soap, const char *URL, _trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSD", p->soap_type() == SOAP_TYPE__trt__DeleteOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__DeleteOSD(struct soap *soap, const char *URL, _trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteOSD", p->soap_type() == SOAP_TYPE__trt__DeleteOSD ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteOSD * SOAP_FMAC4 soap_get__trt__DeleteOSD(struct soap*, _trt__DeleteOSD *, const char*, const char*);

inline int soap_read__trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__DeleteOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__DeleteOSD(struct soap *soap, const char *URL, _trt__DeleteOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__DeleteOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD *p)
{
	if (::soap_read__trt__DeleteOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__CreateOSDResponse_DEFINED
#define SOAP_TYPE__trt__CreateOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateOSDResponse(struct soap*, const char*, int, const _trt__CreateOSDResponse *, const char*);
SOAP_FMAC3 _trt__CreateOSDResponse * SOAP_FMAC4 soap_in__trt__CreateOSDResponse(struct soap*, const char*, _trt__CreateOSDResponse *, const char*);
SOAP_FMAC1 _trt__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__trt__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateOSDResponse * soap_new__trt__CreateOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateOSDResponse * soap_new_req__trt__CreateOSDResponse(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__CreateOSDResponse *_p = ::soap_new__trt__CreateOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSDResponse::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__CreateOSDResponse * soap_new_set__trt__CreateOSDResponse(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__CreateOSDResponse *_p = ::soap_new__trt__CreateOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSDResponse::OSDToken = OSDToken;
	}
	return _p;
}

inline int soap_write__trt__CreateOSDResponse(struct soap *soap, _trt__CreateOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSDResponse", p->soap_type() == SOAP_TYPE__trt__CreateOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__CreateOSDResponse(struct soap *soap, const char *URL, _trt__CreateOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSDResponse", p->soap_type() == SOAP_TYPE__trt__CreateOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__CreateOSDResponse(struct soap *soap, const char *URL, _trt__CreateOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSDResponse", p->soap_type() == SOAP_TYPE__trt__CreateOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__CreateOSDResponse(struct soap *soap, const char *URL, _trt__CreateOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSDResponse", p->soap_type() == SOAP_TYPE__trt__CreateOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateOSDResponse * SOAP_FMAC4 soap_get__trt__CreateOSDResponse(struct soap*, _trt__CreateOSDResponse *, const char*, const char*);

inline int soap_read__trt__CreateOSDResponse(struct soap *soap, _trt__CreateOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__CreateOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__CreateOSDResponse(struct soap *soap, const char *URL, _trt__CreateOSDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__CreateOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__CreateOSDResponse(struct soap *soap, _trt__CreateOSDResponse *p)
{
	if (::soap_read__trt__CreateOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__CreateOSD_DEFINED
#define SOAP_TYPE__trt__CreateOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateOSD(struct soap*, const char*, int, const _trt__CreateOSD *, const char*);
SOAP_FMAC3 _trt__CreateOSD * SOAP_FMAC4 soap_in__trt__CreateOSD(struct soap*, const char*, _trt__CreateOSD *, const char*);
SOAP_FMAC1 _trt__CreateOSD * SOAP_FMAC2 soap_instantiate__trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateOSD * soap_new__trt__CreateOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateOSD * soap_new_req__trt__CreateOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__CreateOSD *_p = ::soap_new__trt__CreateOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSD::OSD = OSD;
	}
	return _p;
}

inline _trt__CreateOSD * soap_new_set__trt__CreateOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__CreateOSD *_p = ::soap_new__trt__CreateOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateOSD::OSD = OSD;
	}
	return _p;
}

inline int soap_write__trt__CreateOSD(struct soap *soap, _trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSD", p->soap_type() == SOAP_TYPE__trt__CreateOSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__CreateOSD(struct soap *soap, const char *URL, _trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSD", p->soap_type() == SOAP_TYPE__trt__CreateOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__CreateOSD(struct soap *soap, const char *URL, _trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSD", p->soap_type() == SOAP_TYPE__trt__CreateOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__CreateOSD(struct soap *soap, const char *URL, _trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateOSD", p->soap_type() == SOAP_TYPE__trt__CreateOSD ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateOSD * SOAP_FMAC4 soap_get__trt__CreateOSD(struct soap*, _trt__CreateOSD *, const char*, const char*);

inline int soap_read__trt__CreateOSD(struct soap *soap, _trt__CreateOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__CreateOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__CreateOSD(struct soap *soap, const char *URL, _trt__CreateOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__CreateOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__CreateOSD(struct soap *soap, _trt__CreateOSD *p)
{
	if (::soap_read__trt__CreateOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDOptionsResponse(struct soap*, const char*, int, const _trt__GetOSDOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDOptionsResponse * SOAP_FMAC4 soap_in__trt__GetOSDOptionsResponse(struct soap*, const char*, _trt__GetOSDOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDOptionsResponse * soap_new__trt__GetOSDOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDOptionsResponse * soap_new_req__trt__GetOSDOptionsResponse(
	struct soap *soap,
	tt__OSDConfigurationOptions *OSDOptions)
{
	_trt__GetOSDOptionsResponse *_p = ::soap_new__trt__GetOSDOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptionsResponse::OSDOptions = OSDOptions;
	}
	return _p;
}

inline _trt__GetOSDOptionsResponse * soap_new_set__trt__GetOSDOptionsResponse(
	struct soap *soap,
	tt__OSDConfigurationOptions *OSDOptions)
{
	_trt__GetOSDOptionsResponse *_p = ::soap_new__trt__GetOSDOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptionsResponse::OSDOptions = OSDOptions;
	}
	return _p;
}

inline int soap_write__trt__GetOSDOptionsResponse(struct soap *soap, _trt__GetOSDOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSDOptionsResponse(struct soap *soap, const char *URL, _trt__GetOSDOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSDOptionsResponse(struct soap *soap, const char *URL, _trt__GetOSDOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSDOptionsResponse(struct soap *soap, const char *URL, _trt__GetOSDOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDOptionsResponse * SOAP_FMAC4 soap_get__trt__GetOSDOptionsResponse(struct soap*, _trt__GetOSDOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDOptionsResponse(struct soap *soap, _trt__GetOSDOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSDOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSDOptionsResponse(struct soap *soap, const char *URL, _trt__GetOSDOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSDOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSDOptionsResponse(struct soap *soap, _trt__GetOSDOptionsResponse *p)
{
	if (::soap_read__trt__GetOSDOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptions_DEFINED
#define SOAP_TYPE__trt__GetOSDOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDOptions(struct soap*, const char*, int, const _trt__GetOSDOptions *, const char*);
SOAP_FMAC3 _trt__GetOSDOptions * SOAP_FMAC4 soap_in__trt__GetOSDOptions(struct soap*, const char*, _trt__GetOSDOptions *, const char*);
SOAP_FMAC1 _trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDOptions * soap_new__trt__GetOSDOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDOptions * soap_new_req__trt__GetOSDOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetOSDOptions *_p = ::soap_new__trt__GetOSDOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetOSDOptions * soap_new_set__trt__GetOSDOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetOSDOptions *_p = ::soap_new__trt__GetOSDOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptions", p->soap_type() == SOAP_TYPE__trt__GetOSDOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSDOptions(struct soap *soap, const char *URL, _trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptions", p->soap_type() == SOAP_TYPE__trt__GetOSDOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSDOptions(struct soap *soap, const char *URL, _trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptions", p->soap_type() == SOAP_TYPE__trt__GetOSDOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSDOptions(struct soap *soap, const char *URL, _trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDOptions", p->soap_type() == SOAP_TYPE__trt__GetOSDOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDOptions * SOAP_FMAC4 soap_get__trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *, const char*, const char*);

inline int soap_read__trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSDOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSDOptions(struct soap *soap, const char *URL, _trt__GetOSDOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSDOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions *p)
{
	if (::soap_read__trt__GetOSDOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetOSDResponse_DEFINED
#define SOAP_TYPE__trt__SetOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetOSDResponse(struct soap*, const char*, int, const _trt__SetOSDResponse *, const char*);
SOAP_FMAC3 _trt__SetOSDResponse * SOAP_FMAC4 soap_in__trt__SetOSDResponse(struct soap*, const char*, _trt__SetOSDResponse *, const char*);
SOAP_FMAC1 _trt__SetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetOSDResponse * soap_new__trt__SetOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetOSDResponse * soap_new_req__trt__SetOSDResponse(
	struct soap *soap)
{
	_trt__SetOSDResponse *_p = ::soap_new__trt__SetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetOSDResponse * soap_new_set__trt__SetOSDResponse(
	struct soap *soap)
{
	_trt__SetOSDResponse *_p = ::soap_new__trt__SetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetOSDResponse(struct soap *soap, _trt__SetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSDResponse", p->soap_type() == SOAP_TYPE__trt__SetOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetOSDResponse(struct soap *soap, const char *URL, _trt__SetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSDResponse", p->soap_type() == SOAP_TYPE__trt__SetOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetOSDResponse(struct soap *soap, const char *URL, _trt__SetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSDResponse", p->soap_type() == SOAP_TYPE__trt__SetOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetOSDResponse(struct soap *soap, const char *URL, _trt__SetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSDResponse", p->soap_type() == SOAP_TYPE__trt__SetOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetOSDResponse * SOAP_FMAC4 soap_get__trt__SetOSDResponse(struct soap*, _trt__SetOSDResponse *, const char*, const char*);

inline int soap_read__trt__SetOSDResponse(struct soap *soap, _trt__SetOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetOSDResponse(struct soap *soap, const char *URL, _trt__SetOSDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetOSDResponse(struct soap *soap, _trt__SetOSDResponse *p)
{
	if (::soap_read__trt__SetOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetOSD_DEFINED
#define SOAP_TYPE__trt__SetOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetOSD(struct soap*, const char*, int, const _trt__SetOSD *, const char*);
SOAP_FMAC3 _trt__SetOSD * SOAP_FMAC4 soap_in__trt__SetOSD(struct soap*, const char*, _trt__SetOSD *, const char*);
SOAP_FMAC1 _trt__SetOSD * SOAP_FMAC2 soap_instantiate__trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetOSD * soap_new__trt__SetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__SetOSD * soap_new_req__trt__SetOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__SetOSD *_p = ::soap_new__trt__SetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetOSD::OSD = OSD;
	}
	return _p;
}

inline _trt__SetOSD * soap_new_set__trt__SetOSD(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__SetOSD *_p = ::soap_new__trt__SetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetOSD::OSD = OSD;
	}
	return _p;
}

inline int soap_write__trt__SetOSD(struct soap *soap, _trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSD", p->soap_type() == SOAP_TYPE__trt__SetOSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetOSD(struct soap *soap, const char *URL, _trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSD", p->soap_type() == SOAP_TYPE__trt__SetOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetOSD(struct soap *soap, const char *URL, _trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSD", p->soap_type() == SOAP_TYPE__trt__SetOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetOSD(struct soap *soap, const char *URL, _trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetOSD", p->soap_type() == SOAP_TYPE__trt__SetOSD ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetOSD * SOAP_FMAC4 soap_get__trt__SetOSD(struct soap*, _trt__SetOSD *, const char*, const char*);

inline int soap_read__trt__SetOSD(struct soap *soap, _trt__SetOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetOSD(struct soap *soap, const char *URL, _trt__SetOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetOSD(struct soap *soap, _trt__SetOSD *p)
{
	if (::soap_read__trt__SetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDResponse(struct soap*, const char*, int, const _trt__GetOSDResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDResponse * SOAP_FMAC4 soap_in__trt__GetOSDResponse(struct soap*, const char*, _trt__GetOSDResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDResponse * soap_new__trt__GetOSDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDResponse * soap_new_req__trt__GetOSDResponse(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__GetOSDResponse *_p = ::soap_new__trt__GetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDResponse::OSD = OSD;
	}
	return _p;
}

inline _trt__GetOSDResponse * soap_new_set__trt__GetOSDResponse(
	struct soap *soap,
	tt__OSDConfiguration *OSD)
{
	_trt__GetOSDResponse *_p = ::soap_new__trt__GetOSDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDResponse::OSD = OSD;
	}
	return _p;
}

inline int soap_write__trt__GetOSDResponse(struct soap *soap, _trt__GetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSDResponse(struct soap *soap, const char *URL, _trt__GetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSDResponse(struct soap *soap, const char *URL, _trt__GetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSDResponse(struct soap *soap, const char *URL, _trt__GetOSDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDResponse * SOAP_FMAC4 soap_get__trt__GetOSDResponse(struct soap*, _trt__GetOSDResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDResponse(struct soap *soap, _trt__GetOSDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSDResponse(struct soap *soap, const char *URL, _trt__GetOSDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSDResponse(struct soap *soap, _trt__GetOSDResponse *p)
{
	if (::soap_read__trt__GetOSDResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSD_DEFINED
#define SOAP_TYPE__trt__GetOSD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSD(struct soap*, const char*, int, const _trt__GetOSD *, const char*);
SOAP_FMAC3 _trt__GetOSD * SOAP_FMAC4 soap_in__trt__GetOSD(struct soap*, const char*, _trt__GetOSD *, const char*);
SOAP_FMAC1 _trt__GetOSD * SOAP_FMAC2 soap_instantiate__trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSD * soap_new__trt__GetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSD(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSD * soap_new_req__trt__GetOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__GetOSD *_p = ::soap_new__trt__GetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline _trt__GetOSD * soap_new_set__trt__GetOSD(
	struct soap *soap,
	const std::string& OSDToken)
{
	_trt__GetOSD *_p = ::soap_new__trt__GetOSD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSD::OSDToken = OSDToken;
	}
	return _p;
}

inline int soap_write__trt__GetOSD(struct soap *soap, _trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSD", p->soap_type() == SOAP_TYPE__trt__GetOSD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSD(struct soap *soap, const char *URL, _trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSD", p->soap_type() == SOAP_TYPE__trt__GetOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSD(struct soap *soap, const char *URL, _trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSD", p->soap_type() == SOAP_TYPE__trt__GetOSD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSD(struct soap *soap, const char *URL, _trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSD", p->soap_type() == SOAP_TYPE__trt__GetOSD ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSD * SOAP_FMAC4 soap_get__trt__GetOSD(struct soap*, _trt__GetOSD *, const char*, const char*);

inline int soap_read__trt__GetOSD(struct soap *soap, _trt__GetOSD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSD(struct soap *soap, const char *URL, _trt__GetOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSD(struct soap *soap, _trt__GetOSD *p)
{
	if (::soap_read__trt__GetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDsResponse_DEFINED
#define SOAP_TYPE__trt__GetOSDsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDsResponse(struct soap*, const char*, int, const _trt__GetOSDsResponse *, const char*);
SOAP_FMAC3 _trt__GetOSDsResponse * SOAP_FMAC4 soap_in__trt__GetOSDsResponse(struct soap*, const char*, _trt__GetOSDsResponse *, const char*);
SOAP_FMAC1 _trt__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDsResponse * soap_new__trt__GetOSDsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDsResponse * soap_new_req__trt__GetOSDsResponse(
	struct soap *soap)
{
	_trt__GetOSDsResponse *_p = ::soap_new__trt__GetOSDsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetOSDsResponse * soap_new_set__trt__GetOSDsResponse(
	struct soap *soap,
	const std::vector<tt__OSDConfiguration *> & OSDs)
{
	_trt__GetOSDsResponse *_p = ::soap_new__trt__GetOSDsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDsResponse::OSDs = OSDs;
	}
	return _p;
}

inline int soap_write__trt__GetOSDsResponse(struct soap *soap, _trt__GetOSDsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSDsResponse(struct soap *soap, const char *URL, _trt__GetOSDsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSDsResponse(struct soap *soap, const char *URL, _trt__GetOSDsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSDsResponse(struct soap *soap, const char *URL, _trt__GetOSDsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDsResponse", p->soap_type() == SOAP_TYPE__trt__GetOSDsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDsResponse * SOAP_FMAC4 soap_get__trt__GetOSDsResponse(struct soap*, _trt__GetOSDsResponse *, const char*, const char*);

inline int soap_read__trt__GetOSDsResponse(struct soap *soap, _trt__GetOSDsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSDsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSDsResponse(struct soap *soap, const char *URL, _trt__GetOSDsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSDsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSDsResponse(struct soap *soap, _trt__GetOSDsResponse *p)
{
	if (::soap_read__trt__GetOSDsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetOSDs_DEFINED
#define SOAP_TYPE__trt__GetOSDs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetOSDs(struct soap*, const char*, int, const _trt__GetOSDs *, const char*);
SOAP_FMAC3 _trt__GetOSDs * SOAP_FMAC4 soap_in__trt__GetOSDs(struct soap*, const char*, _trt__GetOSDs *, const char*);
SOAP_FMAC1 _trt__GetOSDs * SOAP_FMAC2 soap_instantiate__trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetOSDs * soap_new__trt__GetOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetOSDs(soap, n, NULL, NULL, NULL);
}

inline _trt__GetOSDs * soap_new_req__trt__GetOSDs(
	struct soap *soap)
{
	_trt__GetOSDs *_p = ::soap_new__trt__GetOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetOSDs * soap_new_set__trt__GetOSDs(
	struct soap *soap,
	std::string *ConfigurationToken)
{
	_trt__GetOSDs *_p = ::soap_new__trt__GetOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetOSDs::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetOSDs(struct soap *soap, _trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDs", p->soap_type() == SOAP_TYPE__trt__GetOSDs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetOSDs(struct soap *soap, const char *URL, _trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDs", p->soap_type() == SOAP_TYPE__trt__GetOSDs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetOSDs(struct soap *soap, const char *URL, _trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDs", p->soap_type() == SOAP_TYPE__trt__GetOSDs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetOSDs(struct soap *soap, const char *URL, _trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetOSDs", p->soap_type() == SOAP_TYPE__trt__GetOSDs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetOSDs * SOAP_FMAC4 soap_get__trt__GetOSDs(struct soap*, _trt__GetOSDs *, const char*, const char*);

inline int soap_read__trt__GetOSDs(struct soap *soap, _trt__GetOSDs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetOSDs(struct soap *soap, const char *URL, _trt__GetOSDs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetOSDs(struct soap *soap, _trt__GetOSDs *p)
{
	if (::soap_read__trt__GetOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceModeResponse(struct soap*, const char*, int, const _trt__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceModeResponse * SOAP_FMAC4 soap_in__trt__SetVideoSourceModeResponse(struct soap*, const char*, _trt__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceModeResponse * soap_new__trt__SetVideoSourceModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceModeResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceModeResponse * soap_new_req__trt__SetVideoSourceModeResponse(
	struct soap *soap,
	bool Reboot)
{
	_trt__SetVideoSourceModeResponse *_p = ::soap_new__trt__SetVideoSourceModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceModeResponse::Reboot = Reboot;
	}
	return _p;
}

inline _trt__SetVideoSourceModeResponse * soap_new_set__trt__SetVideoSourceModeResponse(
	struct soap *soap,
	bool Reboot)
{
	_trt__SetVideoSourceModeResponse *_p = ::soap_new__trt__SetVideoSourceModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceModeResponse::Reboot = Reboot;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceModeResponse(struct soap *soap, _trt__SetVideoSourceModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceModeResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoSourceModeResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceModeResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoSourceModeResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceModeResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoSourceModeResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceModeResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceModeResponse * SOAP_FMAC4 soap_get__trt__SetVideoSourceModeResponse(struct soap*, _trt__SetVideoSourceModeResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceModeResponse(struct soap *soap, _trt__SetVideoSourceModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoSourceModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoSourceModeResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoSourceModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoSourceModeResponse(struct soap *soap, _trt__SetVideoSourceModeResponse *p)
{
	if (::soap_read__trt__SetVideoSourceModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceMode(struct soap*, const char*, int, const _trt__SetVideoSourceMode *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceMode * SOAP_FMAC4 soap_in__trt__SetVideoSourceMode(struct soap*, const char*, _trt__SetVideoSourceMode *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceMode * soap_new__trt__SetVideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceMode * soap_new_req__trt__SetVideoSourceMode(
	struct soap *soap,
	const std::string& VideoSourceToken,
	const std::string& VideoSourceModeToken)
{
	_trt__SetVideoSourceMode *_p = ::soap_new__trt__SetVideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceMode::VideoSourceToken = VideoSourceToken;
		_p->_trt__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken;
	}
	return _p;
}

inline _trt__SetVideoSourceMode * soap_new_set__trt__SetVideoSourceMode(
	struct soap *soap,
	const std::string& VideoSourceToken,
	const std::string& VideoSourceModeToken)
{
	_trt__SetVideoSourceMode *_p = ::soap_new__trt__SetVideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceMode::VideoSourceToken = VideoSourceToken;
		_p->_trt__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceMode", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoSourceMode(struct soap *soap, const char *URL, _trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceMode", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoSourceMode(struct soap *soap, const char *URL, _trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceMode", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoSourceMode(struct soap *soap, const char *URL, _trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceMode", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceMode * SOAP_FMAC4 soap_get__trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoSourceMode(struct soap *soap, const char *URL, _trt__SetVideoSourceMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode *p)
{
	if (::soap_read__trt__SetVideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceModesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceModesResponse(struct soap*, const char*, int, const _trt__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModesResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceModesResponse(struct soap*, const char*, _trt__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceModesResponse * soap_new__trt__GetVideoSourceModesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceModesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceModesResponse * soap_new_req__trt__GetVideoSourceModesResponse(
	struct soap *soap,
	const std::vector<trt__VideoSourceMode *> & VideoSourceModes)
{
	_trt__GetVideoSourceModesResponse *_p = ::soap_new__trt__GetVideoSourceModesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes;
	}
	return _p;
}

inline _trt__GetVideoSourceModesResponse * soap_new_set__trt__GetVideoSourceModesResponse(
	struct soap *soap,
	const std::vector<trt__VideoSourceMode *> & VideoSourceModes)
{
	_trt__GetVideoSourceModesResponse *_p = ::soap_new__trt__GetVideoSourceModesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceModesResponse(struct soap *soap, _trt__GetVideoSourceModesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceModesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceModesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceModesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceModesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceModesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceModesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceModesResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceModesResponse(struct soap*, _trt__GetVideoSourceModesResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceModesResponse(struct soap *soap, _trt__GetVideoSourceModesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceModesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceModesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceModesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceModesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceModesResponse(struct soap *soap, _trt__GetVideoSourceModesResponse *p)
{
	if (::soap_read__trt__GetVideoSourceModesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceModes(struct soap*, const char*, int, const _trt__GetVideoSourceModes *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModes * SOAP_FMAC4 soap_in__trt__GetVideoSourceModes(struct soap*, const char*, _trt__GetVideoSourceModes *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceModes * soap_new__trt__GetVideoSourceModes(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceModes(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceModes * soap_new_req__trt__GetVideoSourceModes(
	struct soap *soap,
	const std::string& VideoSourceToken)
{
	_trt__GetVideoSourceModes *_p = ::soap_new__trt__GetVideoSourceModes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModes::VideoSourceToken = VideoSourceToken;
	}
	return _p;
}

inline _trt__GetVideoSourceModes * soap_new_set__trt__GetVideoSourceModes(
	struct soap *soap,
	const std::string& VideoSourceToken)
{
	_trt__GetVideoSourceModes *_p = ::soap_new__trt__GetVideoSourceModes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceModes::VideoSourceToken = VideoSourceToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModes", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceModes(struct soap *soap, const char *URL, _trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModes", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceModes(struct soap *soap, const char *URL, _trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModes", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceModes(struct soap *soap, const char *URL, _trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceModes", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceModes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceModes * SOAP_FMAC4 soap_get__trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceModes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceModes(struct soap *soap, const char *URL, _trt__GetVideoSourceModes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes *p)
{
	if (::soap_read__trt__GetVideoSourceModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse_DEFINED
#define SOAP_TYPE__trt__GetSnapshotUriResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetSnapshotUriResponse(struct soap*, const char*, int, const _trt__GetSnapshotUriResponse *, const char*);
SOAP_FMAC3 _trt__GetSnapshotUriResponse * SOAP_FMAC4 soap_in__trt__GetSnapshotUriResponse(struct soap*, const char*, _trt__GetSnapshotUriResponse *, const char*);
SOAP_FMAC1 _trt__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetSnapshotUriResponse * soap_new__trt__GetSnapshotUriResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetSnapshotUriResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetSnapshotUriResponse * soap_new_req__trt__GetSnapshotUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetSnapshotUriResponse *_p = ::soap_new__trt__GetSnapshotUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline _trt__GetSnapshotUriResponse * soap_new_set__trt__GetSnapshotUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetSnapshotUriResponse *_p = ::soap_new__trt__GetSnapshotUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline int soap_write__trt__GetSnapshotUriResponse(struct soap *soap, _trt__GetSnapshotUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUriResponse", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUriResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetSnapshotUriResponse(struct soap *soap, const char *URL, _trt__GetSnapshotUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUriResponse", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUriResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetSnapshotUriResponse(struct soap *soap, const char *URL, _trt__GetSnapshotUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUriResponse", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUriResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetSnapshotUriResponse(struct soap *soap, const char *URL, _trt__GetSnapshotUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUriResponse", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUriResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetSnapshotUriResponse * SOAP_FMAC4 soap_get__trt__GetSnapshotUriResponse(struct soap*, _trt__GetSnapshotUriResponse *, const char*, const char*);

inline int soap_read__trt__GetSnapshotUriResponse(struct soap *soap, _trt__GetSnapshotUriResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetSnapshotUriResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetSnapshotUriResponse(struct soap *soap, const char *URL, _trt__GetSnapshotUriResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetSnapshotUriResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetSnapshotUriResponse(struct soap *soap, _trt__GetSnapshotUriResponse *p)
{
	if (::soap_read__trt__GetSnapshotUriResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE__trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetSnapshotUri(struct soap*, const char*, int, const _trt__GetSnapshotUri *, const char*);
SOAP_FMAC3 _trt__GetSnapshotUri * SOAP_FMAC4 soap_in__trt__GetSnapshotUri(struct soap*, const char*, _trt__GetSnapshotUri *, const char*);
SOAP_FMAC1 _trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetSnapshotUri * soap_new__trt__GetSnapshotUri(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetSnapshotUri(soap, n, NULL, NULL, NULL);
}

inline _trt__GetSnapshotUri * soap_new_req__trt__GetSnapshotUri(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetSnapshotUri *_p = ::soap_new__trt__GetSnapshotUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetSnapshotUri * soap_new_set__trt__GetSnapshotUri(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetSnapshotUri *_p = ::soap_new__trt__GetSnapshotUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetSnapshotUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUri", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUri ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetSnapshotUri(struct soap *soap, const char *URL, _trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUri", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetSnapshotUri(struct soap *soap, const char *URL, _trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUri", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetSnapshotUri(struct soap *soap, const char *URL, _trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetSnapshotUri", p->soap_type() == SOAP_TYPE__trt__GetSnapshotUri ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetSnapshotUri * SOAP_FMAC4 soap_get__trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *, const char*, const char*);

inline int soap_read__trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetSnapshotUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetSnapshotUri(struct soap *soap, const char *URL, _trt__GetSnapshotUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetSnapshotUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri *p)
{
	if (::soap_read__trt__GetSnapshotUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse_DEFINED
#define SOAP_TYPE__trt__SetSynchronizationPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetSynchronizationPointResponse(struct soap*, const char*, int, const _trt__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__trt__SetSynchronizationPointResponse(struct soap*, const char*, _trt__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC1 _trt__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetSynchronizationPointResponse * soap_new__trt__SetSynchronizationPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetSynchronizationPointResponse * soap_new_req__trt__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_trt__SetSynchronizationPointResponse *_p = ::soap_new__trt__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetSynchronizationPointResponse * soap_new_set__trt__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_trt__SetSynchronizationPointResponse *_p = ::soap_new__trt__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetSynchronizationPointResponse(struct soap *soap, _trt__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _trt__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _trt__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _trt__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__trt__SetSynchronizationPointResponse(struct soap*, _trt__SetSynchronizationPointResponse *, const char*, const char*);

inline int soap_read__trt__SetSynchronizationPointResponse(struct soap *soap, _trt__SetSynchronizationPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetSynchronizationPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _trt__SetSynchronizationPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetSynchronizationPointResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetSynchronizationPointResponse(struct soap *soap, _trt__SetSynchronizationPointResponse *p)
{
	if (::soap_read__trt__SetSynchronizationPointResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE__trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetSynchronizationPoint(struct soap*, const char*, int, const _trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPoint * SOAP_FMAC4 soap_in__trt__SetSynchronizationPoint(struct soap*, const char*, _trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 _trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetSynchronizationPoint * soap_new__trt__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline _trt__SetSynchronizationPoint * soap_new_req__trt__SetSynchronizationPoint(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__SetSynchronizationPoint *_p = ::soap_new__trt__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetSynchronizationPoint::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__SetSynchronizationPoint * soap_new_set__trt__SetSynchronizationPoint(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__SetSynchronizationPoint *_p = ::soap_new__trt__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetSynchronizationPoint::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetSynchronizationPoint(struct soap *soap, const char *URL, _trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetSynchronizationPoint(struct soap *soap, const char *URL, _trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetSynchronizationPoint(struct soap *soap, const char *URL, _trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__trt__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetSynchronizationPoint * SOAP_FMAC4 soap_get__trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read__trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetSynchronizationPoint(struct soap *soap, const char *URL, _trt__SetSynchronizationPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetSynchronizationPoint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint *p)
{
	if (::soap_read__trt__SetSynchronizationPoint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse_DEFINED
#define SOAP_TYPE__trt__StopMulticastStreamingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StopMulticastStreamingResponse(struct soap*, const char*, int, const _trt__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _trt__StopMulticastStreamingResponse * SOAP_FMAC4 soap_in__trt__StopMulticastStreamingResponse(struct soap*, const char*, _trt__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC1 _trt__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StopMulticastStreamingResponse * soap_new__trt__StopMulticastStreamingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StopMulticastStreamingResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__StopMulticastStreamingResponse * soap_new_req__trt__StopMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StopMulticastStreamingResponse *_p = ::soap_new__trt__StopMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__StopMulticastStreamingResponse * soap_new_set__trt__StopMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StopMulticastStreamingResponse *_p = ::soap_new__trt__StopMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__StopMulticastStreamingResponse(struct soap *soap, _trt__StopMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__StopMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StopMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__StopMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StopMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__StopMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StopMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StopMulticastStreamingResponse * SOAP_FMAC4 soap_get__trt__StopMulticastStreamingResponse(struct soap*, _trt__StopMulticastStreamingResponse *, const char*, const char*);

inline int soap_read__trt__StopMulticastStreamingResponse(struct soap *soap, _trt__StopMulticastStreamingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__StopMulticastStreamingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__StopMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StopMulticastStreamingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__StopMulticastStreamingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__StopMulticastStreamingResponse(struct soap *soap, _trt__StopMulticastStreamingResponse *p)
{
	if (::soap_read__trt__StopMulticastStreamingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE__trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StopMulticastStreaming(struct soap*, const char*, int, const _trt__StopMulticastStreaming *, const char*);
SOAP_FMAC3 _trt__StopMulticastStreaming * SOAP_FMAC4 soap_in__trt__StopMulticastStreaming(struct soap*, const char*, _trt__StopMulticastStreaming *, const char*);
SOAP_FMAC1 _trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StopMulticastStreaming * soap_new__trt__StopMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StopMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline _trt__StopMulticastStreaming * soap_new_req__trt__StopMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StopMulticastStreaming *_p = ::soap_new__trt__StopMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StopMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__StopMulticastStreaming * soap_new_set__trt__StopMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StopMulticastStreaming *_p = ::soap_new__trt__StopMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StopMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreaming ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__StopMulticastStreaming(struct soap *soap, const char *URL, _trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreaming ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__StopMulticastStreaming(struct soap *soap, const char *URL, _trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreaming ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__StopMulticastStreaming(struct soap *soap, const char *URL, _trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StopMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StopMulticastStreaming ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StopMulticastStreaming * SOAP_FMAC4 soap_get__trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_read__trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__StopMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__StopMulticastStreaming(struct soap *soap, const char *URL, _trt__StopMulticastStreaming *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__StopMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming *p)
{
	if (::soap_read__trt__StopMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse_DEFINED
#define SOAP_TYPE__trt__StartMulticastStreamingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StartMulticastStreamingResponse(struct soap*, const char*, int, const _trt__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC3 _trt__StartMulticastStreamingResponse * SOAP_FMAC4 soap_in__trt__StartMulticastStreamingResponse(struct soap*, const char*, _trt__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC1 _trt__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StartMulticastStreamingResponse * soap_new__trt__StartMulticastStreamingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StartMulticastStreamingResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__StartMulticastStreamingResponse * soap_new_req__trt__StartMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StartMulticastStreamingResponse *_p = ::soap_new__trt__StartMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__StartMulticastStreamingResponse * soap_new_set__trt__StartMulticastStreamingResponse(
	struct soap *soap)
{
	_trt__StartMulticastStreamingResponse *_p = ::soap_new__trt__StartMulticastStreamingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__StartMulticastStreamingResponse(struct soap *soap, _trt__StartMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__StartMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StartMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__StartMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StartMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__StartMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StartMulticastStreamingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreamingResponse", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreamingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StartMulticastStreamingResponse * SOAP_FMAC4 soap_get__trt__StartMulticastStreamingResponse(struct soap*, _trt__StartMulticastStreamingResponse *, const char*, const char*);

inline int soap_read__trt__StartMulticastStreamingResponse(struct soap *soap, _trt__StartMulticastStreamingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__StartMulticastStreamingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__StartMulticastStreamingResponse(struct soap *soap, const char *URL, _trt__StartMulticastStreamingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__StartMulticastStreamingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__StartMulticastStreamingResponse(struct soap *soap, _trt__StartMulticastStreamingResponse *p)
{
	if (::soap_read__trt__StartMulticastStreamingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE__trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__StartMulticastStreaming(struct soap*, const char*, int, const _trt__StartMulticastStreaming *, const char*);
SOAP_FMAC3 _trt__StartMulticastStreaming * SOAP_FMAC4 soap_in__trt__StartMulticastStreaming(struct soap*, const char*, _trt__StartMulticastStreaming *, const char*);
SOAP_FMAC1 _trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline _trt__StartMulticastStreaming * soap_new__trt__StartMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__StartMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline _trt__StartMulticastStreaming * soap_new_req__trt__StartMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StartMulticastStreaming *_p = ::soap_new__trt__StartMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StartMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__StartMulticastStreaming * soap_new_set__trt__StartMulticastStreaming(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__StartMulticastStreaming *_p = ::soap_new__trt__StartMulticastStreaming(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__StartMulticastStreaming::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreaming ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__StartMulticastStreaming(struct soap *soap, const char *URL, _trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreaming ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__StartMulticastStreaming(struct soap *soap, const char *URL, _trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreaming ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__StartMulticastStreaming(struct soap *soap, const char *URL, _trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StartMulticastStreaming", p->soap_type() == SOAP_TYPE__trt__StartMulticastStreaming ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__StartMulticastStreaming * SOAP_FMAC4 soap_get__trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_read__trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__StartMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__StartMulticastStreaming(struct soap *soap, const char *URL, _trt__StartMulticastStreaming *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__StartMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming *p)
{
	if (::soap_read__trt__StartMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse_DEFINED
#define SOAP_TYPE__trt__GetStreamUriResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetStreamUriResponse(struct soap*, const char*, int, const _trt__GetStreamUriResponse *, const char*);
SOAP_FMAC3 _trt__GetStreamUriResponse * SOAP_FMAC4 soap_in__trt__GetStreamUriResponse(struct soap*, const char*, _trt__GetStreamUriResponse *, const char*);
SOAP_FMAC1 _trt__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetStreamUriResponse * soap_new__trt__GetStreamUriResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetStreamUriResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetStreamUriResponse * soap_new_req__trt__GetStreamUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetStreamUriResponse *_p = ::soap_new__trt__GetStreamUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline _trt__GetStreamUriResponse * soap_new_set__trt__GetStreamUriResponse(
	struct soap *soap,
	tt__MediaUri *MediaUri)
{
	_trt__GetStreamUriResponse *_p = ::soap_new__trt__GetStreamUriResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUriResponse::MediaUri = MediaUri;
	}
	return _p;
}

inline int soap_write__trt__GetStreamUriResponse(struct soap *soap, _trt__GetStreamUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUriResponse", p->soap_type() == SOAP_TYPE__trt__GetStreamUriResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetStreamUriResponse(struct soap *soap, const char *URL, _trt__GetStreamUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUriResponse", p->soap_type() == SOAP_TYPE__trt__GetStreamUriResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetStreamUriResponse(struct soap *soap, const char *URL, _trt__GetStreamUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUriResponse", p->soap_type() == SOAP_TYPE__trt__GetStreamUriResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetStreamUriResponse(struct soap *soap, const char *URL, _trt__GetStreamUriResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUriResponse", p->soap_type() == SOAP_TYPE__trt__GetStreamUriResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetStreamUriResponse * SOAP_FMAC4 soap_get__trt__GetStreamUriResponse(struct soap*, _trt__GetStreamUriResponse *, const char*, const char*);

inline int soap_read__trt__GetStreamUriResponse(struct soap *soap, _trt__GetStreamUriResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetStreamUriResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetStreamUriResponse(struct soap *soap, const char *URL, _trt__GetStreamUriResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetStreamUriResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetStreamUriResponse(struct soap *soap, _trt__GetStreamUriResponse *p)
{
	if (::soap_read__trt__GetStreamUriResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri_DEFINED
#define SOAP_TYPE__trt__GetStreamUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetStreamUri(struct soap*, const char*, int, const _trt__GetStreamUri *, const char*);
SOAP_FMAC3 _trt__GetStreamUri * SOAP_FMAC4 soap_in__trt__GetStreamUri(struct soap*, const char*, _trt__GetStreamUri *, const char*);
SOAP_FMAC1 _trt__GetStreamUri * SOAP_FMAC2 soap_instantiate__trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetStreamUri * soap_new__trt__GetStreamUri(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetStreamUri(soap, n, NULL, NULL, NULL);
}

inline _trt__GetStreamUri * soap_new_req__trt__GetStreamUri(
	struct soap *soap,
	tt__StreamSetup *StreamSetup,
	const std::string& ProfileToken)
{
	_trt__GetStreamUri *_p = ::soap_new__trt__GetStreamUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUri::StreamSetup = StreamSetup;
		_p->_trt__GetStreamUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetStreamUri * soap_new_set__trt__GetStreamUri(
	struct soap *soap,
	tt__StreamSetup *StreamSetup,
	const std::string& ProfileToken)
{
	_trt__GetStreamUri *_p = ::soap_new__trt__GetStreamUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetStreamUri::StreamSetup = StreamSetup;
		_p->_trt__GetStreamUri::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUri", p->soap_type() == SOAP_TYPE__trt__GetStreamUri ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetStreamUri(struct soap *soap, const char *URL, _trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUri", p->soap_type() == SOAP_TYPE__trt__GetStreamUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetStreamUri(struct soap *soap, const char *URL, _trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUri", p->soap_type() == SOAP_TYPE__trt__GetStreamUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetStreamUri(struct soap *soap, const char *URL, _trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetStreamUri", p->soap_type() == SOAP_TYPE__trt__GetStreamUri ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetStreamUri * SOAP_FMAC4 soap_get__trt__GetStreamUri(struct soap*, _trt__GetStreamUri *, const char*, const char*);

inline int soap_read__trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetStreamUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetStreamUri(struct soap *soap, const char *URL, _trt__GetStreamUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetStreamUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri *p)
{
	if (::soap_read__trt__GetStreamUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse_DEFINED
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, int, const _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_in__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_req__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(
	struct soap *soap,
	int TotalNumber)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = ::soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber;
	}
	return _p;
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * soap_new_set__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(
	struct soap *soap,
	int TotalNumber,
	int *JPEG,
	int *H264,
	int *MPEG4)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *_p = ::soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::TotalNumber = TotalNumber;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::JPEG = JPEG;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::H264 = H264;
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::MPEG4 = MPEG4;
	}
	return _p;
}

inline int soap_write__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC4 soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *, const char*, const char*);

inline int soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *p)
{
	if (::soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL);
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req__trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = ::soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set__trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = ::soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetGuaranteedNumberOfVideoEncoderInstances::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstances", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstances", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstances", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetGuaranteedNumberOfVideoEncoderInstances", p->soap_type() == SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, _trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (::soap_read__trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new_req__trt__GetAudioDecoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioDecoderConfigurationOptions *Options)
{
	_trt__GetAudioDecoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationOptionsResponse * soap_new_set__trt__GetAudioDecoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioDecoderConfigurationOptions *Options)
{
	_trt__GetAudioDecoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, _trt__GetAudioDecoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetAudioDecoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationOptions * soap_new__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationOptions * soap_new_req__trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurationOptions *_p = ::soap_new__trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationOptions * soap_new_set__trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioDecoderConfigurationOptions *_p = ::soap_new__trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioDecoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions *p)
{
	if (::soap_read__trt__GetAudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new_req__trt__GetAudioOutputConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioOutputConfigurationOptions *Options)
{
	_trt__GetAudioOutputConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationOptionsResponse * soap_new_set__trt__GetAudioOutputConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioOutputConfigurationOptions *Options)
{
	_trt__GetAudioOutputConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, _trt__GetAudioOutputConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetAudioOutputConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationOptions * soap_new__trt__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationOptions * soap_new_req__trt__GetAudioOutputConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurationOptions *_p = ::soap_new__trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationOptions * soap_new_set__trt__GetAudioOutputConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioOutputConfigurationOptions *_p = ::soap_new__trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioOutputConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions *p)
{
	if (::soap_read__trt__GetAudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, _trt__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new_req__trt__GetMetadataConfigurationOptionsResponse(
	struct soap *soap,
	tt__MetadataConfigurationOptions *Options)
{
	_trt__GetMetadataConfigurationOptionsResponse *_p = ::soap_new__trt__GetMetadataConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetMetadataConfigurationOptionsResponse * soap_new_set__trt__GetMetadataConfigurationOptionsResponse(
	struct soap *soap,
	tt__MetadataConfigurationOptions *Options)
{
	_trt__GetMetadataConfigurationOptionsResponse *_p = ::soap_new__trt__GetMetadataConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, _trt__GetMetadataConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationOptionsResponse(struct soap*, _trt__GetMetadataConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, _trt__GetMetadataConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfigurationOptionsResponse(struct soap *soap, _trt__GetMetadataConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetMetadataConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationOptions(struct soap*, const char*, int, const _trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationOptions(struct soap*, const char*, _trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationOptions * soap_new__trt__GetMetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationOptions * soap_new_req__trt__GetMetadataConfigurationOptions(
	struct soap *soap)
{
	_trt__GetMetadataConfigurationOptions *_p = ::soap_new__trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurationOptions * soap_new_set__trt__GetMetadataConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetMetadataConfigurationOptions *_p = ::soap_new__trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetMetadataConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions *p)
{
	if (::soap_read__trt__GetMetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new_req__trt__GetAudioEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioEncoderConfigurationOptions *Options)
{
	_trt__GetAudioEncoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationOptionsResponse * soap_new_set__trt__GetAudioEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioEncoderConfigurationOptions *Options)
{
	_trt__GetAudioEncoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, _trt__GetAudioEncoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetAudioEncoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationOptions * soap_new__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationOptions * soap_new_req__trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurationOptions *_p = ::soap_new__trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationOptions * soap_new_set__trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioEncoderConfigurationOptions *_p = ::soap_new__trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioEncoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions *p)
{
	if (::soap_read__trt__GetAudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new_req__trt__GetAudioSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioSourceConfigurationOptions *Options)
{
	_trt__GetAudioSourceConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationOptionsResponse * soap_new_set__trt__GetAudioSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__AudioSourceConfigurationOptions *Options)
{
	_trt__GetAudioSourceConfigurationOptionsResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, _trt__GetAudioSourceConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetAudioSourceConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationOptions * soap_new__trt__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationOptions * soap_new_req__trt__GetAudioSourceConfigurationOptions(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurationOptions *_p = ::soap_new__trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationOptions * soap_new_set__trt__GetAudioSourceConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetAudioSourceConfigurationOptions *_p = ::soap_new__trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetAudioSourceConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions *p)
{
	if (::soap_read__trt__GetAudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new_req__trt__GetVideoEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoEncoderConfigurationOptions *Options)
{
	_trt__GetVideoEncoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationOptionsResponse * soap_new_set__trt__GetVideoEncoderConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoEncoderConfigurationOptions *Options)
{
	_trt__GetVideoEncoderConfigurationOptionsResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, _trt__GetVideoEncoderConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetVideoEncoderConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationOptions * soap_new__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationOptions * soap_new_req__trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurationOptions *_p = ::soap_new__trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationOptions * soap_new_set__trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetVideoEncoderConfigurationOptions *_p = ::soap_new__trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetVideoEncoderConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions *p)
{
	if (::soap_read__trt__GetVideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new_req__trt__GetVideoSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoSourceConfigurationOptions *Options)
{
	_trt__GetVideoSourceConfigurationOptionsResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationOptionsResponse * soap_new_set__trt__GetVideoSourceConfigurationOptionsResponse(
	struct soap *soap,
	tt__VideoSourceConfigurationOptions *Options)
{
	_trt__GetVideoSourceConfigurationOptionsResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, _trt__GetVideoSourceConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationOptionsResponse *p)
{
	if (::soap_read__trt__GetVideoSourceConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationOptions * soap_new__trt__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationOptions * soap_new_req__trt__GetVideoSourceConfigurationOptions(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurationOptions *_p = ::soap_new__trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationOptions * soap_new_set__trt__GetVideoSourceConfigurationOptions(
	struct soap *soap,
	std::string *ConfigurationToken,
	std::string *ProfileToken)
{
	_trt__GetVideoSourceConfigurationOptions *_p = ::soap_new__trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationOptions::ConfigurationToken = ConfigurationToken;
		_p->_trt__GetVideoSourceConfigurationOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions *p)
{
	if (::soap_read__trt__GetVideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioDecoderConfigurationResponse * soap_new__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioDecoderConfigurationResponse * soap_new_req__trt__SetAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioDecoderConfigurationResponse *_p = ::soap_new__trt__SetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioDecoderConfigurationResponse * soap_new_set__trt__SetAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioDecoderConfigurationResponse *_p = ::soap_new__trt__SetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, _trt__SetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioDecoderConfigurationResponse(struct soap*, _trt__SetAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, _trt__SetAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioDecoderConfigurationResponse(struct soap *soap, _trt__SetAudioDecoderConfigurationResponse *p)
{
	if (::soap_read__trt__SetAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioDecoderConfiguration(struct soap*, const char*, _trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioDecoderConfiguration * soap_new__trt__SetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioDecoderConfiguration * soap_new_req__trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioDecoderConfiguration *_p = ::soap_new__trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioDecoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioDecoderConfiguration * soap_new_set__trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioDecoderConfiguration *_p = ::soap_new__trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioDecoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioDecoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration *p)
{
	if (::soap_read__trt__SetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioOutputConfigurationResponse(struct soap*, const char*, _trt__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioOutputConfigurationResponse * soap_new__trt__SetAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioOutputConfigurationResponse * soap_new_req__trt__SetAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioOutputConfigurationResponse *_p = ::soap_new__trt__SetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioOutputConfigurationResponse * soap_new_set__trt__SetAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioOutputConfigurationResponse *_p = ::soap_new__trt__SetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioOutputConfigurationResponse(struct soap *soap, _trt__SetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioOutputConfigurationResponse(struct soap*, _trt__SetAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioOutputConfigurationResponse(struct soap *soap, _trt__SetAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioOutputConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioOutputConfigurationResponse(struct soap *soap, _trt__SetAudioOutputConfigurationResponse *p)
{
	if (::soap_read__trt__SetAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioOutputConfiguration(struct soap*, const char*, int, const _trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioOutputConfiguration(struct soap*, const char*, _trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioOutputConfiguration * soap_new__trt__SetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioOutputConfiguration * soap_new_req__trt__SetAudioOutputConfiguration(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioOutputConfiguration *_p = ::soap_new__trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioOutputConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioOutputConfiguration * soap_new_set__trt__SetAudioOutputConfiguration(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioOutputConfiguration *_p = ::soap_new__trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioOutputConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioOutputConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__SetAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration *p)
{
	if (::soap_read__trt__SetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetMetadataConfigurationResponse(struct soap*, const char*, _trt__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetMetadataConfigurationResponse * soap_new__trt__SetMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetMetadataConfigurationResponse * soap_new_req__trt__SetMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__SetMetadataConfigurationResponse *_p = ::soap_new__trt__SetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetMetadataConfigurationResponse * soap_new_set__trt__SetMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__SetMetadataConfigurationResponse *_p = ::soap_new__trt__SetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetMetadataConfigurationResponse(struct soap *soap, _trt__SetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__SetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__SetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__SetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetMetadataConfigurationResponse(struct soap*, _trt__SetMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetMetadataConfigurationResponse(struct soap *soap, _trt__SetMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__SetMetadataConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetMetadataConfigurationResponse(struct soap *soap, _trt__SetMetadataConfigurationResponse *p)
{
	if (::soap_read__trt__SetMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetMetadataConfiguration(struct soap*, const char*, int, const _trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__SetMetadataConfiguration * SOAP_FMAC4 soap_in__trt__SetMetadataConfiguration(struct soap*, const char*, _trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetMetadataConfiguration * soap_new__trt__SetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetMetadataConfiguration * soap_new_req__trt__SetMetadataConfiguration(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetMetadataConfiguration *_p = ::soap_new__trt__SetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetMetadataConfiguration::Configuration = Configuration;
		_p->_trt__SetMetadataConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetMetadataConfiguration * soap_new_set__trt__SetMetadataConfiguration(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetMetadataConfiguration *_p = ::soap_new__trt__SetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetMetadataConfiguration::Configuration = Configuration;
		_p->_trt__SetMetadataConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetMetadataConfiguration(struct soap *soap, const char *URL, _trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetMetadataConfiguration(struct soap *soap, const char *URL, _trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetMetadataConfiguration(struct soap *soap, const char *URL, _trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__SetMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetMetadataConfiguration * SOAP_FMAC4 soap_get__trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetMetadataConfiguration(struct soap *soap, const char *URL, _trt__SetMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration *p)
{
	if (::soap_read__trt__SetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__SetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new_req__trt__SetVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__SetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoAnalyticsConfigurationResponse * soap_new_set__trt__SetVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__SetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__SetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, _trt__SetVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__SetVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__SetVideoAnalyticsConfigurationResponse *p)
{
	if (::soap_read__trt__SetVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoAnalyticsConfiguration * soap_new__trt__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoAnalyticsConfiguration * soap_new_req__trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoAnalyticsConfiguration *_p = ::soap_new__trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoAnalyticsConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoAnalyticsConfiguration * soap_new_set__trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoAnalyticsConfiguration *_p = ::soap_new__trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoAnalyticsConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoAnalyticsConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__SetVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration *p)
{
	if (::soap_read__trt__SetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioSourceConfigurationResponse(struct soap*, const char*, _trt__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioSourceConfigurationResponse * soap_new__trt__SetAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioSourceConfigurationResponse * soap_new_req__trt__SetAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioSourceConfigurationResponse *_p = ::soap_new__trt__SetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioSourceConfigurationResponse * soap_new_set__trt__SetAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioSourceConfigurationResponse *_p = ::soap_new__trt__SetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioSourceConfigurationResponse(struct soap *soap, _trt__SetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioSourceConfigurationResponse(struct soap*, _trt__SetAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioSourceConfigurationResponse(struct soap *soap, _trt__SetAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioSourceConfigurationResponse(struct soap *soap, _trt__SetAudioSourceConfigurationResponse *p)
{
	if (::soap_read__trt__SetAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioSourceConfiguration(struct soap*, const char*, int, const _trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioSourceConfiguration(struct soap*, const char*, _trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioSourceConfiguration * soap_new__trt__SetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioSourceConfiguration * soap_new_req__trt__SetAudioSourceConfiguration(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioSourceConfiguration *_p = ::soap_new__trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioSourceConfiguration * soap_new_set__trt__SetAudioSourceConfiguration(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioSourceConfiguration *_p = ::soap_new__trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__SetAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration *p)
{
	if (::soap_read__trt__SetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioEncoderConfigurationResponse * soap_new__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioEncoderConfigurationResponse * soap_new_req__trt__SetAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioEncoderConfigurationResponse *_p = ::soap_new__trt__SetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetAudioEncoderConfigurationResponse * soap_new_set__trt__SetAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetAudioEncoderConfigurationResponse *_p = ::soap_new__trt__SetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, _trt__SetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetAudioEncoderConfigurationResponse(struct soap*, _trt__SetAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, _trt__SetAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioEncoderConfigurationResponse(struct soap *soap, _trt__SetAudioEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__SetAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__SetAudioEncoderConfiguration(struct soap*, const char*, _trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetAudioEncoderConfiguration * soap_new__trt__SetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetAudioEncoderConfiguration * soap_new_req__trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioEncoderConfiguration *_p = ::soap_new__trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetAudioEncoderConfiguration * soap_new_set__trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetAudioEncoderConfiguration *_p = ::soap_new__trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetAudioEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetAudioEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration *p)
{
	if (::soap_read__trt__SetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoSourceConfigurationResponse(struct soap*, const char*, _trt__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceConfigurationResponse * soap_new__trt__SetVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceConfigurationResponse * soap_new_req__trt__SetVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoSourceConfigurationResponse *_p = ::soap_new__trt__SetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoSourceConfigurationResponse * soap_new_set__trt__SetVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoSourceConfigurationResponse *_p = ::soap_new__trt__SetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceConfigurationResponse(struct soap *soap, _trt__SetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoSourceConfigurationResponse(struct soap*, _trt__SetVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceConfigurationResponse(struct soap *soap, _trt__SetVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoSourceConfigurationResponse(struct soap *soap, _trt__SetVideoSourceConfigurationResponse *p)
{
	if (::soap_read__trt__SetVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoSourceConfiguration(struct soap*, const char*, int, const _trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoSourceConfiguration(struct soap*, const char*, _trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoSourceConfiguration * soap_new__trt__SetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoSourceConfiguration * soap_new_req__trt__SetVideoSourceConfiguration(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoSourceConfiguration *_p = ::soap_new__trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoSourceConfiguration * soap_new_set__trt__SetVideoSourceConfiguration(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoSourceConfiguration *_p = ::soap_new__trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoSourceConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoSourceConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__SetVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration *p)
{
	if (::soap_read__trt__SetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__SetVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoEncoderConfigurationResponse * soap_new__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoEncoderConfigurationResponse * soap_new_req__trt__SetVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoEncoderConfigurationResponse *_p = ::soap_new__trt__SetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__SetVideoEncoderConfigurationResponse * soap_new_set__trt__SetVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__SetVideoEncoderConfigurationResponse *_p = ::soap_new__trt__SetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, _trt__SetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__SetVideoEncoderConfigurationResponse(struct soap*, _trt__SetVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, _trt__SetVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoEncoderConfigurationResponse(struct soap *soap, _trt__SetVideoEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__SetVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__SetVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__SetVideoEncoderConfiguration(struct soap*, const char*, _trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__SetVideoEncoderConfiguration * soap_new__trt__SetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__SetVideoEncoderConfiguration * soap_new_req__trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoEncoderConfiguration *_p = ::soap_new__trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _trt__SetVideoEncoderConfiguration * soap_new_set__trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration,
	bool ForcePersistence)
{
	_trt__SetVideoEncoderConfiguration *_p = ::soap_new__trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__SetVideoEncoderConfiguration::Configuration = Configuration;
		_p->_trt__SetVideoEncoderConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:SetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__SetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__SetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__SetVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__SetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration *p)
{
	if (::soap_read__trt__SetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioDecoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioDecoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioDecoderConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioDecoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioDecoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioDecoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioDecoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleAudioDecoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new_req__trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioDecoderConfigurations *_p = ::soap_new__trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioDecoderConfigurations * soap_new_set__trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioDecoderConfigurations *_p = ::soap_new__trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioDecoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioOutputConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioOutputConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioOutputConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioOutputConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutputConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioOutputConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioOutputConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleAudioOutputConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new_req__trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioOutputConfigurations *_p = ::soap_new__trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioOutputConfigurations * soap_new_set__trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioOutputConfigurations *_p = ::soap_new__trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioOutputConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new_req__trt__GetCompatibleMetadataConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleMetadataConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleMetadataConfigurationsResponse * soap_new_set__trt__GetCompatibleMetadataConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__MetadataConfiguration *> & Configurations)
{
	_trt__GetCompatibleMetadataConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _trt__GetCompatibleMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, _trt__GetCompatibleMetadataConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _trt__GetCompatibleMetadataConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleMetadataConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleMetadataConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleMetadataConfigurationsResponse(struct soap *soap, _trt__GetCompatibleMetadataConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleMetadataConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleMetadataConfigurations * soap_new__trt__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleMetadataConfigurations * soap_new_req__trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleMetadataConfigurations *_p = ::soap_new__trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleMetadataConfigurations * soap_new_set__trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleMetadataConfigurations *_p = ::soap_new__trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleMetadataConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleMetadataConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleMetadataConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoAnalyticsConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoAnalyticsConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_req__trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoAnalyticsConfigurations *_p = ::soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_set__trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoAnalyticsConfigurations *_p = ::soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoAnalyticsConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioSourceConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioSourceConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioSourceConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioSourceConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleAudioSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new_req__trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioSourceConfigurations *_p = ::soap_new__trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioSourceConfigurations * soap_new_set__trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioSourceConfigurations *_p = ::soap_new__trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_req__trt__GetCompatibleAudioEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleAudioEncoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleAudioEncoderConfigurationsResponse * soap_new_set__trt__GetCompatibleAudioEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleAudioEncoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, _trt__GetCompatibleAudioEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleAudioEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new_req__trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioEncoderConfigurations *_p = ::soap_new__trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleAudioEncoderConfigurations * soap_new_set__trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleAudioEncoderConfigurations *_p = ::soap_new__trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleAudioEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoSourceConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoSourceConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoSourceConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoSourceConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleVideoSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new_req__trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoSourceConfigurations *_p = ::soap_new__trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoSourceConfigurations * soap_new_set__trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoSourceConfigurations *_p = ::soap_new__trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoSourceConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_req__trt__GetCompatibleVideoEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetCompatibleVideoEncoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetCompatibleVideoEncoderConfigurationsResponse * soap_new_set__trt__GetCompatibleVideoEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoEncoderConfiguration *> & Configurations)
{
	_trt__GetCompatibleVideoEncoderConfigurationsResponse *_p = ::soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, _trt__GetCompatibleVideoEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetCompatibleVideoEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const _trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new_req__trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoEncoderConfigurations *_p = ::soap_new__trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetCompatibleVideoEncoderConfigurations * soap_new_set__trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetCompatibleVideoEncoderConfigurations *_p = ::soap_new__trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetCompatibleVideoEncoderConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetCompatibleVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetCompatibleVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetCompatibleVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (::soap_read__trt__GetCompatibleVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationResponse * soap_new__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationResponse * soap_new_req__trt__GetAudioDecoderConfigurationResponse(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration)
{
	_trt__GetAudioDecoderConfigurationResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationResponse * soap_new_set__trt__GetAudioDecoderConfigurationResponse(
	struct soap *soap,
	tt__AudioDecoderConfiguration *Configuration)
{
	_trt__GetAudioDecoderConfigurationResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationResponse(struct soap*, _trt__GetAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfigurationResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationResponse *p)
{
	if (::soap_read__trt__GetAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfiguration(struct soap*, const char*, _trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfiguration * soap_new__trt__GetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfiguration * soap_new_req__trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioDecoderConfiguration *_p = ::soap_new__trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioDecoderConfiguration * soap_new_set__trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioDecoderConfiguration *_p = ::soap_new__trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration *p)
{
	if (::soap_read__trt__GetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationResponse * soap_new__trt__GetAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationResponse * soap_new_req__trt__GetAudioOutputConfigurationResponse(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration)
{
	_trt__GetAudioOutputConfigurationResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationResponse * soap_new_set__trt__GetAudioOutputConfigurationResponse(
	struct soap *soap,
	tt__AudioOutputConfiguration *Configuration)
{
	_trt__GetAudioOutputConfigurationResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationResponse(struct soap *soap, _trt__GetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationResponse(struct soap*, _trt__GetAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationResponse(struct soap *soap, _trt__GetAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfigurationResponse(struct soap *soap, _trt__GetAudioOutputConfigurationResponse *p)
{
	if (::soap_read__trt__GetAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfiguration(struct soap*, const char*, int, const _trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfiguration(struct soap*, const char*, _trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfiguration * soap_new__trt__GetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfiguration * soap_new_req__trt__GetAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioOutputConfiguration *_p = ::soap_new__trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioOutputConfiguration * soap_new_set__trt__GetAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioOutputConfiguration *_p = ::soap_new__trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__GetAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration *p)
{
	if (::soap_read__trt__GetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationResponse(struct soap*, const char*, _trt__GetMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationResponse * soap_new__trt__GetMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationResponse * soap_new_req__trt__GetMetadataConfigurationResponse(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration)
{
	_trt__GetMetadataConfigurationResponse *_p = ::soap_new__trt__GetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetMetadataConfigurationResponse * soap_new_set__trt__GetMetadataConfigurationResponse(
	struct soap *soap,
	tt__MetadataConfiguration *Configuration)
{
	_trt__GetMetadataConfigurationResponse *_p = ::soap_new__trt__GetMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationResponse(struct soap *soap, _trt__GetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationResponse(struct soap*, _trt__GetMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationResponse(struct soap *soap, _trt__GetMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfigurationResponse(struct soap *soap, _trt__GetMetadataConfigurationResponse *p)
{
	if (::soap_read__trt__GetMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfiguration(struct soap*, const char*, int, const _trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfiguration * SOAP_FMAC4 soap_in__trt__GetMetadataConfiguration(struct soap*, const char*, _trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfiguration * soap_new__trt__GetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfiguration * soap_new_req__trt__GetMetadataConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetMetadataConfiguration *_p = ::soap_new__trt__GetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetMetadataConfiguration * soap_new_set__trt__GetMetadataConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetMetadataConfiguration *_p = ::soap_new__trt__GetMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfiguration(struct soap *soap, const char *URL, _trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfiguration(struct soap *soap, const char *URL, _trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfiguration(struct soap *soap, const char *URL, _trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfiguration * SOAP_FMAC4 soap_get__trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfiguration(struct soap *soap, const char *URL, _trt__GetMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration *p)
{
	if (::soap_read__trt__GetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new_req__trt__GetVideoAnalyticsConfigurationResponse(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration)
{
	_trt__GetVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__GetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurationResponse * soap_new_set__trt__GetVideoAnalyticsConfigurationResponse(
	struct soap *soap,
	tt__VideoAnalyticsConfiguration *Configuration)
{
	_trt__GetVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__GetVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, _trt__GetVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationResponse *p)
{
	if (::soap_read__trt__GetVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfiguration * soap_new__trt__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfiguration * soap_new_req__trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoAnalyticsConfiguration *_p = ::soap_new__trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfiguration * soap_new_set__trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoAnalyticsConfiguration *_p = ::soap_new__trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration *p)
{
	if (::soap_read__trt__GetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationResponse * soap_new__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationResponse * soap_new_req__trt__GetAudioEncoderConfigurationResponse(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration)
{
	_trt__GetAudioEncoderConfigurationResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationResponse * soap_new_set__trt__GetAudioEncoderConfigurationResponse(
	struct soap *soap,
	tt__AudioEncoderConfiguration *Configuration)
{
	_trt__GetAudioEncoderConfigurationResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationResponse(struct soap*, _trt__GetAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfigurationResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__GetAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfiguration(struct soap*, const char*, _trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfiguration * soap_new__trt__GetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfiguration * soap_new_req__trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioEncoderConfiguration *_p = ::soap_new__trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioEncoderConfiguration * soap_new_set__trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioEncoderConfiguration *_p = ::soap_new__trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration *p)
{
	if (::soap_read__trt__GetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationResponse * soap_new__trt__GetAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationResponse * soap_new_req__trt__GetAudioSourceConfigurationResponse(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration)
{
	_trt__GetAudioSourceConfigurationResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationResponse * soap_new_set__trt__GetAudioSourceConfigurationResponse(
	struct soap *soap,
	tt__AudioSourceConfiguration *Configuration)
{
	_trt__GetAudioSourceConfigurationResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationResponse(struct soap *soap, _trt__GetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationResponse(struct soap*, _trt__GetAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationResponse(struct soap *soap, _trt__GetAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfigurationResponse(struct soap *soap, _trt__GetAudioSourceConfigurationResponse *p)
{
	if (::soap_read__trt__GetAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfiguration(struct soap*, const char*, int, const _trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfiguration(struct soap*, const char*, _trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfiguration * soap_new__trt__GetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfiguration * soap_new_req__trt__GetAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioSourceConfiguration *_p = ::soap_new__trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetAudioSourceConfiguration * soap_new_set__trt__GetAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetAudioSourceConfiguration *_p = ::soap_new__trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__GetAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration *p)
{
	if (::soap_read__trt__GetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationResponse * soap_new__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationResponse * soap_new_req__trt__GetVideoEncoderConfigurationResponse(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration)
{
	_trt__GetVideoEncoderConfigurationResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationResponse * soap_new_set__trt__GetVideoEncoderConfigurationResponse(
	struct soap *soap,
	tt__VideoEncoderConfiguration *Configuration)
{
	_trt__GetVideoEncoderConfigurationResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationResponse(struct soap*, _trt__GetVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfigurationResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__GetVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfiguration(struct soap*, const char*, _trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfiguration * soap_new__trt__GetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfiguration * soap_new_req__trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoEncoderConfiguration *_p = ::soap_new__trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoEncoderConfiguration * soap_new_set__trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoEncoderConfiguration *_p = ::soap_new__trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration *p)
{
	if (::soap_read__trt__GetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationResponse * soap_new__trt__GetVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationResponse * soap_new_req__trt__GetVideoSourceConfigurationResponse(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration)
{
	_trt__GetVideoSourceConfigurationResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationResponse * soap_new_set__trt__GetVideoSourceConfigurationResponse(
	struct soap *soap,
	tt__VideoSourceConfiguration *Configuration)
{
	_trt__GetVideoSourceConfigurationResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationResponse::Configuration = Configuration;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationResponse(struct soap *soap, _trt__GetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationResponse(struct soap*, _trt__GetVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationResponse(struct soap *soap, _trt__GetVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfigurationResponse(struct soap *soap, _trt__GetVideoSourceConfigurationResponse *p)
{
	if (::soap_read__trt__GetVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfiguration(struct soap*, const char*, int, const _trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfiguration(struct soap*, const char*, _trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfiguration * soap_new__trt__GetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfiguration * soap_new_req__trt__GetVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoSourceConfiguration *_p = ::soap_new__trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__GetVideoSourceConfiguration * soap_new_set__trt__GetVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_trt__GetVideoSourceConfiguration *_p = ::soap_new__trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__GetVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration *p)
{
	if (::soap_read__trt__GetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, _trt__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new_req__trt__GetAudioDecoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurationsResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurationsResponse * soap_new_set__trt__GetAudioDecoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioDecoderConfiguration *> & Configurations)
{
	_trt__GetAudioDecoderConfigurationsResponse *_p = ::soap_new__trt__GetAudioDecoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioDecoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurationsResponse(struct soap*, _trt__GetAudioDecoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfigurationsResponse(struct soap *soap, _trt__GetAudioDecoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetAudioDecoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioDecoderConfigurations(struct soap*, const char*, int, const _trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioDecoderConfigurations(struct soap*, const char*, _trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioDecoderConfigurations * soap_new__trt__GetAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioDecoderConfigurations * soap_new_req__trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurations *_p = ::soap_new__trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioDecoderConfigurations * soap_new_set__trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioDecoderConfigurations *_p = ::soap_new__trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioDecoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioDecoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioDecoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations *p)
{
	if (::soap_read__trt__GetAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurationsResponse(struct soap*, const char*, _trt__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurationsResponse * soap_new__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurationsResponse * soap_new_req__trt__GetAudioOutputConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurationsResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurationsResponse * soap_new_set__trt__GetAudioOutputConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutputConfiguration *> & Configurations)
{
	_trt__GetAudioOutputConfigurationsResponse *_p = ::soap_new__trt__GetAudioOutputConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurationsResponse(struct soap*, _trt__GetAudioOutputConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfigurationsResponse(struct soap *soap, _trt__GetAudioOutputConfigurationsResponse *p)
{
	if (::soap_read__trt__GetAudioOutputConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputConfigurations(struct soap*, const char*, int, const _trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioOutputConfigurations(struct soap*, const char*, _trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputConfigurations * soap_new__trt__GetAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputConfigurations * soap_new_req__trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurations *_p = ::soap_new__trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputConfigurations * soap_new_set__trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	_trt__GetAudioOutputConfigurations *_p = ::soap_new__trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, _trt__GetAudioOutputConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations *p)
{
	if (::soap_read__trt__GetAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurationsResponse(struct soap*, const char*, int, const _trt__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurationsResponse(struct soap*, const char*, _trt__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurationsResponse * soap_new__trt__GetMetadataConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurationsResponse * soap_new_req__trt__GetMetadataConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetMetadataConfigurationsResponse *_p = ::soap_new__trt__GetMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurationsResponse * soap_new_set__trt__GetMetadataConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__MetadataConfiguration *> & Configurations)
{
	_trt__GetMetadataConfigurationsResponse *_p = ::soap_new__trt__GetMetadataConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetMetadataConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurationsResponse(struct soap *soap, _trt__GetMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurationsResponse(struct soap*, _trt__GetMetadataConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurationsResponse(struct soap *soap, _trt__GetMetadataConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetMetadataConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfigurationsResponse(struct soap *soap, _trt__GetMetadataConfigurationsResponse *p)
{
	if (::soap_read__trt__GetMetadataConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE__trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetMetadataConfigurations(struct soap*, const char*, int, const _trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurations * SOAP_FMAC4 soap_in__trt__GetMetadataConfigurations(struct soap*, const char*, _trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC1 _trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetMetadataConfigurations * soap_new__trt__GetMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetMetadataConfigurations * soap_new_req__trt__GetMetadataConfigurations(
	struct soap *soap)
{
	_trt__GetMetadataConfigurations *_p = ::soap_new__trt__GetMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetMetadataConfigurations * soap_new_set__trt__GetMetadataConfigurations(
	struct soap *soap)
{
	_trt__GetMetadataConfigurations *_p = ::soap_new__trt__GetMetadataConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetMetadataConfigurations", p->soap_type() == SOAP_TYPE__trt__GetMetadataConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetMetadataConfigurations * SOAP_FMAC4 soap_get__trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_read__trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetMetadataConfigurations(struct soap *soap, const char *URL, _trt__GetMetadataConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations *p)
{
	if (::soap_read__trt__GetMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new_req__trt__GetVideoAnalyticsConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurationsResponse *_p = ::soap_new__trt__GetVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurationsResponse * soap_new_set__trt__GetVideoAnalyticsConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoAnalyticsConfiguration *> & Configurations)
{
	_trt__GetVideoAnalyticsConfigurationsResponse *_p = ::soap_new__trt__GetVideoAnalyticsConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoAnalyticsConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, _trt__GetVideoAnalyticsConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoAnalyticsConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoAnalyticsConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoAnalyticsConfigurationsResponse(struct soap *soap, _trt__GetVideoAnalyticsConfigurationsResponse *p)
{
	if (::soap_read__trt__GetVideoAnalyticsConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const _trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoAnalyticsConfigurations * soap_new__trt__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoAnalyticsConfigurations * soap_new_req__trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurations *_p = ::soap_new__trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoAnalyticsConfigurations * soap_new_set__trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	_trt__GetVideoAnalyticsConfigurations *_p = ::soap_new__trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoAnalyticsConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoAnalyticsConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, _trt__GetVideoAnalyticsConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations *p)
{
	if (::soap_read__trt__GetVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurationsResponse(struct soap*, const char*, _trt__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurationsResponse * soap_new__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurationsResponse * soap_new_req__trt__GetAudioSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurationsResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurationsResponse * soap_new_set__trt__GetAudioSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioSourceConfiguration *> & Configurations)
{
	_trt__GetAudioSourceConfigurationsResponse *_p = ::soap_new__trt__GetAudioSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurationsResponse(struct soap*, _trt__GetAudioSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfigurationsResponse(struct soap *soap, _trt__GetAudioSourceConfigurationsResponse *p)
{
	if (::soap_read__trt__GetAudioSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourceConfigurations(struct soap*, const char*, int, const _trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioSourceConfigurations(struct soap*, const char*, _trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourceConfigurations * soap_new__trt__GetAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourceConfigurations * soap_new_req__trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurations *_p = ::soap_new__trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourceConfigurations * soap_new_set__trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	_trt__GetAudioSourceConfigurations *_p = ::soap_new__trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, _trt__GetAudioSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations *p)
{
	if (::soap_read__trt__GetAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new_req__trt__GetAudioEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurationsResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurationsResponse * soap_new_set__trt__GetAudioEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfiguration *> & Configurations)
{
	_trt__GetAudioEncoderConfigurationsResponse *_p = ::soap_new__trt__GetAudioEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurationsResponse(struct soap*, _trt__GetAudioEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfigurationsResponse(struct soap *soap, _trt__GetAudioEncoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetAudioEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioEncoderConfigurations(struct soap*, const char*, int, const _trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetAudioEncoderConfigurations(struct soap*, const char*, _trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioEncoderConfigurations * soap_new__trt__GetAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioEncoderConfigurations * soap_new_req__trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurations *_p = ::soap_new__trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioEncoderConfigurations * soap_new_set__trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetAudioEncoderConfigurations *_p = ::soap_new__trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetAudioEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetAudioEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations *p)
{
	if (::soap_read__trt__GetAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurationsResponse(struct soap*, const char*, _trt__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurationsResponse * soap_new__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurationsResponse * soap_new_req__trt__GetVideoSourceConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurationsResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurationsResponse * soap_new_set__trt__GetVideoSourceConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoSourceConfiguration *> & Configurations)
{
	_trt__GetVideoSourceConfigurationsResponse *_p = ::soap_new__trt__GetVideoSourceConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourceConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurationsResponse(struct soap*, _trt__GetVideoSourceConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfigurationsResponse(struct soap *soap, _trt__GetVideoSourceConfigurationsResponse *p)
{
	if (::soap_read__trt__GetVideoSourceConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourceConfigurations(struct soap*, const char*, int, const _trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoSourceConfigurations(struct soap*, const char*, _trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourceConfigurations * soap_new__trt__GetVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourceConfigurations * soap_new_req__trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurations *_p = ::soap_new__trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourceConfigurations * soap_new_set__trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	_trt__GetVideoSourceConfigurations *_p = ::soap_new__trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourceConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoSourceConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, _trt__GetVideoSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations *p)
{
	if (::soap_read__trt__GetVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, _trt__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new_req__trt__GetVideoEncoderConfigurationsResponse(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurationsResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurationsResponse * soap_new_set__trt__GetVideoEncoderConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__VideoEncoderConfiguration *> & Configurations)
{
	_trt__GetVideoEncoderConfigurationsResponse *_p = ::soap_new__trt__GetVideoEncoderConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoEncoderConfigurationsResponse::Configurations = Configurations;
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurationsResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurationsResponse(struct soap*, _trt__GetVideoEncoderConfigurationsResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfigurationsResponse(struct soap *soap, _trt__GetVideoEncoderConfigurationsResponse *p)
{
	if (::soap_read__trt__GetVideoEncoderConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoEncoderConfigurations(struct soap*, const char*, int, const _trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in__trt__GetVideoEncoderConfigurations(struct soap*, const char*, _trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 _trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoEncoderConfigurations * soap_new__trt__GetVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoEncoderConfigurations * soap_new_req__trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurations *_p = ::soap_new__trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoEncoderConfigurations * soap_new_set__trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	_trt__GetVideoEncoderConfigurations *_p = ::soap_new__trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoEncoderConfigurations", p->soap_type() == SOAP_TYPE__trt__GetVideoEncoderConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get__trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read__trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, _trt__GetVideoEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations *p)
{
	if (::soap_read__trt__GetVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse_DEFINED
#define SOAP_TYPE__trt__DeleteProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteProfileResponse(struct soap*, const char*, int, const _trt__DeleteProfileResponse *, const char*);
SOAP_FMAC3 _trt__DeleteProfileResponse * SOAP_FMAC4 soap_in__trt__DeleteProfileResponse(struct soap*, const char*, _trt__DeleteProfileResponse *, const char*);
SOAP_FMAC1 _trt__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteProfileResponse * soap_new__trt__DeleteProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteProfileResponse * soap_new_req__trt__DeleteProfileResponse(
	struct soap *soap)
{
	_trt__DeleteProfileResponse *_p = ::soap_new__trt__DeleteProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__DeleteProfileResponse * soap_new_set__trt__DeleteProfileResponse(
	struct soap *soap)
{
	_trt__DeleteProfileResponse *_p = ::soap_new__trt__DeleteProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__DeleteProfileResponse(struct soap *soap, _trt__DeleteProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfileResponse", p->soap_type() == SOAP_TYPE__trt__DeleteProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__DeleteProfileResponse(struct soap *soap, const char *URL, _trt__DeleteProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfileResponse", p->soap_type() == SOAP_TYPE__trt__DeleteProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__DeleteProfileResponse(struct soap *soap, const char *URL, _trt__DeleteProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfileResponse", p->soap_type() == SOAP_TYPE__trt__DeleteProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__DeleteProfileResponse(struct soap *soap, const char *URL, _trt__DeleteProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfileResponse", p->soap_type() == SOAP_TYPE__trt__DeleteProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteProfileResponse * SOAP_FMAC4 soap_get__trt__DeleteProfileResponse(struct soap*, _trt__DeleteProfileResponse *, const char*, const char*);

inline int soap_read__trt__DeleteProfileResponse(struct soap *soap, _trt__DeleteProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__DeleteProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__DeleteProfileResponse(struct soap *soap, const char *URL, _trt__DeleteProfileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__DeleteProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__DeleteProfileResponse(struct soap *soap, _trt__DeleteProfileResponse *p)
{
	if (::soap_read__trt__DeleteProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile_DEFINED
#define SOAP_TYPE__trt__DeleteProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__DeleteProfile(struct soap*, const char*, int, const _trt__DeleteProfile *, const char*);
SOAP_FMAC3 _trt__DeleteProfile * SOAP_FMAC4 soap_in__trt__DeleteProfile(struct soap*, const char*, _trt__DeleteProfile *, const char*);
SOAP_FMAC1 _trt__DeleteProfile * SOAP_FMAC2 soap_instantiate__trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__DeleteProfile * soap_new__trt__DeleteProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__DeleteProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__DeleteProfile * soap_new_req__trt__DeleteProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__DeleteProfile *_p = ::soap_new__trt__DeleteProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__DeleteProfile * soap_new_set__trt__DeleteProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__DeleteProfile *_p = ::soap_new__trt__DeleteProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__DeleteProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfile", p->soap_type() == SOAP_TYPE__trt__DeleteProfile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__DeleteProfile(struct soap *soap, const char *URL, _trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfile", p->soap_type() == SOAP_TYPE__trt__DeleteProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__DeleteProfile(struct soap *soap, const char *URL, _trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfile", p->soap_type() == SOAP_TYPE__trt__DeleteProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__DeleteProfile(struct soap *soap, const char *URL, _trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:DeleteProfile", p->soap_type() == SOAP_TYPE__trt__DeleteProfile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__DeleteProfile * SOAP_FMAC4 soap_get__trt__DeleteProfile(struct soap*, _trt__DeleteProfile *, const char*, const char*);

inline int soap_read__trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__DeleteProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__DeleteProfile(struct soap *soap, const char *URL, _trt__DeleteProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__DeleteProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile *p)
{
	if (::soap_read__trt__DeleteProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new_req__trt__RemoveAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioDecoderConfigurationResponse *_p = ::soap_new__trt__RemoveAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioDecoderConfigurationResponse * soap_new_set__trt__RemoveAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioDecoderConfigurationResponse *_p = ::soap_new__trt__RemoveAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, _trt__RemoveAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioDecoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioDecoderConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, _trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioDecoderConfiguration * soap_new__trt__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioDecoderConfiguration * soap_new_req__trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioDecoderConfiguration *_p = ::soap_new__trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioDecoderConfiguration * soap_new_set__trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioDecoderConfiguration *_p = ::soap_new__trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioDecoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration *p)
{
	if (::soap_read__trt__RemoveAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioDecoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioDecoderConfigurationResponse(struct soap*, const char*, _trt__AddAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioDecoderConfigurationResponse * soap_new__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioDecoderConfigurationResponse * soap_new_req__trt__AddAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioDecoderConfigurationResponse *_p = ::soap_new__trt__AddAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioDecoderConfigurationResponse * soap_new_set__trt__AddAudioDecoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioDecoderConfigurationResponse *_p = ::soap_new__trt__AddAudioDecoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, _trt__AddAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioDecoderConfigurationResponse(struct soap*, _trt__AddAudioDecoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, _trt__AddAudioDecoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioDecoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioDecoderConfigurationResponse(struct soap *soap, _trt__AddAudioDecoderConfigurationResponse *p)
{
	if (::soap_read__trt__AddAudioDecoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioDecoderConfiguration(struct soap*, const char*, int, const _trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioDecoderConfiguration(struct soap*, const char*, _trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioDecoderConfiguration * soap_new__trt__AddAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioDecoderConfiguration * soap_new_req__trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioDecoderConfiguration *_p = ::soap_new__trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioDecoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioDecoderConfiguration * soap_new_set__trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioDecoderConfiguration *_p = ::soap_new__trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioDecoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioDecoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioDecoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration *p)
{
	if (::soap_read__trt__AddAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioOutputConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new_req__trt__RemoveAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioOutputConfigurationResponse *_p = ::soap_new__trt__RemoveAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioOutputConfigurationResponse * soap_new_set__trt__RemoveAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioOutputConfigurationResponse *_p = ::soap_new__trt__RemoveAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, _trt__RemoveAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioOutputConfigurationResponse(struct soap*, _trt__RemoveAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, _trt__RemoveAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioOutputConfigurationResponse(struct soap *soap, _trt__RemoveAudioOutputConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioOutputConfiguration(struct soap*, const char*, _trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioOutputConfiguration * soap_new__trt__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioOutputConfiguration * soap_new_req__trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioOutputConfiguration *_p = ::soap_new__trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioOutputConfiguration * soap_new_set__trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioOutputConfiguration *_p = ::soap_new__trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioOutputConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration *p)
{
	if (::soap_read__trt__RemoveAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioOutputConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioOutputConfigurationResponse(struct soap*, const char*, _trt__AddAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioOutputConfigurationResponse * soap_new__trt__AddAudioOutputConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioOutputConfigurationResponse * soap_new_req__trt__AddAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioOutputConfigurationResponse *_p = ::soap_new__trt__AddAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioOutputConfigurationResponse * soap_new_set__trt__AddAudioOutputConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioOutputConfigurationResponse *_p = ::soap_new__trt__AddAudioOutputConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioOutputConfigurationResponse(struct soap *soap, _trt__AddAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioOutputConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioOutputConfigurationResponse(struct soap*, _trt__AddAudioOutputConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioOutputConfigurationResponse(struct soap *soap, _trt__AddAudioOutputConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioOutputConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioOutputConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioOutputConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioOutputConfigurationResponse(struct soap *soap, _trt__AddAudioOutputConfigurationResponse *p)
{
	if (::soap_read__trt__AddAudioOutputConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioOutputConfiguration(struct soap*, const char*, int, const _trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioOutputConfiguration(struct soap*, const char*, _trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioOutputConfiguration * soap_new__trt__AddAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioOutputConfiguration * soap_new_req__trt__AddAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioOutputConfiguration *_p = ::soap_new__trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioOutputConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioOutputConfiguration * soap_new_set__trt__AddAudioOutputConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioOutputConfiguration *_p = ::soap_new__trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioOutputConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioOutputConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioOutputConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, _trt__AddAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration *p)
{
	if (::soap_read__trt__AddAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveMetadataConfigurationResponse(struct soap*, const char*, _trt__RemoveMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveMetadataConfigurationResponse * soap_new__trt__RemoveMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveMetadataConfigurationResponse * soap_new_req__trt__RemoveMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveMetadataConfigurationResponse *_p = ::soap_new__trt__RemoveMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveMetadataConfigurationResponse * soap_new_set__trt__RemoveMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveMetadataConfigurationResponse *_p = ::soap_new__trt__RemoveMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveMetadataConfigurationResponse(struct soap *soap, _trt__RemoveMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveMetadataConfigurationResponse(struct soap*, _trt__RemoveMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveMetadataConfigurationResponse(struct soap *soap, _trt__RemoveMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveMetadataConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveMetadataConfigurationResponse(struct soap *soap, _trt__RemoveMetadataConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveMetadataConfiguration(struct soap*, const char*, int, const _trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in__trt__RemoveMetadataConfiguration(struct soap*, const char*, _trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveMetadataConfiguration * soap_new__trt__RemoveMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveMetadataConfiguration * soap_new_req__trt__RemoveMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveMetadataConfiguration *_p = ::soap_new__trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveMetadataConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveMetadataConfiguration * soap_new_set__trt__RemoveMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveMetadataConfiguration *_p = ::soap_new__trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveMetadataConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, _trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, _trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, _trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get__trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, _trt__RemoveMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration *p)
{
	if (::soap_read__trt__RemoveMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddMetadataConfigurationResponse(struct soap*, const char*, int, const _trt__AddMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddMetadataConfigurationResponse(struct soap*, const char*, _trt__AddMetadataConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddMetadataConfigurationResponse * soap_new__trt__AddMetadataConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddMetadataConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddMetadataConfigurationResponse * soap_new_req__trt__AddMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__AddMetadataConfigurationResponse *_p = ::soap_new__trt__AddMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddMetadataConfigurationResponse * soap_new_set__trt__AddMetadataConfigurationResponse(
	struct soap *soap)
{
	_trt__AddMetadataConfigurationResponse *_p = ::soap_new__trt__AddMetadataConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddMetadataConfigurationResponse(struct soap *soap, _trt__AddMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__AddMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__AddMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__AddMetadataConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddMetadataConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddMetadataConfigurationResponse(struct soap*, _trt__AddMetadataConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddMetadataConfigurationResponse(struct soap *soap, _trt__AddMetadataConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddMetadataConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddMetadataConfigurationResponse(struct soap *soap, const char *URL, _trt__AddMetadataConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddMetadataConfigurationResponse(struct soap *soap, _trt__AddMetadataConfigurationResponse *p)
{
	if (::soap_read__trt__AddMetadataConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE__trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddMetadataConfiguration(struct soap*, const char*, int, const _trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 _trt__AddMetadataConfiguration * SOAP_FMAC4 soap_in__trt__AddMetadataConfiguration(struct soap*, const char*, _trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC1 _trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddMetadataConfiguration * soap_new__trt__AddMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddMetadataConfiguration * soap_new_req__trt__AddMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddMetadataConfiguration *_p = ::soap_new__trt__AddMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddMetadataConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddMetadataConfiguration * soap_new_set__trt__AddMetadataConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddMetadataConfiguration *_p = ::soap_new__trt__AddMetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddMetadataConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddMetadataConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddMetadataConfiguration(struct soap *soap, const char *URL, _trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddMetadataConfiguration(struct soap *soap, const char *URL, _trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddMetadataConfiguration(struct soap *soap, const char *URL, _trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddMetadataConfiguration", p->soap_type() == SOAP_TYPE__trt__AddMetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddMetadataConfiguration * SOAP_FMAC4 soap_get__trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_read__trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddMetadataConfiguration(struct soap *soap, const char *URL, _trt__AddMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration *p)
{
	if (::soap_read__trt__AddMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new_req__trt__RemoveVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoAnalyticsConfigurationResponse * soap_new_set__trt__RemoveVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__RemoveVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, _trt__RemoveVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__RemoveVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__RemoveVideoAnalyticsConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new_req__trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoAnalyticsConfiguration *_p = ::soap_new__trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoAnalyticsConfiguration * soap_new_set__trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoAnalyticsConfiguration *_p = ::soap_new__trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (::soap_read__trt__RemoveVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, const char*, _trt__AddVideoAnalyticsConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new_req__trt__AddVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__AddVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoAnalyticsConfigurationResponse * soap_new_set__trt__AddVideoAnalyticsConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoAnalyticsConfigurationResponse *_p = ::soap_new__trt__AddVideoAnalyticsConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__AddVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, _trt__AddVideoAnalyticsConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__AddVideoAnalyticsConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoAnalyticsConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoAnalyticsConfigurationResponse(struct soap *soap, _trt__AddVideoAnalyticsConfigurationResponse *p)
{
	if (::soap_read__trt__AddVideoAnalyticsConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const _trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, _trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoAnalyticsConfiguration * soap_new__trt__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoAnalyticsConfiguration * soap_new_req__trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoAnalyticsConfiguration *_p = ::soap_new__trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoAnalyticsConfiguration * soap_new_set__trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoAnalyticsConfiguration *_p = ::soap_new__trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoAnalyticsConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoAnalyticsConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, _trt__AddVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration *p)
{
	if (::soap_read__trt__AddVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemovePTZConfigurationResponse(struct soap*, const char*, int, const _trt__RemovePTZConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemovePTZConfigurationResponse(struct soap*, const char*, _trt__RemovePTZConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemovePTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemovePTZConfigurationResponse * soap_new__trt__RemovePTZConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemovePTZConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemovePTZConfigurationResponse * soap_new_req__trt__RemovePTZConfigurationResponse(
	struct soap *soap)
{
	_trt__RemovePTZConfigurationResponse *_p = ::soap_new__trt__RemovePTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemovePTZConfigurationResponse * soap_new_set__trt__RemovePTZConfigurationResponse(
	struct soap *soap)
{
	_trt__RemovePTZConfigurationResponse *_p = ::soap_new__trt__RemovePTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemovePTZConfigurationResponse(struct soap *soap, _trt__RemovePTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemovePTZConfigurationResponse(struct soap *soap, const char *URL, _trt__RemovePTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemovePTZConfigurationResponse(struct soap *soap, const char *URL, _trt__RemovePTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemovePTZConfigurationResponse(struct soap *soap, const char *URL, _trt__RemovePTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemovePTZConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemovePTZConfigurationResponse(struct soap*, _trt__RemovePTZConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemovePTZConfigurationResponse(struct soap *soap, _trt__RemovePTZConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemovePTZConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemovePTZConfigurationResponse(struct soap *soap, const char *URL, _trt__RemovePTZConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemovePTZConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemovePTZConfigurationResponse(struct soap *soap, _trt__RemovePTZConfigurationResponse *p)
{
	if (::soap_read__trt__RemovePTZConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE__trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemovePTZConfiguration(struct soap*, const char*, int, const _trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 _trt__RemovePTZConfiguration * SOAP_FMAC4 soap_in__trt__RemovePTZConfiguration(struct soap*, const char*, _trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC1 _trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemovePTZConfiguration * soap_new__trt__RemovePTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemovePTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemovePTZConfiguration * soap_new_req__trt__RemovePTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemovePTZConfiguration *_p = ::soap_new__trt__RemovePTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemovePTZConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemovePTZConfiguration * soap_new_set__trt__RemovePTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemovePTZConfiguration *_p = ::soap_new__trt__RemovePTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemovePTZConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfiguration", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemovePTZConfiguration(struct soap *soap, const char *URL, _trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfiguration", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemovePTZConfiguration(struct soap *soap, const char *URL, _trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfiguration", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemovePTZConfiguration(struct soap *soap, const char *URL, _trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemovePTZConfiguration", p->soap_type() == SOAP_TYPE__trt__RemovePTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemovePTZConfiguration * SOAP_FMAC4 soap_get__trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_read__trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemovePTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemovePTZConfiguration(struct soap *soap, const char *URL, _trt__RemovePTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemovePTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration *p)
{
	if (::soap_read__trt__RemovePTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddPTZConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddPTZConfigurationResponse(struct soap*, const char*, int, const _trt__AddPTZConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddPTZConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddPTZConfigurationResponse(struct soap*, const char*, _trt__AddPTZConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddPTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddPTZConfigurationResponse * soap_new__trt__AddPTZConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddPTZConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddPTZConfigurationResponse * soap_new_req__trt__AddPTZConfigurationResponse(
	struct soap *soap)
{
	_trt__AddPTZConfigurationResponse *_p = ::soap_new__trt__AddPTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddPTZConfigurationResponse * soap_new_set__trt__AddPTZConfigurationResponse(
	struct soap *soap)
{
	_trt__AddPTZConfigurationResponse *_p = ::soap_new__trt__AddPTZConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddPTZConfigurationResponse(struct soap *soap, _trt__AddPTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddPTZConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddPTZConfigurationResponse(struct soap *soap, const char *URL, _trt__AddPTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddPTZConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddPTZConfigurationResponse(struct soap *soap, const char *URL, _trt__AddPTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddPTZConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddPTZConfigurationResponse(struct soap *soap, const char *URL, _trt__AddPTZConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddPTZConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddPTZConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddPTZConfigurationResponse(struct soap*, _trt__AddPTZConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddPTZConfigurationResponse(struct soap *soap, _trt__AddPTZConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddPTZConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddPTZConfigurationResponse(struct soap *soap, const char *URL, _trt__AddPTZConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddPTZConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddPTZConfigurationResponse(struct soap *soap, _trt__AddPTZConfigurationResponse *p)
{
	if (::soap_read__trt__AddPTZConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE__trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddPTZConfiguration(struct soap*, const char*, int, const _trt__AddPTZConfiguration *, const char*);
SOAP_FMAC3 _trt__AddPTZConfiguration * SOAP_FMAC4 soap_in__trt__AddPTZConfiguration(struct soap*, const char*, _trt__AddPTZConfiguration *, const char*);
SOAP_FMAC1 _trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddPTZConfiguration * soap_new__trt__AddPTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddPTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddPTZConfiguration * soap_new_req__trt__AddPTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddPTZConfiguration *_p = ::soap_new__trt__AddPTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddPTZConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddPTZConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddPTZConfiguration * soap_new_set__trt__AddPTZConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddPTZConfiguration *_p = ::soap_new__trt__AddPTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddPTZConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddPTZConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfiguration", p->soap_type() == SOAP_TYPE__trt__AddPTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddPTZConfiguration(struct soap *soap, const char *URL, _trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfiguration", p->soap_type() == SOAP_TYPE__trt__AddPTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddPTZConfiguration(struct soap *soap, const char *URL, _trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfiguration", p->soap_type() == SOAP_TYPE__trt__AddPTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddPTZConfiguration(struct soap *soap, const char *URL, _trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddPTZConfiguration", p->soap_type() == SOAP_TYPE__trt__AddPTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddPTZConfiguration * SOAP_FMAC4 soap_get__trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_read__trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddPTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddPTZConfiguration(struct soap *soap, const char *URL, _trt__AddPTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddPTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration *p)
{
	if (::soap_read__trt__AddPTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioSourceConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new_req__trt__RemoveAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioSourceConfigurationResponse *_p = ::soap_new__trt__RemoveAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioSourceConfigurationResponse * soap_new_set__trt__RemoveAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioSourceConfigurationResponse *_p = ::soap_new__trt__RemoveAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, _trt__RemoveAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioSourceConfigurationResponse(struct soap*, _trt__RemoveAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, _trt__RemoveAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioSourceConfigurationResponse(struct soap *soap, _trt__RemoveAudioSourceConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioSourceConfiguration(struct soap*, const char*, _trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioSourceConfiguration * soap_new__trt__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioSourceConfiguration * soap_new_req__trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioSourceConfiguration *_p = ::soap_new__trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioSourceConfiguration * soap_new_set__trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioSourceConfiguration *_p = ::soap_new__trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration *p)
{
	if (::soap_read__trt__RemoveAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioSourceConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioSourceConfigurationResponse(struct soap*, const char*, _trt__AddAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioSourceConfigurationResponse * soap_new__trt__AddAudioSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioSourceConfigurationResponse * soap_new_req__trt__AddAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioSourceConfigurationResponse *_p = ::soap_new__trt__AddAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioSourceConfigurationResponse * soap_new_set__trt__AddAudioSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioSourceConfigurationResponse *_p = ::soap_new__trt__AddAudioSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioSourceConfigurationResponse(struct soap *soap, _trt__AddAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioSourceConfigurationResponse(struct soap*, _trt__AddAudioSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioSourceConfigurationResponse(struct soap *soap, _trt__AddAudioSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioSourceConfigurationResponse(struct soap *soap, _trt__AddAudioSourceConfigurationResponse *p)
{
	if (::soap_read__trt__AddAudioSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioSourceConfiguration(struct soap*, const char*, int, const _trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioSourceConfiguration(struct soap*, const char*, _trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioSourceConfiguration * soap_new__trt__AddAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioSourceConfiguration * soap_new_req__trt__AddAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioSourceConfiguration *_p = ::soap_new__trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioSourceConfiguration * soap_new_set__trt__AddAudioSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioSourceConfiguration *_p = ::soap_new__trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, _trt__AddAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration *p)
{
	if (::soap_read__trt__AddAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__RemoveAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new_req__trt__RemoveAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioEncoderConfigurationResponse *_p = ::soap_new__trt__RemoveAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveAudioEncoderConfigurationResponse * soap_new_set__trt__RemoveAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveAudioEncoderConfigurationResponse *_p = ::soap_new__trt__RemoveAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, _trt__RemoveAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioEncoderConfigurationResponse(struct soap *soap, _trt__RemoveAudioEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, _trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveAudioEncoderConfiguration * soap_new__trt__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveAudioEncoderConfiguration * soap_new_req__trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioEncoderConfiguration *_p = ::soap_new__trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveAudioEncoderConfiguration * soap_new_set__trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveAudioEncoderConfiguration *_p = ::soap_new__trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveAudioEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration *p)
{
	if (::soap_read__trt__RemoveAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddAudioEncoderConfigurationResponse(struct soap*, const char*, _trt__AddAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioEncoderConfigurationResponse * soap_new__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioEncoderConfigurationResponse * soap_new_req__trt__AddAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioEncoderConfigurationResponse *_p = ::soap_new__trt__AddAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddAudioEncoderConfigurationResponse * soap_new_set__trt__AddAudioEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddAudioEncoderConfigurationResponse *_p = ::soap_new__trt__AddAudioEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, _trt__AddAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddAudioEncoderConfigurationResponse(struct soap*, _trt__AddAudioEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, _trt__AddAudioEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioEncoderConfigurationResponse(struct soap *soap, _trt__AddAudioEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__AddAudioEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddAudioEncoderConfiguration(struct soap*, const char*, int, const _trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in__trt__AddAudioEncoderConfiguration(struct soap*, const char*, _trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddAudioEncoderConfiguration * soap_new__trt__AddAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddAudioEncoderConfiguration * soap_new_req__trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioEncoderConfiguration *_p = ::soap_new__trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddAudioEncoderConfiguration * soap_new_set__trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddAudioEncoderConfiguration *_p = ::soap_new__trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddAudioEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddAudioEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddAudioEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddAudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get__trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration *p)
{
	if (::soap_read__trt__AddAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoSourceConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new_req__trt__RemoveVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoSourceConfigurationResponse *_p = ::soap_new__trt__RemoveVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoSourceConfigurationResponse * soap_new_set__trt__RemoveVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoSourceConfigurationResponse *_p = ::soap_new__trt__RemoveVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, _trt__RemoveVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoSourceConfigurationResponse(struct soap*, _trt__RemoveVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, _trt__RemoveVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoSourceConfigurationResponse(struct soap *soap, _trt__RemoveVideoSourceConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoSourceConfiguration(struct soap*, const char*, _trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoSourceConfiguration * soap_new__trt__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoSourceConfiguration * soap_new_req__trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoSourceConfiguration *_p = ::soap_new__trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoSourceConfiguration * soap_new_set__trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoSourceConfiguration *_p = ::soap_new__trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoSourceConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration *p)
{
	if (::soap_read__trt__RemoveVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoSourceConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoSourceConfigurationResponse(struct soap*, const char*, _trt__AddVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoSourceConfigurationResponse * soap_new__trt__AddVideoSourceConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoSourceConfigurationResponse * soap_new_req__trt__AddVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoSourceConfigurationResponse *_p = ::soap_new__trt__AddVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoSourceConfigurationResponse * soap_new_set__trt__AddVideoSourceConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoSourceConfigurationResponse *_p = ::soap_new__trt__AddVideoSourceConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoSourceConfigurationResponse(struct soap *soap, _trt__AddVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoSourceConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoSourceConfigurationResponse(struct soap*, _trt__AddVideoSourceConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoSourceConfigurationResponse(struct soap *soap, _trt__AddVideoSourceConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoSourceConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoSourceConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoSourceConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoSourceConfigurationResponse(struct soap *soap, _trt__AddVideoSourceConfigurationResponse *p)
{
	if (::soap_read__trt__AddVideoSourceConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoSourceConfiguration(struct soap*, const char*, int, const _trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoSourceConfiguration(struct soap*, const char*, _trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoSourceConfiguration * soap_new__trt__AddVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoSourceConfiguration * soap_new_req__trt__AddVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoSourceConfiguration *_p = ::soap_new__trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoSourceConfiguration * soap_new_set__trt__AddVideoSourceConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoSourceConfiguration *_p = ::soap_new__trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoSourceConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoSourceConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoSourceConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, _trt__AddVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration *p)
{
	if (::soap_read__trt__AddVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__RemoveVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__RemoveVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new_req__trt__RemoveVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoEncoderConfigurationResponse *_p = ::soap_new__trt__RemoveVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__RemoveVideoEncoderConfigurationResponse * soap_new_set__trt__RemoveVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__RemoveVideoEncoderConfigurationResponse *_p = ::soap_new__trt__RemoveVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _trt__RemoveVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, _trt__RemoveVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _trt__RemoveVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoEncoderConfigurationResponse(struct soap *soap, _trt__RemoveVideoEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__RemoveVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, _trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__RemoveVideoEncoderConfiguration * soap_new__trt__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__RemoveVideoEncoderConfiguration * soap_new_req__trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoEncoderConfiguration *_p = ::soap_new__trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__RemoveVideoEncoderConfiguration * soap_new_set__trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__RemoveVideoEncoderConfiguration *_p = ::soap_new__trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__RemoveVideoEncoderConfiguration::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:RemoveVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__RemoveVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__RemoveVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__RemoveVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__RemoveVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration *p)
{
	if (::soap_read__trt__RemoveVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse_DEFINED
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoEncoderConfigurationResponse(struct soap*, const char*, int, const _trt__AddVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in__trt__AddVideoEncoderConfigurationResponse(struct soap*, const char*, _trt__AddVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC1 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoEncoderConfigurationResponse * soap_new__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoEncoderConfigurationResponse * soap_new_req__trt__AddVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoEncoderConfigurationResponse *_p = ::soap_new__trt__AddVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__AddVideoEncoderConfigurationResponse * soap_new_set__trt__AddVideoEncoderConfigurationResponse(
	struct soap *soap)
{
	_trt__AddVideoEncoderConfigurationResponse *_p = ::soap_new__trt__AddVideoEncoderConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, _trt__AddVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfigurationResponse", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get__trt__AddVideoEncoderConfigurationResponse(struct soap*, _trt__AddVideoEncoderConfigurationResponse *, const char*, const char*);

inline int soap_read__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, _trt__AddVideoEncoderConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoEncoderConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoEncoderConfigurationResponse(struct soap *soap, _trt__AddVideoEncoderConfigurationResponse *p)
{
	if (::soap_read__trt__AddVideoEncoderConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__AddVideoEncoderConfiguration(struct soap*, const char*, int, const _trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in__trt__AddVideoEncoderConfiguration(struct soap*, const char*, _trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 _trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _trt__AddVideoEncoderConfiguration * soap_new__trt__AddVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline _trt__AddVideoEncoderConfiguration * soap_new_req__trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoEncoderConfiguration *_p = ::soap_new__trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _trt__AddVideoEncoderConfiguration * soap_new_set__trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& ConfigurationToken)
{
	_trt__AddVideoEncoderConfiguration *_p = ::soap_new__trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__AddVideoEncoderConfiguration::ProfileToken = ProfileToken;
		_p->_trt__AddVideoEncoderConfiguration::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:AddVideoEncoderConfiguration", p->soap_type() == SOAP_TYPE__trt__AddVideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get__trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read__trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__AddVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, _trt__AddVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__AddVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration *p)
{
	if (::soap_read__trt__AddVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse_DEFINED
#define SOAP_TYPE__trt__GetProfilesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfilesResponse(struct soap*, const char*, int, const _trt__GetProfilesResponse *, const char*);
SOAP_FMAC3 _trt__GetProfilesResponse * SOAP_FMAC4 soap_in__trt__GetProfilesResponse(struct soap*, const char*, _trt__GetProfilesResponse *, const char*);
SOAP_FMAC1 _trt__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfilesResponse * soap_new__trt__GetProfilesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfilesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfilesResponse * soap_new_req__trt__GetProfilesResponse(
	struct soap *soap)
{
	_trt__GetProfilesResponse *_p = ::soap_new__trt__GetProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetProfilesResponse * soap_new_set__trt__GetProfilesResponse(
	struct soap *soap,
	const std::vector<tt__Profile *> & Profiles)
{
	_trt__GetProfilesResponse *_p = ::soap_new__trt__GetProfilesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfilesResponse::Profiles = Profiles;
	}
	return _p;
}

inline int soap_write__trt__GetProfilesResponse(struct soap *soap, _trt__GetProfilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfilesResponse", p->soap_type() == SOAP_TYPE__trt__GetProfilesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetProfilesResponse(struct soap *soap, const char *URL, _trt__GetProfilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfilesResponse", p->soap_type() == SOAP_TYPE__trt__GetProfilesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetProfilesResponse(struct soap *soap, const char *URL, _trt__GetProfilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfilesResponse", p->soap_type() == SOAP_TYPE__trt__GetProfilesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetProfilesResponse(struct soap *soap, const char *URL, _trt__GetProfilesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfilesResponse", p->soap_type() == SOAP_TYPE__trt__GetProfilesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfilesResponse * SOAP_FMAC4 soap_get__trt__GetProfilesResponse(struct soap*, _trt__GetProfilesResponse *, const char*, const char*);

inline int soap_read__trt__GetProfilesResponse(struct soap *soap, _trt__GetProfilesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetProfilesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetProfilesResponse(struct soap *soap, const char *URL, _trt__GetProfilesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetProfilesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetProfilesResponse(struct soap *soap, _trt__GetProfilesResponse *p)
{
	if (::soap_read__trt__GetProfilesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetProfiles_DEFINED
#define SOAP_TYPE__trt__GetProfiles_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfiles(struct soap*, const char*, int, const _trt__GetProfiles *, const char*);
SOAP_FMAC3 _trt__GetProfiles * SOAP_FMAC4 soap_in__trt__GetProfiles(struct soap*, const char*, _trt__GetProfiles *, const char*);
SOAP_FMAC1 _trt__GetProfiles * SOAP_FMAC2 soap_instantiate__trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfiles * soap_new__trt__GetProfiles(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfiles(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfiles * soap_new_req__trt__GetProfiles(
	struct soap *soap)
{
	_trt__GetProfiles *_p = ::soap_new__trt__GetProfiles(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetProfiles * soap_new_set__trt__GetProfiles(
	struct soap *soap)
{
	_trt__GetProfiles *_p = ::soap_new__trt__GetProfiles(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetProfiles(struct soap *soap, _trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfiles", p->soap_type() == SOAP_TYPE__trt__GetProfiles ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetProfiles(struct soap *soap, const char *URL, _trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfiles", p->soap_type() == SOAP_TYPE__trt__GetProfiles ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetProfiles(struct soap *soap, const char *URL, _trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfiles", p->soap_type() == SOAP_TYPE__trt__GetProfiles ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetProfiles(struct soap *soap, const char *URL, _trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfiles", p->soap_type() == SOAP_TYPE__trt__GetProfiles ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfiles * SOAP_FMAC4 soap_get__trt__GetProfiles(struct soap*, _trt__GetProfiles *, const char*, const char*);

inline int soap_read__trt__GetProfiles(struct soap *soap, _trt__GetProfiles *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetProfiles(struct soap *soap, const char *URL, _trt__GetProfiles *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetProfiles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetProfiles(struct soap *soap, _trt__GetProfiles *p)
{
	if (::soap_read__trt__GetProfiles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse_DEFINED
#define SOAP_TYPE__trt__GetProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfileResponse(struct soap*, const char*, int, const _trt__GetProfileResponse *, const char*);
SOAP_FMAC3 _trt__GetProfileResponse * SOAP_FMAC4 soap_in__trt__GetProfileResponse(struct soap*, const char*, _trt__GetProfileResponse *, const char*);
SOAP_FMAC1 _trt__GetProfileResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfileResponse * soap_new__trt__GetProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfileResponse * soap_new_req__trt__GetProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__GetProfileResponse *_p = ::soap_new__trt__GetProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfileResponse::Profile = Profile;
	}
	return _p;
}

inline _trt__GetProfileResponse * soap_new_set__trt__GetProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__GetProfileResponse *_p = ::soap_new__trt__GetProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfileResponse::Profile = Profile;
	}
	return _p;
}

inline int soap_write__trt__GetProfileResponse(struct soap *soap, _trt__GetProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfileResponse", p->soap_type() == SOAP_TYPE__trt__GetProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetProfileResponse(struct soap *soap, const char *URL, _trt__GetProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfileResponse", p->soap_type() == SOAP_TYPE__trt__GetProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetProfileResponse(struct soap *soap, const char *URL, _trt__GetProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfileResponse", p->soap_type() == SOAP_TYPE__trt__GetProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetProfileResponse(struct soap *soap, const char *URL, _trt__GetProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfileResponse", p->soap_type() == SOAP_TYPE__trt__GetProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfileResponse * SOAP_FMAC4 soap_get__trt__GetProfileResponse(struct soap*, _trt__GetProfileResponse *, const char*, const char*);

inline int soap_read__trt__GetProfileResponse(struct soap *soap, _trt__GetProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetProfileResponse(struct soap *soap, const char *URL, _trt__GetProfileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetProfileResponse(struct soap *soap, _trt__GetProfileResponse *p)
{
	if (::soap_read__trt__GetProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetProfile_DEFINED
#define SOAP_TYPE__trt__GetProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetProfile(struct soap*, const char*, int, const _trt__GetProfile *, const char*);
SOAP_FMAC3 _trt__GetProfile * SOAP_FMAC4 soap_in__trt__GetProfile(struct soap*, const char*, _trt__GetProfile *, const char*);
SOAP_FMAC1 _trt__GetProfile * SOAP_FMAC2 soap_instantiate__trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetProfile * soap_new__trt__GetProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__GetProfile * soap_new_req__trt__GetProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetProfile *_p = ::soap_new__trt__GetProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _trt__GetProfile * soap_new_set__trt__GetProfile(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_trt__GetProfile *_p = ::soap_new__trt__GetProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetProfile::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__trt__GetProfile(struct soap *soap, _trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfile", p->soap_type() == SOAP_TYPE__trt__GetProfile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetProfile(struct soap *soap, const char *URL, _trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfile", p->soap_type() == SOAP_TYPE__trt__GetProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetProfile(struct soap *soap, const char *URL, _trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfile", p->soap_type() == SOAP_TYPE__trt__GetProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetProfile(struct soap *soap, const char *URL, _trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetProfile", p->soap_type() == SOAP_TYPE__trt__GetProfile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetProfile * SOAP_FMAC4 soap_get__trt__GetProfile(struct soap*, _trt__GetProfile *, const char*, const char*);

inline int soap_read__trt__GetProfile(struct soap *soap, _trt__GetProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetProfile(struct soap *soap, const char *URL, _trt__GetProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetProfile(struct soap *soap, _trt__GetProfile *p)
{
	if (::soap_read__trt__GetProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse_DEFINED
#define SOAP_TYPE__trt__CreateProfileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateProfileResponse(struct soap*, const char*, int, const _trt__CreateProfileResponse *, const char*);
SOAP_FMAC3 _trt__CreateProfileResponse * SOAP_FMAC4 soap_in__trt__CreateProfileResponse(struct soap*, const char*, _trt__CreateProfileResponse *, const char*);
SOAP_FMAC1 _trt__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__trt__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateProfileResponse * soap_new__trt__CreateProfileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateProfileResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateProfileResponse * soap_new_req__trt__CreateProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__CreateProfileResponse *_p = ::soap_new__trt__CreateProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfileResponse::Profile = Profile;
	}
	return _p;
}

inline _trt__CreateProfileResponse * soap_new_set__trt__CreateProfileResponse(
	struct soap *soap,
	tt__Profile *Profile)
{
	_trt__CreateProfileResponse *_p = ::soap_new__trt__CreateProfileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfileResponse::Profile = Profile;
	}
	return _p;
}

inline int soap_write__trt__CreateProfileResponse(struct soap *soap, _trt__CreateProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfileResponse", p->soap_type() == SOAP_TYPE__trt__CreateProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__CreateProfileResponse(struct soap *soap, const char *URL, _trt__CreateProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfileResponse", p->soap_type() == SOAP_TYPE__trt__CreateProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__CreateProfileResponse(struct soap *soap, const char *URL, _trt__CreateProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfileResponse", p->soap_type() == SOAP_TYPE__trt__CreateProfileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__CreateProfileResponse(struct soap *soap, const char *URL, _trt__CreateProfileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfileResponse", p->soap_type() == SOAP_TYPE__trt__CreateProfileResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateProfileResponse * SOAP_FMAC4 soap_get__trt__CreateProfileResponse(struct soap*, _trt__CreateProfileResponse *, const char*, const char*);

inline int soap_read__trt__CreateProfileResponse(struct soap *soap, _trt__CreateProfileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__CreateProfileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__CreateProfileResponse(struct soap *soap, const char *URL, _trt__CreateProfileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__CreateProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__CreateProfileResponse(struct soap *soap, _trt__CreateProfileResponse *p)
{
	if (::soap_read__trt__CreateProfileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__CreateProfile_DEFINED
#define SOAP_TYPE__trt__CreateProfile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__CreateProfile(struct soap*, const char*, int, const _trt__CreateProfile *, const char*);
SOAP_FMAC3 _trt__CreateProfile * SOAP_FMAC4 soap_in__trt__CreateProfile(struct soap*, const char*, _trt__CreateProfile *, const char*);
SOAP_FMAC1 _trt__CreateProfile * SOAP_FMAC2 soap_instantiate__trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline _trt__CreateProfile * soap_new__trt__CreateProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__CreateProfile(soap, n, NULL, NULL, NULL);
}

inline _trt__CreateProfile * soap_new_req__trt__CreateProfile(
	struct soap *soap,
	const std::string& Name)
{
	_trt__CreateProfile *_p = ::soap_new__trt__CreateProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfile::Name = Name;
	}
	return _p;
}

inline _trt__CreateProfile * soap_new_set__trt__CreateProfile(
	struct soap *soap,
	const std::string& Name,
	std::string *Token)
{
	_trt__CreateProfile *_p = ::soap_new__trt__CreateProfile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__CreateProfile::Name = Name;
		_p->_trt__CreateProfile::Token = Token;
	}
	return _p;
}

inline int soap_write__trt__CreateProfile(struct soap *soap, _trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfile", p->soap_type() == SOAP_TYPE__trt__CreateProfile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__CreateProfile(struct soap *soap, const char *URL, _trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfile", p->soap_type() == SOAP_TYPE__trt__CreateProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__CreateProfile(struct soap *soap, const char *URL, _trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfile", p->soap_type() == SOAP_TYPE__trt__CreateProfile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__CreateProfile(struct soap *soap, const char *URL, _trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:CreateProfile", p->soap_type() == SOAP_TYPE__trt__CreateProfile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__CreateProfile * SOAP_FMAC4 soap_get__trt__CreateProfile(struct soap*, _trt__CreateProfile *, const char*, const char*);

inline int soap_read__trt__CreateProfile(struct soap *soap, _trt__CreateProfile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__CreateProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__CreateProfile(struct soap *soap, const char *URL, _trt__CreateProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__CreateProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__CreateProfile(struct soap *soap, _trt__CreateProfile *p)
{
	if (::soap_read__trt__CreateProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputsResponse(struct soap*, const char*, int, const _trt__GetAudioOutputsResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputsResponse * SOAP_FMAC4 soap_in__trt__GetAudioOutputsResponse(struct soap*, const char*, _trt__GetAudioOutputsResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputsResponse * soap_new__trt__GetAudioOutputsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputsResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputsResponse * soap_new_req__trt__GetAudioOutputsResponse(
	struct soap *soap)
{
	_trt__GetAudioOutputsResponse *_p = ::soap_new__trt__GetAudioOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputsResponse * soap_new_set__trt__GetAudioOutputsResponse(
	struct soap *soap,
	const std::vector<tt__AudioOutput *> & AudioOutputs)
{
	_trt__GetAudioOutputsResponse *_p = ::soap_new__trt__GetAudioOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioOutputsResponse::AudioOutputs = AudioOutputs;
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputsResponse(struct soap *soap, _trt__GetAudioOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputsResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputsResponse * SOAP_FMAC4 soap_get__trt__GetAudioOutputsResponse(struct soap*, _trt__GetAudioOutputsResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputsResponse(struct soap *soap, _trt__GetAudioOutputsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputsResponse(struct soap *soap, const char *URL, _trt__GetAudioOutputsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputsResponse(struct soap *soap, _trt__GetAudioOutputsResponse *p)
{
	if (::soap_read__trt__GetAudioOutputsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE__trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioOutputs(struct soap*, const char*, int, const _trt__GetAudioOutputs *, const char*);
SOAP_FMAC3 _trt__GetAudioOutputs * SOAP_FMAC4 soap_in__trt__GetAudioOutputs(struct soap*, const char*, _trt__GetAudioOutputs *, const char*);
SOAP_FMAC1 _trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioOutputs * soap_new__trt__GetAudioOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioOutputs(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioOutputs * soap_new_req__trt__GetAudioOutputs(
	struct soap *soap)
{
	_trt__GetAudioOutputs *_p = ::soap_new__trt__GetAudioOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioOutputs * soap_new_set__trt__GetAudioOutputs(
	struct soap *soap)
{
	_trt__GetAudioOutputs *_p = ::soap_new__trt__GetAudioOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputs", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioOutputs(struct soap *soap, const char *URL, _trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputs", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioOutputs(struct soap *soap, const char *URL, _trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputs", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioOutputs(struct soap *soap, const char *URL, _trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioOutputs", p->soap_type() == SOAP_TYPE__trt__GetAudioOutputs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioOutputs * SOAP_FMAC4 soap_get__trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *, const char*, const char*);

inline int soap_read__trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioOutputs(struct soap *soap, const char *URL, _trt__GetAudioOutputs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs *p)
{
	if (::soap_read__trt__GetAudioOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse_DEFINED
#define SOAP_TYPE__trt__GetAudioSourcesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSourcesResponse(struct soap*, const char*, int, const _trt__GetAudioSourcesResponse *, const char*);
SOAP_FMAC3 _trt__GetAudioSourcesResponse * SOAP_FMAC4 soap_in__trt__GetAudioSourcesResponse(struct soap*, const char*, _trt__GetAudioSourcesResponse *, const char*);
SOAP_FMAC1 _trt__GetAudioSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSourcesResponse * soap_new__trt__GetAudioSourcesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSourcesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSourcesResponse * soap_new_req__trt__GetAudioSourcesResponse(
	struct soap *soap)
{
	_trt__GetAudioSourcesResponse *_p = ::soap_new__trt__GetAudioSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSourcesResponse * soap_new_set__trt__GetAudioSourcesResponse(
	struct soap *soap,
	const std::vector<tt__AudioSource *> & AudioSources)
{
	_trt__GetAudioSourcesResponse *_p = ::soap_new__trt__GetAudioSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetAudioSourcesResponse::AudioSources = AudioSources;
	}
	return _p;
}

inline int soap_write__trt__GetAudioSourcesResponse(struct soap *soap, _trt__GetAudioSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourcesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSourcesResponse(struct soap *soap, const char *URL, _trt__GetAudioSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourcesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSourcesResponse(struct soap *soap, const char *URL, _trt__GetAudioSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourcesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSourcesResponse(struct soap *soap, const char *URL, _trt__GetAudioSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetAudioSourcesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSourcesResponse * SOAP_FMAC4 soap_get__trt__GetAudioSourcesResponse(struct soap*, _trt__GetAudioSourcesResponse *, const char*, const char*);

inline int soap_read__trt__GetAudioSourcesResponse(struct soap *soap, _trt__GetAudioSourcesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSourcesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSourcesResponse(struct soap *soap, const char *URL, _trt__GetAudioSourcesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSourcesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSourcesResponse(struct soap *soap, _trt__GetAudioSourcesResponse *p)
{
	if (::soap_read__trt__GetAudioSourcesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources_DEFINED
#define SOAP_TYPE__trt__GetAudioSources_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetAudioSources(struct soap*, const char*, int, const _trt__GetAudioSources *, const char*);
SOAP_FMAC3 _trt__GetAudioSources * SOAP_FMAC4 soap_in__trt__GetAudioSources(struct soap*, const char*, _trt__GetAudioSources *, const char*);
SOAP_FMAC1 _trt__GetAudioSources * SOAP_FMAC2 soap_instantiate__trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetAudioSources * soap_new__trt__GetAudioSources(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetAudioSources(soap, n, NULL, NULL, NULL);
}

inline _trt__GetAudioSources * soap_new_req__trt__GetAudioSources(
	struct soap *soap)
{
	_trt__GetAudioSources *_p = ::soap_new__trt__GetAudioSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetAudioSources * soap_new_set__trt__GetAudioSources(
	struct soap *soap)
{
	_trt__GetAudioSources *_p = ::soap_new__trt__GetAudioSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSources", p->soap_type() == SOAP_TYPE__trt__GetAudioSources ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetAudioSources(struct soap *soap, const char *URL, _trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSources", p->soap_type() == SOAP_TYPE__trt__GetAudioSources ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetAudioSources(struct soap *soap, const char *URL, _trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSources", p->soap_type() == SOAP_TYPE__trt__GetAudioSources ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetAudioSources(struct soap *soap, const char *URL, _trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetAudioSources", p->soap_type() == SOAP_TYPE__trt__GetAudioSources ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetAudioSources * SOAP_FMAC4 soap_get__trt__GetAudioSources(struct soap*, _trt__GetAudioSources *, const char*, const char*);

inline int soap_read__trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetAudioSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetAudioSources(struct soap *soap, const char *URL, _trt__GetAudioSources *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetAudioSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources *p)
{
	if (::soap_read__trt__GetAudioSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse_DEFINED
#define SOAP_TYPE__trt__GetVideoSourcesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSourcesResponse(struct soap*, const char*, int, const _trt__GetVideoSourcesResponse *, const char*);
SOAP_FMAC3 _trt__GetVideoSourcesResponse * SOAP_FMAC4 soap_in__trt__GetVideoSourcesResponse(struct soap*, const char*, _trt__GetVideoSourcesResponse *, const char*);
SOAP_FMAC1 _trt__GetVideoSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourcesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSourcesResponse * soap_new__trt__GetVideoSourcesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSourcesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSourcesResponse * soap_new_req__trt__GetVideoSourcesResponse(
	struct soap *soap)
{
	_trt__GetVideoSourcesResponse *_p = ::soap_new__trt__GetVideoSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSourcesResponse * soap_new_set__trt__GetVideoSourcesResponse(
	struct soap *soap,
	const std::vector<tt__VideoSource *> & VideoSources)
{
	_trt__GetVideoSourcesResponse *_p = ::soap_new__trt__GetVideoSourcesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetVideoSourcesResponse::VideoSources = VideoSources;
	}
	return _p;
}

inline int soap_write__trt__GetVideoSourcesResponse(struct soap *soap, _trt__GetVideoSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourcesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSourcesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourcesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSourcesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourcesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSourcesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourcesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSourcesResponse", p->soap_type() == SOAP_TYPE__trt__GetVideoSourcesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSourcesResponse * SOAP_FMAC4 soap_get__trt__GetVideoSourcesResponse(struct soap*, _trt__GetVideoSourcesResponse *, const char*, const char*);

inline int soap_read__trt__GetVideoSourcesResponse(struct soap *soap, _trt__GetVideoSourcesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSourcesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSourcesResponse(struct soap *soap, const char *URL, _trt__GetVideoSourcesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSourcesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSourcesResponse(struct soap *soap, _trt__GetVideoSourcesResponse *p)
{
	if (::soap_read__trt__GetVideoSourcesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources_DEFINED
#define SOAP_TYPE__trt__GetVideoSources_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetVideoSources(struct soap*, const char*, int, const _trt__GetVideoSources *, const char*);
SOAP_FMAC3 _trt__GetVideoSources * SOAP_FMAC4 soap_in__trt__GetVideoSources(struct soap*, const char*, _trt__GetVideoSources *, const char*);
SOAP_FMAC1 _trt__GetVideoSources * SOAP_FMAC2 soap_instantiate__trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetVideoSources * soap_new__trt__GetVideoSources(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetVideoSources(soap, n, NULL, NULL, NULL);
}

inline _trt__GetVideoSources * soap_new_req__trt__GetVideoSources(
	struct soap *soap)
{
	_trt__GetVideoSources *_p = ::soap_new__trt__GetVideoSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetVideoSources * soap_new_set__trt__GetVideoSources(
	struct soap *soap)
{
	_trt__GetVideoSources *_p = ::soap_new__trt__GetVideoSources(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSources", p->soap_type() == SOAP_TYPE__trt__GetVideoSources ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetVideoSources(struct soap *soap, const char *URL, _trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSources", p->soap_type() == SOAP_TYPE__trt__GetVideoSources ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetVideoSources(struct soap *soap, const char *URL, _trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSources", p->soap_type() == SOAP_TYPE__trt__GetVideoSources ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetVideoSources(struct soap *soap, const char *URL, _trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetVideoSources", p->soap_type() == SOAP_TYPE__trt__GetVideoSources ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetVideoSources * SOAP_FMAC4 soap_get__trt__GetVideoSources(struct soap*, _trt__GetVideoSources *, const char*, const char*);

inline int soap_read__trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetVideoSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetVideoSources(struct soap *soap, const char *URL, _trt__GetVideoSources *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetVideoSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources *p)
{
	if (::soap_read__trt__GetVideoSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _trt__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__trt__GetServiceCapabilitiesResponse(struct soap*, const char*, _trt__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetServiceCapabilitiesResponse * soap_new__trt__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _trt__GetServiceCapabilitiesResponse * soap_new_req__trt__GetServiceCapabilitiesResponse(
	struct soap *soap,
	trt__Capabilities *Capabilities)
{
	_trt__GetServiceCapabilitiesResponse *_p = ::soap_new__trt__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _trt__GetServiceCapabilitiesResponse * soap_new_set__trt__GetServiceCapabilitiesResponse(
	struct soap *soap,
	trt__Capabilities *Capabilities)
{
	_trt__GetServiceCapabilitiesResponse *_p = ::soap_new__trt__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_trt__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__trt__GetServiceCapabilitiesResponse(struct soap *soap, _trt__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _trt__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _trt__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _trt__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__trt__GetServiceCapabilitiesResponse(struct soap*, _trt__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__trt__GetServiceCapabilitiesResponse(struct soap *soap, _trt__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _trt__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetServiceCapabilitiesResponse(struct soap *soap, _trt__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__trt__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__trt__GetServiceCapabilities(struct soap*, const char*, int, const _trt__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilities * SOAP_FMAC4 soap_in__trt__GetServiceCapabilities(struct soap*, const char*, _trt__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _trt__GetServiceCapabilities * soap_new__trt__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__trt__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _trt__GetServiceCapabilities * soap_new_req__trt__GetServiceCapabilities(
	struct soap *soap)
{
	_trt__GetServiceCapabilities *_p = ::soap_new__trt__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _trt__GetServiceCapabilities * soap_new_set__trt__GetServiceCapabilities(
	struct soap *soap)
{
	_trt__GetServiceCapabilities *_p = ::soap_new__trt__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__trt__GetServiceCapabilities(struct soap *soap, const char *URL, _trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__trt__GetServiceCapabilities(struct soap *soap, const char *URL, _trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__trt__GetServiceCapabilities(struct soap *soap, const char *URL, _trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__trt__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _trt__GetServiceCapabilities * SOAP_FMAC4 soap_get__trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__trt__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__trt__GetServiceCapabilities(struct soap *soap, const char *URL, _trt__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__trt__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities *p)
{
	if (::soap_read__trt__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__VideoSourceModeExtension_DEFINED
#define SOAP_TYPE_trt__VideoSourceModeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__VideoSourceModeExtension(struct soap*, const char*, int, const trt__VideoSourceModeExtension *, const char*);
SOAP_FMAC3 trt__VideoSourceModeExtension * SOAP_FMAC4 soap_in_trt__VideoSourceModeExtension(struct soap*, const char*, trt__VideoSourceModeExtension *, const char*);
SOAP_FMAC1 trt__VideoSourceModeExtension * SOAP_FMAC2 soap_instantiate_trt__VideoSourceModeExtension(struct soap*, int, const char*, const char*, size_t*);

inline trt__VideoSourceModeExtension * soap_new_trt__VideoSourceModeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__VideoSourceModeExtension(soap, n, NULL, NULL, NULL);
}

inline trt__VideoSourceModeExtension * soap_new_req_trt__VideoSourceModeExtension(
	struct soap *soap)
{
	trt__VideoSourceModeExtension *_p = ::soap_new_trt__VideoSourceModeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__VideoSourceModeExtension * soap_new_set_trt__VideoSourceModeExtension(
	struct soap *soap)
{
	trt__VideoSourceModeExtension *_p = ::soap_new_trt__VideoSourceModeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_trt__VideoSourceModeExtension(struct soap *soap, trt__VideoSourceModeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceModeExtension", p->soap_type() == SOAP_TYPE_trt__VideoSourceModeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_trt__VideoSourceModeExtension(struct soap *soap, const char *URL, trt__VideoSourceModeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceModeExtension", p->soap_type() == SOAP_TYPE_trt__VideoSourceModeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__VideoSourceModeExtension(struct soap *soap, const char *URL, trt__VideoSourceModeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceModeExtension", p->soap_type() == SOAP_TYPE_trt__VideoSourceModeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__VideoSourceModeExtension(struct soap *soap, const char *URL, trt__VideoSourceModeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceModeExtension", p->soap_type() == SOAP_TYPE_trt__VideoSourceModeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 trt__VideoSourceModeExtension * SOAP_FMAC4 soap_get_trt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *, const char*, const char*);

inline int soap_read_trt__VideoSourceModeExtension(struct soap *soap, trt__VideoSourceModeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_trt__VideoSourceModeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__VideoSourceModeExtension(struct soap *soap, const char *URL, trt__VideoSourceModeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__VideoSourceModeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__VideoSourceModeExtension(struct soap *soap, trt__VideoSourceModeExtension *p)
{
	if (::soap_read_trt__VideoSourceModeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__VideoSourceMode_DEFINED
#define SOAP_TYPE_trt__VideoSourceMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__VideoSourceMode(struct soap*, const char*, int, const trt__VideoSourceMode *, const char*);
SOAP_FMAC3 trt__VideoSourceMode * SOAP_FMAC4 soap_in_trt__VideoSourceMode(struct soap*, const char*, trt__VideoSourceMode *, const char*);
SOAP_FMAC1 trt__VideoSourceMode * SOAP_FMAC2 soap_instantiate_trt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline trt__VideoSourceMode * soap_new_trt__VideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__VideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline trt__VideoSourceMode * soap_new_req_trt__VideoSourceMode(
	struct soap *soap,
	float MaxFramerate,
	tt__VideoResolution *MaxResolution,
	const std::string& Encodings,
	bool Reboot,
	const std::string& token)
{
	trt__VideoSourceMode *_p = ::soap_new_trt__VideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__VideoSourceMode::MaxFramerate = MaxFramerate;
		_p->trt__VideoSourceMode::MaxResolution = MaxResolution;
		_p->trt__VideoSourceMode::Encodings = Encodings;
		_p->trt__VideoSourceMode::Reboot = Reboot;
		_p->trt__VideoSourceMode::token = token;
	}
	return _p;
}

inline trt__VideoSourceMode * soap_new_set_trt__VideoSourceMode(
	struct soap *soap,
	float MaxFramerate,
	tt__VideoResolution *MaxResolution,
	const std::string& Encodings,
	bool Reboot,
	std::string *Description,
	trt__VideoSourceModeExtension *Extension,
	const std::string& token,
	bool *Enabled)
{
	trt__VideoSourceMode *_p = ::soap_new_trt__VideoSourceMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__VideoSourceMode::MaxFramerate = MaxFramerate;
		_p->trt__VideoSourceMode::MaxResolution = MaxResolution;
		_p->trt__VideoSourceMode::Encodings = Encodings;
		_p->trt__VideoSourceMode::Reboot = Reboot;
		_p->trt__VideoSourceMode::Description = Description;
		_p->trt__VideoSourceMode::Extension = Extension;
		_p->trt__VideoSourceMode::token = token;
		_p->trt__VideoSourceMode::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write_trt__VideoSourceMode(struct soap *soap, trt__VideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceMode", p->soap_type() == SOAP_TYPE_trt__VideoSourceMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_trt__VideoSourceMode(struct soap *soap, const char *URL, trt__VideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceMode", p->soap_type() == SOAP_TYPE_trt__VideoSourceMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__VideoSourceMode(struct soap *soap, const char *URL, trt__VideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceMode", p->soap_type() == SOAP_TYPE_trt__VideoSourceMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__VideoSourceMode(struct soap *soap, const char *URL, trt__VideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:VideoSourceMode", p->soap_type() == SOAP_TYPE_trt__VideoSourceMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 trt__VideoSourceMode * SOAP_FMAC4 soap_get_trt__VideoSourceMode(struct soap*, trt__VideoSourceMode *, const char*, const char*);

inline int soap_read_trt__VideoSourceMode(struct soap *soap, trt__VideoSourceMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_trt__VideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__VideoSourceMode(struct soap *soap, const char *URL, trt__VideoSourceMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__VideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__VideoSourceMode(struct soap *soap, trt__VideoSourceMode *p)
{
	if (::soap_read_trt__VideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities_DEFINED
#define SOAP_TYPE_trt__StreamingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__StreamingCapabilities(struct soap*, const char*, int, const trt__StreamingCapabilities *, const char*);
SOAP_FMAC3 trt__StreamingCapabilities * SOAP_FMAC4 soap_in_trt__StreamingCapabilities(struct soap*, const char*, trt__StreamingCapabilities *, const char*);
SOAP_FMAC1 trt__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_trt__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__StreamingCapabilities * soap_new_trt__StreamingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__StreamingCapabilities(soap, n, NULL, NULL, NULL);
}

inline trt__StreamingCapabilities * soap_new_req_trt__StreamingCapabilities(
	struct soap *soap)
{
	trt__StreamingCapabilities *_p = ::soap_new_trt__StreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__StreamingCapabilities * soap_new_set_trt__StreamingCapabilities(
	struct soap *soap,
	bool *RTPMulticast,
	bool *RTP_USCORETCP,
	bool *RTP_USCORERTSP_USCORETCP,
	bool *NonAggregateControl,
	bool *NoRTSPStreaming)
{
	trt__StreamingCapabilities *_p = ::soap_new_trt__StreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__StreamingCapabilities::RTPMulticast = RTPMulticast;
		_p->trt__StreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->trt__StreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->trt__StreamingCapabilities::NonAggregateControl = NonAggregateControl;
		_p->trt__StreamingCapabilities::NoRTSPStreaming = NoRTSPStreaming;
	}
	return _p;
}

inline int soap_write_trt__StreamingCapabilities(struct soap *soap, trt__StreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StreamingCapabilities", p->soap_type() == SOAP_TYPE_trt__StreamingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_trt__StreamingCapabilities(struct soap *soap, const char *URL, trt__StreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StreamingCapabilities", p->soap_type() == SOAP_TYPE_trt__StreamingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__StreamingCapabilities(struct soap *soap, const char *URL, trt__StreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StreamingCapabilities", p->soap_type() == SOAP_TYPE_trt__StreamingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__StreamingCapabilities(struct soap *soap, const char *URL, trt__StreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:StreamingCapabilities", p->soap_type() == SOAP_TYPE_trt__StreamingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 trt__StreamingCapabilities * SOAP_FMAC4 soap_get_trt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *, const char*, const char*);

inline int soap_read_trt__StreamingCapabilities(struct soap *soap, trt__StreamingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_trt__StreamingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__StreamingCapabilities(struct soap *soap, const char *URL, trt__StreamingCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__StreamingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__StreamingCapabilities(struct soap *soap, trt__StreamingCapabilities *p)
{
	if (::soap_read_trt__StreamingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_trt__ProfileCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__ProfileCapabilities(struct soap*, const char*, int, const trt__ProfileCapabilities *, const char*);
SOAP_FMAC3 trt__ProfileCapabilities * SOAP_FMAC4 soap_in_trt__ProfileCapabilities(struct soap*, const char*, trt__ProfileCapabilities *, const char*);
SOAP_FMAC1 trt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_trt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__ProfileCapabilities * soap_new_trt__ProfileCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__ProfileCapabilities(soap, n, NULL, NULL, NULL);
}

inline trt__ProfileCapabilities * soap_new_req_trt__ProfileCapabilities(
	struct soap *soap)
{
	trt__ProfileCapabilities *_p = ::soap_new_trt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline trt__ProfileCapabilities * soap_new_set_trt__ProfileCapabilities(
	struct soap *soap,
	int *MaximumNumberOfProfiles)
{
	trt__ProfileCapabilities *_p = ::soap_new_trt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
	}
	return _p;
}

inline int soap_write_trt__ProfileCapabilities(struct soap *soap, trt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_trt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_trt__ProfileCapabilities(struct soap *soap, const char *URL, trt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_trt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__ProfileCapabilities(struct soap *soap, const char *URL, trt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_trt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__ProfileCapabilities(struct soap *soap, const char *URL, trt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_trt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 trt__ProfileCapabilities * SOAP_FMAC4 soap_get_trt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *, const char*, const char*);

inline int soap_read_trt__ProfileCapabilities(struct soap *soap, trt__ProfileCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_trt__ProfileCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__ProfileCapabilities(struct soap *soap, const char *URL, trt__ProfileCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__ProfileCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__ProfileCapabilities(struct soap *soap, trt__ProfileCapabilities *p)
{
	if (::soap_read_trt__ProfileCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_trt__Capabilities_DEFINED
#define SOAP_TYPE_trt__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_trt__Capabilities(struct soap*, const char*, int, const trt__Capabilities *, const char*);
SOAP_FMAC3 trt__Capabilities * SOAP_FMAC4 soap_in_trt__Capabilities(struct soap*, const char*, trt__Capabilities *, const char*);
SOAP_FMAC1 trt__Capabilities * SOAP_FMAC2 soap_instantiate_trt__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline trt__Capabilities * soap_new_trt__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_trt__Capabilities(soap, n, NULL, NULL, NULL);
}

inline trt__Capabilities * soap_new_req_trt__Capabilities(
	struct soap *soap,
	trt__ProfileCapabilities *ProfileCapabilities,
	trt__StreamingCapabilities *StreamingCapabilities)
{
	trt__Capabilities *_p = ::soap_new_trt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__Capabilities::ProfileCapabilities = ProfileCapabilities;
		_p->trt__Capabilities::StreamingCapabilities = StreamingCapabilities;
	}
	return _p;
}

inline trt__Capabilities * soap_new_set_trt__Capabilities(
	struct soap *soap,
	trt__ProfileCapabilities *ProfileCapabilities,
	trt__StreamingCapabilities *StreamingCapabilities,
	bool *SnapshotUri,
	bool *Rotation,
	bool *VideoSourceMode,
	bool *OSD,
	bool *TemporaryOSDText,
	bool *EXICompression)
{
	trt__Capabilities *_p = ::soap_new_trt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->trt__Capabilities::ProfileCapabilities = ProfileCapabilities;
		_p->trt__Capabilities::StreamingCapabilities = StreamingCapabilities;
		_p->trt__Capabilities::SnapshotUri = SnapshotUri;
		_p->trt__Capabilities::Rotation = Rotation;
		_p->trt__Capabilities::VideoSourceMode = VideoSourceMode;
		_p->trt__Capabilities::OSD = OSD;
		_p->trt__Capabilities::TemporaryOSDText = TemporaryOSDText;
		_p->trt__Capabilities::EXICompression = EXICompression;
	}
	return _p;
}

inline int soap_write_trt__Capabilities(struct soap *soap, trt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:Capabilities", p->soap_type() == SOAP_TYPE_trt__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_trt__Capabilities(struct soap *soap, const char *URL, trt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:Capabilities", p->soap_type() == SOAP_TYPE_trt__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_trt__Capabilities(struct soap *soap, const char *URL, trt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:Capabilities", p->soap_type() == SOAP_TYPE_trt__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_trt__Capabilities(struct soap *soap, const char *URL, trt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "trt:Capabilities", p->soap_type() == SOAP_TYPE_trt__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 trt__Capabilities * SOAP_FMAC4 soap_get_trt__Capabilities(struct soap*, trt__Capabilities *, const char*, const char*);

inline int soap_read_trt__Capabilities(struct soap *soap, trt__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_trt__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_trt__Capabilities(struct soap *soap, const char *URL, trt__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_trt__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_trt__Capabilities(struct soap *soap, trt__Capabilities *p)
{
	if (::soap_read_trt__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsnt__FilterType_DEFINED
#define SOAP_TYPE_wsnt__FilterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap*, const char*, int, const wsnt__FilterType *, const char*);
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap*, const char*, wsnt__FilterType *, const char*);
SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__FilterType * soap_new_wsnt__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__FilterType(soap, n, NULL, NULL, NULL);
}

inline wsnt__FilterType * soap_new_req_wsnt__FilterType(
	struct soap *soap)
{
	wsnt__FilterType *_p = ::soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wsnt__FilterType * soap_new_set_wsnt__FilterType(
	struct soap *soap)
{
	wsnt__FilterType *_p = ::soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_wsnt__FilterType(struct soap *soap, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap*, wsnt__FilterType *, const char*, const char*);

inline int soap_read_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__FilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__FilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p)
{
	if (::soap_read_wsnt__FilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__GeoLocation_DEFINED
#define SOAP_TYPE_tt__GeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoLocation(struct soap*, const char*, int, const tt__GeoLocation *, const char*);
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_in_tt__GeoLocation(struct soap*, const char*, tt__GeoLocation *, const char*);
SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoLocation * soap_new_tt__GeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GeoLocation(soap, n, NULL, NULL, NULL);
}

inline tt__GeoLocation * soap_new_req_tt__GeoLocation(
	struct soap *soap)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GeoLocation * soap_new_set_tt__GeoLocation(
	struct soap *soap,
	double *lon,
	double *lat,
	float *elevation)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GeoLocation::lon = lon;
		_p->tt__GeoLocation::lat = lat;
		_p->tt__GeoLocation::elevation = elevation;
	}
	return _p;
}

inline int soap_write_tt__GeoLocation(struct soap *soap, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_get_tt__GeoLocation(struct soap*, tt__GeoLocation *, const char*, const char*);

inline int soap_read_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__GeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Color_DEFINED
#define SOAP_TYPE_tt__Color_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Color(struct soap*, const char*, int, const tt__Color *, const char*);
SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_in_tt__Color(struct soap*, const char*, tt__Color *, const char*);
SOAP_FMAC1 tt__Color * SOAP_FMAC2 soap_instantiate_tt__Color(struct soap*, int, const char*, const char*, size_t*);

inline tt__Color * soap_new_tt__Color(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Color(soap, n, NULL, NULL, NULL);
}

inline tt__Color * soap_new_req_tt__Color(
	struct soap *soap,
	float X,
	float Y,
	float Z)
{
	tt__Color *_p = ::soap_new_tt__Color(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Color::X = X;
		_p->tt__Color::Y = Y;
		_p->tt__Color::Z = Z;
	}
	return _p;
}

inline tt__Color * soap_new_set_tt__Color(
	struct soap *soap,
	float X,
	float Y,
	float Z,
	std::string *Colorspace)
{
	tt__Color *_p = ::soap_new_tt__Color(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Color::X = X;
		_p->tt__Color::Y = Y;
		_p->tt__Color::Z = Z;
		_p->tt__Color::Colorspace = Colorspace;
	}
	return _p;
}

inline int soap_write_tt__Color(struct soap *soap, tt__Color const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Color", p->soap_type() == SOAP_TYPE_tt__Color ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Color(struct soap *soap, const char *URL, tt__Color const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Color", p->soap_type() == SOAP_TYPE_tt__Color ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Color(struct soap *soap, const char *URL, tt__Color const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Color", p->soap_type() == SOAP_TYPE_tt__Color ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Color(struct soap *soap, const char *URL, tt__Color const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Color", p->soap_type() == SOAP_TYPE_tt__Color ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_get_tt__Color(struct soap*, tt__Color *, const char*, const char*);

inline int soap_read_tt__Color(struct soap *soap, tt__Color *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Color(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Color(struct soap *soap, const char *URL, tt__Color *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Color(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Color(struct soap *soap, tt__Color *p)
{
	if (::soap_read_tt__Color(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Rectangle_DEFINED
#define SOAP_TYPE_tt__Rectangle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rectangle(struct soap*, const char*, int, const tt__Rectangle *, const char*);
SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_in_tt__Rectangle(struct soap*, const char*, tt__Rectangle *, const char*);
SOAP_FMAC1 tt__Rectangle * SOAP_FMAC2 soap_instantiate_tt__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rectangle * soap_new_tt__Rectangle(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Rectangle(soap, n, NULL, NULL, NULL);
}

inline tt__Rectangle * soap_new_req_tt__Rectangle(
	struct soap *soap)
{
	tt__Rectangle *_p = ::soap_new_tt__Rectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Rectangle * soap_new_set_tt__Rectangle(
	struct soap *soap,
	float *bottom,
	float *top,
	float *right,
	float *left)
{
	tt__Rectangle *_p = ::soap_new_tt__Rectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rectangle::bottom = bottom;
		_p->tt__Rectangle::top = top;
		_p->tt__Rectangle::right = right;
		_p->tt__Rectangle::left = left;
	}
	return _p;
}

inline int soap_write_tt__Rectangle(struct soap *soap, tt__Rectangle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rectangle", p->soap_type() == SOAP_TYPE_tt__Rectangle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Rectangle(struct soap *soap, const char *URL, tt__Rectangle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rectangle", p->soap_type() == SOAP_TYPE_tt__Rectangle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Rectangle(struct soap *soap, const char *URL, tt__Rectangle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rectangle", p->soap_type() == SOAP_TYPE_tt__Rectangle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Rectangle(struct soap *soap, const char *URL, tt__Rectangle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rectangle", p->soap_type() == SOAP_TYPE_tt__Rectangle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_get_tt__Rectangle(struct soap*, tt__Rectangle *, const char*, const char*);

inline int soap_read_tt__Rectangle(struct soap *soap, tt__Rectangle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Rectangle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Rectangle(struct soap *soap, const char *URL, tt__Rectangle *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Rectangle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Rectangle(struct soap *soap, tt__Rectangle *p)
{
	if (::soap_read_tt__Rectangle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector_DEFINED
#define SOAP_TYPE_tt__Vector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector(struct soap*, const char*, int, const tt__Vector *, const char*);
SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_in_tt__Vector(struct soap*, const char*, tt__Vector *, const char*);
SOAP_FMAC1 tt__Vector * SOAP_FMAC2 soap_instantiate_tt__Vector(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector * soap_new_tt__Vector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector(soap, n, NULL, NULL, NULL);
}

inline tt__Vector * soap_new_req_tt__Vector(
	struct soap *soap)
{
	tt__Vector *_p = ::soap_new_tt__Vector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Vector * soap_new_set_tt__Vector(
	struct soap *soap,
	float *x,
	float *y)
{
	tt__Vector *_p = ::soap_new_tt__Vector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector::x = x;
		_p->tt__Vector::y = y;
	}
	return _p;
}

inline int soap_write_tt__Vector(struct soap *soap, tt__Vector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector", p->soap_type() == SOAP_TYPE_tt__Vector ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector(struct soap *soap, const char *URL, tt__Vector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector", p->soap_type() == SOAP_TYPE_tt__Vector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector(struct soap *soap, const char *URL, tt__Vector const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector", p->soap_type() == SOAP_TYPE_tt__Vector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector(struct soap *soap, const char *URL, tt__Vector const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector", p->soap_type() == SOAP_TYPE_tt__Vector ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_get_tt__Vector(struct soap*, tt__Vector *, const char*, const char*);

inline int soap_read_tt__Vector(struct soap *soap, tt__Vector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector(struct soap *soap, const char *URL, tt__Vector *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector(struct soap *soap, tt__Vector *p)
{
	if (::soap_read_tt__Vector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus_DEFINED
#define SOAP_TYPE_tt__PTZMoveStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZMoveStatus(struct soap*, const char*, int, const tt__PTZMoveStatus *, const char*);
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_in_tt__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus *, const char*);
SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZMoveStatus * soap_new_tt__PTZMoveStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZMoveStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZMoveStatus * soap_new_req_tt__PTZMoveStatus(
	struct soap *soap)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZMoveStatus * soap_new_set_tt__PTZMoveStatus(
	struct soap *soap,
	enum tt__MoveStatus *PanTilt,
	enum tt__MoveStatus *Zoom)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZMoveStatus::PanTilt = PanTilt;
		_p->tt__PTZMoveStatus::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_get_tt__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *, const char*, const char*);

inline int soap_read_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZMoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatus_DEFINED
#define SOAP_TYPE_tt__PTZStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatus(struct soap*, const char*, int, const tt__PTZStatus *, const char*);
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_in_tt__PTZStatus(struct soap*, const char*, tt__PTZStatus *, const char*);
SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatus * soap_new_tt__PTZStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatus * soap_new_req_tt__PTZStatus(
	struct soap *soap,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__PTZStatus * soap_new_set_tt__PTZStatus(
	struct soap *soap,
	tt__PTZVector *Position,
	tt__PTZMoveStatus *MoveStatus,
	std::string *Error,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::Position = Position;
		_p->tt__PTZStatus::MoveStatus = MoveStatus;
		_p->tt__PTZStatus::Error = Error;
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline int soap_write_tt__PTZStatus(struct soap *soap, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_get_tt__PTZStatus(struct soap*, tt__PTZStatus *, const char*, const char*);

inline int soap_read_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZVector_DEFINED
#define SOAP_TYPE_tt__PTZVector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZVector(struct soap*, const char*, int, const tt__PTZVector *, const char*);
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_in_tt__PTZVector(struct soap*, const char*, tt__PTZVector *, const char*);
SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZVector * soap_new_tt__PTZVector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZVector(soap, n, NULL, NULL, NULL);
}

inline tt__PTZVector * soap_new_req_tt__PTZVector(
	struct soap *soap)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZVector * soap_new_set_tt__PTZVector(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZVector::PanTilt = PanTilt;
		_p->tt__PTZVector::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZVector(struct soap *soap, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_get_tt__PTZVector(struct soap*, tt__PTZVector *, const char*, const char*);

inline int soap_read_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZVector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector1D_DEFINED
#define SOAP_TYPE_tt__Vector1D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector1D(struct soap*, const char*, int, const tt__Vector1D *, const char*);
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_in_tt__Vector1D(struct soap*, const char*, tt__Vector1D *, const char*);
SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector1D * soap_new_tt__Vector1D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector1D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector1D * soap_new_req_tt__Vector1D(
	struct soap *soap,
	float x)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
	}
	return _p;
}

inline tt__Vector1D * soap_new_set_tt__Vector1D(
	struct soap *soap,
	float x,
	std::string *space)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
		_p->tt__Vector1D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector1D(struct soap *soap, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_get_tt__Vector1D(struct soap*, tt__Vector1D *, const char*, const char*);

inline int soap_read_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector1D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector2D_DEFINED
#define SOAP_TYPE_tt__Vector2D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector2D(struct soap*, const char*, int, const tt__Vector2D *, const char*);
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_in_tt__Vector2D(struct soap*, const char*, tt__Vector2D *, const char*);
SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector2D * soap_new_tt__Vector2D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector2D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector2D * soap_new_req_tt__Vector2D(
	struct soap *soap,
	float x,
	float y)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
	}
	return _p;
}

inline tt__Vector2D * soap_new_set_tt__Vector2D(
	struct soap *soap,
	float x,
	float y,
	std::string *space)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
		_p->tt__Vector2D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector2D(struct soap *soap, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_get_tt__Vector2D(struct soap*, tt__Vector2D *, const char*, const char*);

inline int soap_read_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector2D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRange_DEFINED
#define SOAP_TYPE_tt__IntRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);
SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRange * soap_new_req_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline tt__IntRange * soap_new_set_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__IntRange(struct soap *soap, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

inline int soap_read_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, int, const tt__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptionsExtension * soap_new_tt__OSDConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationOptionsExtension * soap_new_req_tt__OSDConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__OSDConfigurationOptionsExtension *_p = ::soap_new_tt__OSDConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDConfigurationOptionsExtension * soap_new_set_tt__OSDConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__OSDConfigurationOptionsExtension *_p = ::soap_new_tt__OSDConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__OSDConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__OSDConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__OSDConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__OSDConfigurationOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension *p)
{
	if (::soap_read_tt__OSDConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptions(struct soap*, const char*, int, const tt__OSDConfigurationOptions *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions *, const char*);
SOAP_FMAC1 tt__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptions * soap_new_tt__OSDConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationOptions * soap_new_req_tt__OSDConfigurationOptions(
	struct soap *soap,
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs,
	const std::vector<enum tt__OSDType> & Type,
	const std::vector<std::string> & PositionOption)
{
	tt__OSDConfigurationOptions *_p = ::soap_new_tt__OSDConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs;
		_p->tt__OSDConfigurationOptions::Type = Type;
		_p->tt__OSDConfigurationOptions::PositionOption = PositionOption;
	}
	return _p;
}

inline tt__OSDConfigurationOptions * soap_new_set_tt__OSDConfigurationOptions(
	struct soap *soap,
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs,
	const std::vector<enum tt__OSDType> & Type,
	const std::vector<std::string> & PositionOption,
	tt__OSDTextOptions *TextOption,
	tt__OSDImgOptions *ImageOption,
	tt__OSDConfigurationOptionsExtension *Extension)
{
	tt__OSDConfigurationOptions *_p = ::soap_new_tt__OSDConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs;
		_p->tt__OSDConfigurationOptions::Type = Type;
		_p->tt__OSDConfigurationOptions::PositionOption = PositionOption;
		_p->tt__OSDConfigurationOptions::TextOption = TextOption;
		_p->tt__OSDConfigurationOptions::ImageOption = ImageOption;
		_p->tt__OSDConfigurationOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDConfigurationOptions(struct soap *soap, const char *URL, tt__OSDConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDConfigurationOptions(struct soap *soap, const char *URL, tt__OSDConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDConfigurationOptions(struct soap *soap, const char *URL, tt__OSDConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDConfigurationOptions(struct soap *soap, const char *URL, tt__OSDConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions *p)
{
	if (::soap_read_tt__OSDConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs_DEFINED
#define SOAP_TYPE_tt__MaximumNumberOfOSDs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MaximumNumberOfOSDs(struct soap*, const char*, int, const tt__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_in_tt__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC1 tt__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_tt__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);

inline tt__MaximumNumberOfOSDs * soap_new_tt__MaximumNumberOfOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MaximumNumberOfOSDs(soap, n, NULL, NULL, NULL);
}

inline tt__MaximumNumberOfOSDs * soap_new_req_tt__MaximumNumberOfOSDs(
	struct soap *soap,
	int Total)
{
	tt__MaximumNumberOfOSDs *_p = ::soap_new_tt__MaximumNumberOfOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MaximumNumberOfOSDs::Total = Total;
	}
	return _p;
}

inline tt__MaximumNumberOfOSDs * soap_new_set_tt__MaximumNumberOfOSDs(
	struct soap *soap,
	int Total,
	int *Image,
	int *PlainText,
	int *Date,
	int *Time,
	int *DateAndTime)
{
	tt__MaximumNumberOfOSDs *_p = ::soap_new_tt__MaximumNumberOfOSDs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MaximumNumberOfOSDs::Total = Total;
		_p->tt__MaximumNumberOfOSDs::Image = Image;
		_p->tt__MaximumNumberOfOSDs::PlainText = PlainText;
		_p->tt__MaximumNumberOfOSDs::Date = Date;
		_p->tt__MaximumNumberOfOSDs::Time = Time;
		_p->tt__MaximumNumberOfOSDs::DateAndTime = DateAndTime;
	}
	return _p;
}

inline int soap_write_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MaximumNumberOfOSDs", p->soap_type() == SOAP_TYPE_tt__MaximumNumberOfOSDs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MaximumNumberOfOSDs(struct soap *soap, const char *URL, tt__MaximumNumberOfOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MaximumNumberOfOSDs", p->soap_type() == SOAP_TYPE_tt__MaximumNumberOfOSDs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MaximumNumberOfOSDs(struct soap *soap, const char *URL, tt__MaximumNumberOfOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MaximumNumberOfOSDs", p->soap_type() == SOAP_TYPE_tt__MaximumNumberOfOSDs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MaximumNumberOfOSDs(struct soap *soap, const char *URL, tt__MaximumNumberOfOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MaximumNumberOfOSDs", p->soap_type() == SOAP_TYPE_tt__MaximumNumberOfOSDs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_get_tt__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *, const char*, const char*);

inline int soap_read_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MaximumNumberOfOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MaximumNumberOfOSDs(struct soap *soap, const char *URL, tt__MaximumNumberOfOSDs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MaximumNumberOfOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs *p)
{
	if (::soap_read_tt__MaximumNumberOfOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationExtension(struct soap*, const char*, int, const tt__OSDConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationExtension * soap_new_tt__OSDConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfigurationExtension * soap_new_req_tt__OSDConfigurationExtension(
	struct soap *soap)
{
	tt__OSDConfigurationExtension *_p = ::soap_new_tt__OSDConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDConfigurationExtension * soap_new_set_tt__OSDConfigurationExtension(
	struct soap *soap)
{
	tt__OSDConfigurationExtension *_p = ::soap_new_tt__OSDConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDConfigurationExtension(struct soap *soap, const char *URL, tt__OSDConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDConfigurationExtension(struct soap *soap, const char *URL, tt__OSDConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDConfigurationExtension(struct soap *soap, const char *URL, tt__OSDConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDConfigurationExtension(struct soap *soap, const char *URL, tt__OSDConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension *p)
{
	if (::soap_read_tt__OSDConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfiguration(struct soap*, const char*, int, const tt__OSDConfiguration *, const char*);
SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_in_tt__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration *, const char*);
SOAP_FMAC1 tt__OSDConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfiguration * soap_new_tt__OSDConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDConfiguration * soap_new_req_tt__OSDConfiguration(
	struct soap *soap,
	tt__OSDReference *VideoSourceConfigurationToken,
	enum tt__OSDType Type,
	tt__OSDPosConfiguration *Position,
	const std::string& token__1)
{
	tt__OSDConfiguration *_p = ::soap_new_tt__OSDConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken;
		_p->tt__OSDConfiguration::Type = Type;
		_p->tt__OSDConfiguration::Position = Position;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__OSDConfiguration * soap_new_set_tt__OSDConfiguration(
	struct soap *soap,
	tt__OSDReference *VideoSourceConfigurationToken,
	enum tt__OSDType Type,
	tt__OSDPosConfiguration *Position,
	tt__OSDTextConfiguration *TextString,
	tt__OSDImgConfiguration *Image,
	tt__OSDConfigurationExtension *Extension,
	const std::string& token__1)
{
	tt__OSDConfiguration *_p = ::soap_new_tt__OSDConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken;
		_p->tt__OSDConfiguration::Type = Type;
		_p->tt__OSDConfiguration::Position = Position;
		_p->tt__OSDConfiguration::TextString = TextString;
		_p->tt__OSDConfiguration::Image = Image;
		_p->tt__OSDConfiguration::Extension = Extension;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDConfiguration(struct soap *soap, const char *URL, tt__OSDConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDConfiguration(struct soap *soap, const char *URL, tt__OSDConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDConfiguration(struct soap *soap, const char *URL, tt__OSDConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_get_tt__OSDConfiguration(struct soap*, tt__OSDConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDConfiguration(struct soap *soap, const char *URL, tt__OSDConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration *p)
{
	if (::soap_read_tt__OSDConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDImgOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptionsExtension(struct soap*, const char*, int, const tt__OSDImgOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptionsExtension * soap_new_tt__OSDImgOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgOptionsExtension * soap_new_req_tt__OSDImgOptionsExtension(
	struct soap *soap)
{
	tt__OSDImgOptionsExtension *_p = ::soap_new_tt__OSDImgOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDImgOptionsExtension * soap_new_set_tt__OSDImgOptionsExtension(
	struct soap *soap)
{
	tt__OSDImgOptionsExtension *_p = ::soap_new_tt__OSDImgOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDImgOptionsExtension(struct soap *soap, const char *URL, tt__OSDImgOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDImgOptionsExtension(struct soap *soap, const char *URL, tt__OSDImgOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDImgOptionsExtension(struct soap *soap, const char *URL, tt__OSDImgOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDImgOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDImgOptionsExtension(struct soap *soap, const char *URL, tt__OSDImgOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDImgOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension *p)
{
	if (::soap_read_tt__OSDImgOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptions_DEFINED
#define SOAP_TYPE_tt__OSDImgOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptions(struct soap*, const char*, int, const tt__OSDImgOptions *, const char*);
SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_in_tt__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions *, const char*);
SOAP_FMAC1 tt__OSDImgOptions * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptions * soap_new_tt__OSDImgOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgOptions * soap_new_req_tt__OSDImgOptions(
	struct soap *soap,
	const std::vector<std::string> & ImagePath)
{
	tt__OSDImgOptions *_p = ::soap_new_tt__OSDImgOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgOptions::ImagePath = ImagePath;
	}
	return _p;
}

inline tt__OSDImgOptions * soap_new_set_tt__OSDImgOptions(
	struct soap *soap,
	const std::vector<std::string> & ImagePath,
	tt__OSDImgOptionsExtension *Extension,
	std::string *FormatsSupported,
	int *MaxSize,
	int *MaxWidth,
	int *MaxHeight)
{
	tt__OSDImgOptions *_p = ::soap_new_tt__OSDImgOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgOptions::ImagePath = ImagePath;
		_p->tt__OSDImgOptions::Extension = Extension;
		_p->tt__OSDImgOptions::FormatsSupported = FormatsSupported;
		_p->tt__OSDImgOptions::MaxSize = MaxSize;
		_p->tt__OSDImgOptions::MaxWidth = MaxWidth;
		_p->tt__OSDImgOptions::MaxHeight = MaxHeight;
	}
	return _p;
}

inline int soap_write_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptions", p->soap_type() == SOAP_TYPE_tt__OSDImgOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDImgOptions(struct soap *soap, const char *URL, tt__OSDImgOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptions", p->soap_type() == SOAP_TYPE_tt__OSDImgOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDImgOptions(struct soap *soap, const char *URL, tt__OSDImgOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptions", p->soap_type() == SOAP_TYPE_tt__OSDImgOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDImgOptions(struct soap *soap, const char *URL, tt__OSDImgOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgOptions", p->soap_type() == SOAP_TYPE_tt__OSDImgOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_get_tt__OSDImgOptions(struct soap*, tt__OSDImgOptions *, const char*, const char*);

inline int soap_read_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDImgOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDImgOptions(struct soap *soap, const char *URL, tt__OSDImgOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDImgOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions *p)
{
	if (::soap_read_tt__OSDImgOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDTextOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptionsExtension(struct soap*, const char*, int, const tt__OSDTextOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptionsExtension * soap_new_tt__OSDTextOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextOptionsExtension * soap_new_req_tt__OSDTextOptionsExtension(
	struct soap *soap)
{
	tt__OSDTextOptionsExtension *_p = ::soap_new_tt__OSDTextOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDTextOptionsExtension * soap_new_set_tt__OSDTextOptionsExtension(
	struct soap *soap)
{
	tt__OSDTextOptionsExtension *_p = ::soap_new_tt__OSDTextOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDTextOptionsExtension(struct soap *soap, const char *URL, tt__OSDTextOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDTextOptionsExtension(struct soap *soap, const char *URL, tt__OSDTextOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDTextOptionsExtension(struct soap *soap, const char *URL, tt__OSDTextOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDTextOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDTextOptionsExtension(struct soap *soap, const char *URL, tt__OSDTextOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDTextOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension *p)
{
	if (::soap_read_tt__OSDTextOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptions_DEFINED
#define SOAP_TYPE_tt__OSDTextOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptions(struct soap*, const char*, int, const tt__OSDTextOptions *, const char*);
SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_in_tt__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions *, const char*);
SOAP_FMAC1 tt__OSDTextOptions * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptions * soap_new_tt__OSDTextOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextOptions * soap_new_req_tt__OSDTextOptions(
	struct soap *soap,
	const std::vector<std::string> & Type)
{
	tt__OSDTextOptions *_p = ::soap_new_tt__OSDTextOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextOptions::Type = Type;
	}
	return _p;
}

inline tt__OSDTextOptions * soap_new_set_tt__OSDTextOptions(
	struct soap *soap,
	const std::vector<std::string> & Type,
	tt__IntRange *FontSizeRange,
	const std::vector<std::string> & DateFormat,
	const std::vector<std::string> & TimeFormat,
	tt__OSDColorOptions *FontColor,
	tt__OSDColorOptions *BackgroundColor,
	tt__OSDTextOptionsExtension *Extension)
{
	tt__OSDTextOptions *_p = ::soap_new_tt__OSDTextOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextOptions::Type = Type;
		_p->tt__OSDTextOptions::FontSizeRange = FontSizeRange;
		_p->tt__OSDTextOptions::DateFormat = DateFormat;
		_p->tt__OSDTextOptions::TimeFormat = TimeFormat;
		_p->tt__OSDTextOptions::FontColor = FontColor;
		_p->tt__OSDTextOptions::BackgroundColor = BackgroundColor;
		_p->tt__OSDTextOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptions", p->soap_type() == SOAP_TYPE_tt__OSDTextOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDTextOptions(struct soap *soap, const char *URL, tt__OSDTextOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptions", p->soap_type() == SOAP_TYPE_tt__OSDTextOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDTextOptions(struct soap *soap, const char *URL, tt__OSDTextOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptions", p->soap_type() == SOAP_TYPE_tt__OSDTextOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDTextOptions(struct soap *soap, const char *URL, tt__OSDTextOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextOptions", p->soap_type() == SOAP_TYPE_tt__OSDTextOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_get_tt__OSDTextOptions(struct soap*, tt__OSDTextOptions *, const char*, const char*);

inline int soap_read_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDTextOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDTextOptions(struct soap *soap, const char *URL, tt__OSDTextOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDTextOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions *p)
{
	if (::soap_read_tt__OSDTextOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension_DEFINED
#define SOAP_TYPE_tt__OSDColorOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptionsExtension(struct soap*, const char*, int, const tt__OSDColorOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension *, const char*);
SOAP_FMAC1 tt__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptionsExtension * soap_new_tt__OSDColorOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColorOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColorOptionsExtension * soap_new_req_tt__OSDColorOptionsExtension(
	struct soap *soap)
{
	tt__OSDColorOptionsExtension *_p = ::soap_new_tt__OSDColorOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDColorOptionsExtension * soap_new_set_tt__OSDColorOptionsExtension(
	struct soap *soap)
{
	tt__OSDColorOptionsExtension *_p = ::soap_new_tt__OSDColorOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDColorOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDColorOptionsExtension(struct soap *soap, const char *URL, tt__OSDColorOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDColorOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDColorOptionsExtension(struct soap *soap, const char *URL, tt__OSDColorOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDColorOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDColorOptionsExtension(struct soap *soap, const char *URL, tt__OSDColorOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptionsExtension", p->soap_type() == SOAP_TYPE_tt__OSDColorOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *, const char*, const char*);

inline int soap_read_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDColorOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDColorOptionsExtension(struct soap *soap, const char *URL, tt__OSDColorOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDColorOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension *p)
{
	if (::soap_read_tt__OSDColorOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptions_DEFINED
#define SOAP_TYPE_tt__OSDColorOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptions(struct soap*, const char*, int, const tt__OSDColorOptions *, const char*);
SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_in_tt__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions *, const char*);
SOAP_FMAC1 tt__OSDColorOptions * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptions * soap_new_tt__OSDColorOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColorOptions(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColorOptions * soap_new_req_tt__OSDColorOptions(
	struct soap *soap)
{
	tt__OSDColorOptions *_p = ::soap_new_tt__OSDColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDColorOptions * soap_new_set_tt__OSDColorOptions(
	struct soap *soap,
	tt__ColorOptions *Color,
	tt__IntRange *Transparent,
	tt__OSDColorOptionsExtension *Extension)
{
	tt__OSDColorOptions *_p = ::soap_new_tt__OSDColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColorOptions::Color = Color;
		_p->tt__OSDColorOptions::Transparent = Transparent;
		_p->tt__OSDColorOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptions", p->soap_type() == SOAP_TYPE_tt__OSDColorOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDColorOptions(struct soap *soap, const char *URL, tt__OSDColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptions", p->soap_type() == SOAP_TYPE_tt__OSDColorOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDColorOptions(struct soap *soap, const char *URL, tt__OSDColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptions", p->soap_type() == SOAP_TYPE_tt__OSDColorOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDColorOptions(struct soap *soap, const char *URL, tt__OSDColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColorOptions", p->soap_type() == SOAP_TYPE_tt__OSDColorOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_get_tt__OSDColorOptions(struct soap*, tt__OSDColorOptions *, const char*, const char*);

inline int soap_read_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDColorOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDColorOptions(struct soap *soap, const char *URL, tt__OSDColorOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDColorOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions *p)
{
	if (::soap_read_tt__OSDColorOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ColorOptions_DEFINED
#define SOAP_TYPE_tt__ColorOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorOptions(struct soap*, const char*, int, const tt__ColorOptions *, const char*);
SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_in_tt__ColorOptions(struct soap*, const char*, tt__ColorOptions *, const char*);
SOAP_FMAC1 tt__ColorOptions * SOAP_FMAC2 soap_instantiate_tt__ColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorOptions * soap_new_tt__ColorOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ColorOptions * soap_new_req_tt__ColorOptions(
	struct soap *soap,
	const union _tt__union_ColorOptions& union_ColorOptions)
{
	tt__ColorOptions *_p = ::soap_new_tt__ColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorOptions::union_ColorOptions = union_ColorOptions;
	}
	return _p;
}

inline tt__ColorOptions * soap_new_set_tt__ColorOptions(
	struct soap *soap,
	int __union_ColorOptions,
	const union _tt__union_ColorOptions& union_ColorOptions)
{
	tt__ColorOptions *_p = ::soap_new_tt__ColorOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorOptions::__union_ColorOptions = __union_ColorOptions;
		_p->tt__ColorOptions::union_ColorOptions = union_ColorOptions;
	}
	return _p;
}

inline int soap_write_tt__ColorOptions(struct soap *soap, tt__ColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorOptions", p->soap_type() == SOAP_TYPE_tt__ColorOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ColorOptions(struct soap *soap, const char *URL, tt__ColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorOptions", p->soap_type() == SOAP_TYPE_tt__ColorOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ColorOptions(struct soap *soap, const char *URL, tt__ColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorOptions", p->soap_type() == SOAP_TYPE_tt__ColorOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ColorOptions(struct soap *soap, const char *URL, tt__ColorOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorOptions", p->soap_type() == SOAP_TYPE_tt__ColorOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_get_tt__ColorOptions(struct soap*, tt__ColorOptions *, const char*, const char*);

inline int soap_read_tt__ColorOptions(struct soap *soap, tt__ColorOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ColorOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ColorOptions(struct soap *soap, const char *URL, tt__ColorOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ColorOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ColorOptions(struct soap *soap, tt__ColorOptions *p)
{
	if (::soap_read_tt__ColorOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ColorspaceRange_DEFINED
#define SOAP_TYPE_tt__ColorspaceRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorspaceRange(struct soap*, const char*, int, const tt__ColorspaceRange *, const char*);
SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_in_tt__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange *, const char*);
SOAP_FMAC1 tt__ColorspaceRange * SOAP_FMAC2 soap_instantiate_tt__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorspaceRange * soap_new_tt__ColorspaceRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ColorspaceRange(soap, n, NULL, NULL, NULL);
}

inline tt__ColorspaceRange * soap_new_req_tt__ColorspaceRange(
	struct soap *soap,
	tt__FloatRange *X,
	tt__FloatRange *Y,
	tt__FloatRange *Z,
	const std::string& Colorspace)
{
	tt__ColorspaceRange *_p = ::soap_new_tt__ColorspaceRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorspaceRange::X = X;
		_p->tt__ColorspaceRange::Y = Y;
		_p->tt__ColorspaceRange::Z = Z;
		_p->tt__ColorspaceRange::Colorspace = Colorspace;
	}
	return _p;
}

inline tt__ColorspaceRange * soap_new_set_tt__ColorspaceRange(
	struct soap *soap,
	tt__FloatRange *X,
	tt__FloatRange *Y,
	tt__FloatRange *Z,
	const std::string& Colorspace)
{
	tt__ColorspaceRange *_p = ::soap_new_tt__ColorspaceRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ColorspaceRange::X = X;
		_p->tt__ColorspaceRange::Y = Y;
		_p->tt__ColorspaceRange::Z = Z;
		_p->tt__ColorspaceRange::Colorspace = Colorspace;
	}
	return _p;
}

inline int soap_write_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorspaceRange", p->soap_type() == SOAP_TYPE_tt__ColorspaceRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ColorspaceRange(struct soap *soap, const char *URL, tt__ColorspaceRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorspaceRange", p->soap_type() == SOAP_TYPE_tt__ColorspaceRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ColorspaceRange(struct soap *soap, const char *URL, tt__ColorspaceRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorspaceRange", p->soap_type() == SOAP_TYPE_tt__ColorspaceRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ColorspaceRange(struct soap *soap, const char *URL, tt__ColorspaceRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ColorspaceRange", p->soap_type() == SOAP_TYPE_tt__ColorspaceRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_get_tt__ColorspaceRange(struct soap*, tt__ColorspaceRange *, const char*, const char*);

inline int soap_read_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ColorspaceRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ColorspaceRange(struct soap *soap, const char *URL, tt__ColorspaceRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ColorspaceRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange *p)
{
	if (::soap_read_tt__ColorspaceRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDImgConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfigurationExtension(struct soap*, const char*, int, const tt__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfigurationExtension * soap_new_tt__OSDImgConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgConfigurationExtension * soap_new_req_tt__OSDImgConfigurationExtension(
	struct soap *soap)
{
	tt__OSDImgConfigurationExtension *_p = ::soap_new_tt__OSDImgConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDImgConfigurationExtension * soap_new_set_tt__OSDImgConfigurationExtension(
	struct soap *soap)
{
	tt__OSDImgConfigurationExtension *_p = ::soap_new_tt__OSDImgConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDImgConfigurationExtension(struct soap *soap, const char *URL, tt__OSDImgConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDImgConfigurationExtension(struct soap *soap, const char *URL, tt__OSDImgConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDImgConfigurationExtension(struct soap *soap, const char *URL, tt__OSDImgConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDImgConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDImgConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDImgConfigurationExtension(struct soap *soap, const char *URL, tt__OSDImgConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDImgConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension *p)
{
	if (::soap_read_tt__OSDImgConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDImgConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfiguration(struct soap*, const char*, int, const tt__OSDImgConfiguration *, const char*);
SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_in_tt__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration *, const char*);
SOAP_FMAC1 tt__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfiguration * soap_new_tt__OSDImgConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDImgConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDImgConfiguration * soap_new_req_tt__OSDImgConfiguration(
	struct soap *soap,
	const std::string& ImgPath)
{
	tt__OSDImgConfiguration *_p = ::soap_new_tt__OSDImgConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgConfiguration::ImgPath = ImgPath;
	}
	return _p;
}

inline tt__OSDImgConfiguration * soap_new_set_tt__OSDImgConfiguration(
	struct soap *soap,
	const std::string& ImgPath,
	tt__OSDImgConfigurationExtension *Extension)
{
	tt__OSDImgConfiguration *_p = ::soap_new_tt__OSDImgConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDImgConfiguration::ImgPath = ImgPath;
		_p->tt__OSDImgConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDImgConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDImgConfiguration(struct soap *soap, const char *URL, tt__OSDImgConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDImgConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDImgConfiguration(struct soap *soap, const char *URL, tt__OSDImgConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDImgConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDImgConfiguration(struct soap *soap, const char *URL, tt__OSDImgConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDImgConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDImgConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_get_tt__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDImgConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDImgConfiguration(struct soap *soap, const char *URL, tt__OSDImgConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDImgConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration *p)
{
	if (::soap_read_tt__OSDImgConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDTextConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfigurationExtension(struct soap*, const char*, int, const tt__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfigurationExtension * soap_new_tt__OSDTextConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextConfigurationExtension * soap_new_req_tt__OSDTextConfigurationExtension(
	struct soap *soap)
{
	tt__OSDTextConfigurationExtension *_p = ::soap_new_tt__OSDTextConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDTextConfigurationExtension * soap_new_set_tt__OSDTextConfigurationExtension(
	struct soap *soap)
{
	tt__OSDTextConfigurationExtension *_p = ::soap_new_tt__OSDTextConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDTextConfigurationExtension(struct soap *soap, const char *URL, tt__OSDTextConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDTextConfigurationExtension(struct soap *soap, const char *URL, tt__OSDTextConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDTextConfigurationExtension(struct soap *soap, const char *URL, tt__OSDTextConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDTextConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDTextConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDTextConfigurationExtension(struct soap *soap, const char *URL, tt__OSDTextConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDTextConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension *p)
{
	if (::soap_read_tt__OSDTextConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDTextConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfiguration(struct soap*, const char*, int, const tt__OSDTextConfiguration *, const char*);
SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_in_tt__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration *, const char*);
SOAP_FMAC1 tt__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfiguration * soap_new_tt__OSDTextConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDTextConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDTextConfiguration * soap_new_req_tt__OSDTextConfiguration(
	struct soap *soap,
	const std::string& Type)
{
	tt__OSDTextConfiguration *_p = ::soap_new_tt__OSDTextConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextConfiguration::Type = Type;
	}
	return _p;
}

inline tt__OSDTextConfiguration * soap_new_set_tt__OSDTextConfiguration(
	struct soap *soap,
	const std::string& Type,
	std::string *DateFormat,
	std::string *TimeFormat,
	int *FontSize,
	tt__OSDColor *FontColor,
	tt__OSDColor *BackgroundColor,
	std::string *PlainText,
	tt__OSDTextConfigurationExtension *Extension,
	bool *IsPersistentText)
{
	tt__OSDTextConfiguration *_p = ::soap_new_tt__OSDTextConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDTextConfiguration::Type = Type;
		_p->tt__OSDTextConfiguration::DateFormat = DateFormat;
		_p->tt__OSDTextConfiguration::TimeFormat = TimeFormat;
		_p->tt__OSDTextConfiguration::FontSize = FontSize;
		_p->tt__OSDTextConfiguration::FontColor = FontColor;
		_p->tt__OSDTextConfiguration::BackgroundColor = BackgroundColor;
		_p->tt__OSDTextConfiguration::PlainText = PlainText;
		_p->tt__OSDTextConfiguration::Extension = Extension;
		_p->tt__OSDTextConfiguration::IsPersistentText = IsPersistentText;
	}
	return _p;
}

inline int soap_write_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDTextConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDTextConfiguration(struct soap *soap, const char *URL, tt__OSDTextConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDTextConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDTextConfiguration(struct soap *soap, const char *URL, tt__OSDTextConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDTextConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDTextConfiguration(struct soap *soap, const char *URL, tt__OSDTextConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDTextConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDTextConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_get_tt__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDTextConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDTextConfiguration(struct soap *soap, const char *URL, tt__OSDTextConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDTextConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration *p)
{
	if (::soap_read_tt__OSDTextConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDColor_DEFINED
#define SOAP_TYPE_tt__OSDColor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColor(struct soap*, const char*, int, const tt__OSDColor *, const char*);
SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_in_tt__OSDColor(struct soap*, const char*, tt__OSDColor *, const char*);
SOAP_FMAC1 tt__OSDColor * SOAP_FMAC2 soap_instantiate_tt__OSDColor(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColor * soap_new_tt__OSDColor(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDColor(soap, n, NULL, NULL, NULL);
}

inline tt__OSDColor * soap_new_req_tt__OSDColor(
	struct soap *soap,
	tt__Color *Color)
{
	tt__OSDColor *_p = ::soap_new_tt__OSDColor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColor::Color = Color;
	}
	return _p;
}

inline tt__OSDColor * soap_new_set_tt__OSDColor(
	struct soap *soap,
	tt__Color *Color,
	int *Transparent)
{
	tt__OSDColor *_p = ::soap_new_tt__OSDColor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDColor::Color = Color;
		_p->tt__OSDColor::Transparent = Transparent;
	}
	return _p;
}

inline int soap_write_tt__OSDColor(struct soap *soap, tt__OSDColor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColor", p->soap_type() == SOAP_TYPE_tt__OSDColor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDColor(struct soap *soap, const char *URL, tt__OSDColor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColor", p->soap_type() == SOAP_TYPE_tt__OSDColor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDColor(struct soap *soap, const char *URL, tt__OSDColor const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColor", p->soap_type() == SOAP_TYPE_tt__OSDColor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDColor(struct soap *soap, const char *URL, tt__OSDColor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDColor", p->soap_type() == SOAP_TYPE_tt__OSDColor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_get_tt__OSDColor(struct soap*, tt__OSDColor *, const char*, const char*);

inline int soap_read_tt__OSDColor(struct soap *soap, tt__OSDColor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDColor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDColor(struct soap *soap, const char *URL, tt__OSDColor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDColor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDColor(struct soap *soap, tt__OSDColor *p)
{
	if (::soap_read_tt__OSDColor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__OSDPosConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfigurationExtension(struct soap*, const char*, int, const tt__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC1 tt__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfigurationExtension * soap_new_tt__OSDPosConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDPosConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__OSDPosConfigurationExtension * soap_new_req_tt__OSDPosConfigurationExtension(
	struct soap *soap)
{
	tt__OSDPosConfigurationExtension *_p = ::soap_new_tt__OSDPosConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__OSDPosConfigurationExtension * soap_new_set_tt__OSDPosConfigurationExtension(
	struct soap *soap)
{
	tt__OSDPosConfigurationExtension *_p = ::soap_new_tt__OSDPosConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDPosConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDPosConfigurationExtension(struct soap *soap, const char *URL, tt__OSDPosConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDPosConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDPosConfigurationExtension(struct soap *soap, const char *URL, tt__OSDPosConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDPosConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDPosConfigurationExtension(struct soap *soap, const char *URL, tt__OSDPosConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__OSDPosConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDPosConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDPosConfigurationExtension(struct soap *soap, const char *URL, tt__OSDPosConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDPosConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension *p)
{
	if (::soap_read_tt__OSDPosConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfiguration_DEFINED
#define SOAP_TYPE_tt__OSDPosConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfiguration(struct soap*, const char*, int, const tt__OSDPosConfiguration *, const char*);
SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_in_tt__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration *, const char*);
SOAP_FMAC1 tt__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfiguration * soap_new_tt__OSDPosConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDPosConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__OSDPosConfiguration * soap_new_req_tt__OSDPosConfiguration(
	struct soap *soap,
	const std::string& Type)
{
	tt__OSDPosConfiguration *_p = ::soap_new_tt__OSDPosConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDPosConfiguration::Type = Type;
	}
	return _p;
}

inline tt__OSDPosConfiguration * soap_new_set_tt__OSDPosConfiguration(
	struct soap *soap,
	const std::string& Type,
	tt__Vector *Pos,
	tt__OSDPosConfigurationExtension *Extension)
{
	tt__OSDPosConfiguration *_p = ::soap_new_tt__OSDPosConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDPosConfiguration::Type = Type;
		_p->tt__OSDPosConfiguration::Pos = Pos;
		_p->tt__OSDPosConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDPosConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDPosConfiguration(struct soap *soap, const char *URL, tt__OSDPosConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDPosConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDPosConfiguration(struct soap *soap, const char *URL, tt__OSDPosConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDPosConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDPosConfiguration(struct soap *soap, const char *URL, tt__OSDPosConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDPosConfiguration", p->soap_type() == SOAP_TYPE_tt__OSDPosConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_get_tt__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *, const char*, const char*);

inline int soap_read_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDPosConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDPosConfiguration(struct soap *soap, const char *URL, tt__OSDPosConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDPosConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration *p)
{
	if (::soap_read_tt__OSDPosConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OSDReference_DEFINED
#define SOAP_TYPE_tt__OSDReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDReference(struct soap*, const char*, int, const tt__OSDReference *, const char*);
SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_in_tt__OSDReference(struct soap*, const char*, tt__OSDReference *, const char*);
SOAP_FMAC1 tt__OSDReference * SOAP_FMAC2 soap_instantiate_tt__OSDReference(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDReference * soap_new_tt__OSDReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OSDReference(soap, n, NULL, NULL, NULL);
}

inline tt__OSDReference * soap_new_req_tt__OSDReference(
	struct soap *soap,
	const std::string& __item)
{
	tt__OSDReference *_p = ::soap_new_tt__OSDReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDReference::__item = __item;
	}
	return _p;
}

inline tt__OSDReference * soap_new_set_tt__OSDReference(
	struct soap *soap,
	const std::string& __item)
{
	tt__OSDReference *_p = ::soap_new_tt__OSDReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OSDReference::__item = __item;
	}
	return _p;
}

inline int soap_write_tt__OSDReference(struct soap *soap, tt__OSDReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDReference", p->soap_type() == SOAP_TYPE_tt__OSDReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OSDReference(struct soap *soap, const char *URL, tt__OSDReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDReference", p->soap_type() == SOAP_TYPE_tt__OSDReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OSDReference(struct soap *soap, const char *URL, tt__OSDReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDReference", p->soap_type() == SOAP_TYPE_tt__OSDReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OSDReference(struct soap *soap, const char *URL, tt__OSDReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OSDReference", p->soap_type() == SOAP_TYPE_tt__OSDReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_get_tt__OSDReference(struct soap*, tt__OSDReference *, const char*, const char*);

inline int soap_read_tt__OSDReference(struct soap *soap, tt__OSDReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OSDReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OSDReference(struct soap *soap, const char *URL, tt__OSDReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OSDReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OSDReference(struct soap *soap, tt__OSDReference *p)
{
	if (::soap_read_tt__OSDReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Config_DEFINED
#define SOAP_TYPE_tt__Config_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Config(struct soap*, const char*, int, const tt__Config *, const char*);
SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_in_tt__Config(struct soap*, const char*, tt__Config *, const char*);
SOAP_FMAC1 tt__Config * SOAP_FMAC2 soap_instantiate_tt__Config(struct soap*, int, const char*, const char*, size_t*);

inline tt__Config * soap_new_tt__Config(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Config(soap, n, NULL, NULL, NULL);
}

inline tt__Config * soap_new_req_tt__Config(
	struct soap *soap,
	tt__ItemList *Parameters,
	const std::string& Name,
	const std::string& Type)
{
	tt__Config *_p = ::soap_new_tt__Config(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Config::Parameters = Parameters;
		_p->tt__Config::Name = Name;
		_p->tt__Config::Type = Type;
	}
	return _p;
}

inline tt__Config * soap_new_set_tt__Config(
	struct soap *soap,
	tt__ItemList *Parameters,
	const std::string& Name,
	const std::string& Type)
{
	tt__Config *_p = ::soap_new_tt__Config(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Config::Parameters = Parameters;
		_p->tt__Config::Name = Name;
		_p->tt__Config::Type = Type;
	}
	return _p;
}

inline int soap_write_tt__Config(struct soap *soap, tt__Config const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Config", p->soap_type() == SOAP_TYPE_tt__Config ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Config(struct soap *soap, const char *URL, tt__Config const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Config", p->soap_type() == SOAP_TYPE_tt__Config ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Config(struct soap *soap, const char *URL, tt__Config const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Config", p->soap_type() == SOAP_TYPE_tt__Config ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Config(struct soap *soap, const char *URL, tt__Config const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Config", p->soap_type() == SOAP_TYPE_tt__Config ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_get_tt__Config(struct soap*, tt__Config *, const char*, const char*);

inline int soap_read_tt__Config(struct soap *soap, tt__Config *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Config(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Config(struct soap *soap, const char *URL, tt__Config *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Config(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Config(struct soap *soap, tt__Config *p)
{
	if (::soap_read_tt__Config(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfigurationExtension(struct soap*, const char*, int, const tt__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC1 tt__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfigurationExtension * soap_new_tt__RuleEngineConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RuleEngineConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RuleEngineConfigurationExtension * soap_new_req_tt__RuleEngineConfigurationExtension(
	struct soap *soap)
{
	tt__RuleEngineConfigurationExtension *_p = ::soap_new_tt__RuleEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RuleEngineConfigurationExtension * soap_new_set_tt__RuleEngineConfigurationExtension(
	struct soap *soap)
{
	tt__RuleEngineConfigurationExtension *_p = ::soap_new_tt__RuleEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RuleEngineConfigurationExtension(struct soap *soap, const char *URL, tt__RuleEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RuleEngineConfigurationExtension(struct soap *soap, const char *URL, tt__RuleEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RuleEngineConfigurationExtension(struct soap *soap, const char *URL, tt__RuleEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RuleEngineConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RuleEngineConfigurationExtension(struct soap *soap, const char *URL, tt__RuleEngineConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RuleEngineConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension *p)
{
	if (::soap_read_tt__RuleEngineConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration_DEFINED
#define SOAP_TYPE_tt__RuleEngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfiguration(struct soap*, const char*, int, const tt__RuleEngineConfiguration *, const char*);
SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_in_tt__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration *, const char*);
SOAP_FMAC1 tt__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfiguration * soap_new_tt__RuleEngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RuleEngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__RuleEngineConfiguration * soap_new_req_tt__RuleEngineConfiguration(
	struct soap *soap)
{
	tt__RuleEngineConfiguration *_p = ::soap_new_tt__RuleEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RuleEngineConfiguration * soap_new_set_tt__RuleEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__Config *> & Rule,
	tt__RuleEngineConfigurationExtension *Extension)
{
	tt__RuleEngineConfiguration *_p = ::soap_new_tt__RuleEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RuleEngineConfiguration::Rule = Rule;
		_p->tt__RuleEngineConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RuleEngineConfiguration(struct soap *soap, const char *URL, tt__RuleEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RuleEngineConfiguration(struct soap *soap, const char *URL, tt__RuleEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RuleEngineConfiguration(struct soap *soap, const char *URL, tt__RuleEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RuleEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__RuleEngineConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_get_tt__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *, const char*, const char*);

inline int soap_read_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RuleEngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RuleEngineConfiguration(struct soap *soap, const char *URL, tt__RuleEngineConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RuleEngineConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration *p)
{
	if (::soap_read_tt__RuleEngineConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, int, const tt__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfigurationExtension * soap_new_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineConfigurationExtension * soap_new_req_tt__AnalyticsEngineConfigurationExtension(
	struct soap *soap)
{
	tt__AnalyticsEngineConfigurationExtension *_p = ::soap_new_tt__AnalyticsEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineConfigurationExtension * soap_new_set_tt__AnalyticsEngineConfigurationExtension(
	struct soap *soap)
{
	tt__AnalyticsEngineConfigurationExtension *_p = ::soap_new_tt__AnalyticsEngineConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, const char *URL, tt__AnalyticsEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, const char *URL, tt__AnalyticsEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, const char *URL, tt__AnalyticsEngineConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AnalyticsEngineConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, const char *URL, tt__AnalyticsEngineConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AnalyticsEngineConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension *p)
{
	if (::soap_read_tt__AnalyticsEngineConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration_DEFINED
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfiguration(struct soap*, const char*, int, const tt__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC1 tt__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfiguration * soap_new_tt__AnalyticsEngineConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsEngineConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsEngineConfiguration * soap_new_req_tt__AnalyticsEngineConfiguration(
	struct soap *soap)
{
	tt__AnalyticsEngineConfiguration *_p = ::soap_new_tt__AnalyticsEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsEngineConfiguration * soap_new_set_tt__AnalyticsEngineConfiguration(
	struct soap *soap,
	const std::vector<tt__Config *> & AnalyticsModule,
	tt__AnalyticsEngineConfigurationExtension *Extension)
{
	tt__AnalyticsEngineConfiguration *_p = ::soap_new_tt__AnalyticsEngineConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsEngineConfiguration::AnalyticsModule = AnalyticsModule;
		_p->tt__AnalyticsEngineConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AnalyticsEngineConfiguration(struct soap *soap, const char *URL, tt__AnalyticsEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AnalyticsEngineConfiguration(struct soap *soap, const char *URL, tt__AnalyticsEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AnalyticsEngineConfiguration(struct soap *soap, const char *URL, tt__AnalyticsEngineConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsEngineConfiguration", p->soap_type() == SOAP_TYPE_tt__AnalyticsEngineConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *, const char*, const char*);

inline int soap_read_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AnalyticsEngineConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AnalyticsEngineConfiguration(struct soap *soap, const char *URL, tt__AnalyticsEngineConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AnalyticsEngineConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *p)
{
	if (::soap_read_tt__AnalyticsEngineConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension_DEFINED
#define SOAP_TYPE_tt__ItemListExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListExtension(struct soap*, const char*, int, const tt__ItemListExtension *, const char*);
SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_in_tt__ItemListExtension(struct soap*, const char*, tt__ItemListExtension *, const char*);
SOAP_FMAC1 tt__ItemListExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListExtension * soap_new_tt__ItemListExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemListExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ItemListExtension * soap_new_req_tt__ItemListExtension(
	struct soap *soap)
{
	tt__ItemListExtension *_p = ::soap_new_tt__ItemListExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemListExtension * soap_new_set_tt__ItemListExtension(
	struct soap *soap)
{
	tt__ItemListExtension *_p = ::soap_new_tt__ItemListExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListExtension", p->soap_type() == SOAP_TYPE_tt__ItemListExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ItemListExtension(struct soap *soap, const char *URL, tt__ItemListExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListExtension", p->soap_type() == SOAP_TYPE_tt__ItemListExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ItemListExtension(struct soap *soap, const char *URL, tt__ItemListExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListExtension", p->soap_type() == SOAP_TYPE_tt__ItemListExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ItemListExtension(struct soap *soap, const char *URL, tt__ItemListExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemListExtension", p->soap_type() == SOAP_TYPE_tt__ItemListExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_get_tt__ItemListExtension(struct soap*, tt__ItemListExtension *, const char*, const char*);

inline int soap_read_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ItemListExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ItemListExtension(struct soap *soap, const char *URL, tt__ItemListExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ItemListExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension *p)
{
	if (::soap_read_tt__ItemListExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ItemList_DEFINED
#define SOAP_TYPE_tt__ItemList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemList(struct soap*, const char*, int, const tt__ItemList *, const char*);
SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_in_tt__ItemList(struct soap*, const char*, tt__ItemList *, const char*);
SOAP_FMAC1 tt__ItemList * SOAP_FMAC2 soap_instantiate_tt__ItemList(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemList * soap_new_tt__ItemList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ItemList(soap, n, NULL, NULL, NULL);
}

inline tt__ItemList * soap_new_req_tt__ItemList(
	struct soap *soap)
{
	tt__ItemList *_p = ::soap_new_tt__ItemList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ItemList * soap_new_set_tt__ItemList(
	struct soap *soap,
	const std::vector<_tt__ItemList_SimpleItem> & SimpleItem,
	const std::vector<_tt__ItemList_ElementItem> & ElementItem,
	tt__ItemListExtension *Extension)
{
	tt__ItemList *_p = ::soap_new_tt__ItemList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ItemList::SimpleItem = SimpleItem;
		_p->tt__ItemList::ElementItem = ElementItem;
		_p->tt__ItemList::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ItemList(struct soap *soap, tt__ItemList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList", p->soap_type() == SOAP_TYPE_tt__ItemList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ItemList(struct soap *soap, const char *URL, tt__ItemList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList", p->soap_type() == SOAP_TYPE_tt__ItemList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ItemList(struct soap *soap, const char *URL, tt__ItemList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList", p->soap_type() == SOAP_TYPE_tt__ItemList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ItemList(struct soap *soap, const char *URL, tt__ItemList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ItemList", p->soap_type() == SOAP_TYPE_tt__ItemList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_get_tt__ItemList(struct soap*, tt__ItemList *, const char*, const char*);

inline int soap_read_tt__ItemList(struct soap *soap, tt__ItemList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ItemList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ItemList(struct soap *soap, const char *URL, tt__ItemList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ItemList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ItemList(struct soap *soap, tt__ItemList *p)
{
	if (::soap_read_tt__ItemList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20Extension(struct soap*, const char*, int, const tt__FocusConfiguration20Extension *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_in_tt__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension *, const char*);
SOAP_FMAC1 tt__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20Extension * soap_new_tt__FocusConfiguration20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration20Extension * soap_new_req_tt__FocusConfiguration20Extension(
	struct soap *soap)
{
	tt__FocusConfiguration20Extension *_p = ::soap_new_tt__FocusConfiguration20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__FocusConfiguration20Extension * soap_new_set_tt__FocusConfiguration20Extension(
	struct soap *soap)
{
	tt__FocusConfiguration20Extension *_p = ::soap_new_tt__FocusConfiguration20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20Extension", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20Extension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FocusConfiguration20Extension(struct soap *soap, const char *URL, tt__FocusConfiguration20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20Extension", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FocusConfiguration20Extension(struct soap *soap, const char *URL, tt__FocusConfiguration20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20Extension", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FocusConfiguration20Extension(struct soap *soap, const char *URL, tt__FocusConfiguration20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20Extension", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20Extension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_get_tt__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FocusConfiguration20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FocusConfiguration20Extension(struct soap *soap, const char *URL, tt__FocusConfiguration20Extension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FocusConfiguration20Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension *p)
{
	if (::soap_read_tt__FocusConfiguration20Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20(struct soap*, const char*, int, const tt__FocusConfiguration20 *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_in_tt__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 *, const char*);
SOAP_FMAC1 tt__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20 * soap_new_tt__FocusConfiguration20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration20(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration20 * soap_new_req_tt__FocusConfiguration20(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode)
{
	tt__FocusConfiguration20 *_p = ::soap_new_tt__FocusConfiguration20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode;
	}
	return _p;
}

inline tt__FocusConfiguration20 * soap_new_set_tt__FocusConfiguration20(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float *DefaultSpeed,
	float *NearLimit,
	float *FarLimit,
	tt__FocusConfiguration20Extension *Extension,
	std::string *AFMode)
{
	tt__FocusConfiguration20 *_p = ::soap_new_tt__FocusConfiguration20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration20::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration20::NearLimit = NearLimit;
		_p->tt__FocusConfiguration20::FarLimit = FarLimit;
		_p->tt__FocusConfiguration20::Extension = Extension;
		_p->tt__FocusConfiguration20::AFMode = AFMode;
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FocusConfiguration20(struct soap *soap, const char *URL, tt__FocusConfiguration20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FocusConfiguration20(struct soap *soap, const char *URL, tt__FocusConfiguration20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FocusConfiguration20(struct soap *soap, const char *URL, tt__FocusConfiguration20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration20", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_get_tt__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FocusConfiguration20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FocusConfiguration20(struct soap *soap, const char *URL, tt__FocusConfiguration20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FocusConfiguration20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 *p)
{
	if (::soap_read_tt__FocusConfiguration20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension_DEFINED
#define SOAP_TYPE_tt__WhiteBalance20Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20Extension(struct soap*, const char*, int, const tt__WhiteBalance20Extension *, const char*);
SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_in_tt__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension *, const char*);
SOAP_FMAC1 tt__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20Extension * soap_new_tt__WhiteBalance20Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance20Extension(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance20Extension * soap_new_req_tt__WhiteBalance20Extension(
	struct soap *soap)
{
	tt__WhiteBalance20Extension *_p = ::soap_new_tt__WhiteBalance20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__WhiteBalance20Extension * soap_new_set_tt__WhiteBalance20Extension(
	struct soap *soap)
{
	tt__WhiteBalance20Extension *_p = ::soap_new_tt__WhiteBalance20Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20Extension", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20Extension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__WhiteBalance20Extension(struct soap *soap, const char *URL, tt__WhiteBalance20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20Extension", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WhiteBalance20Extension(struct soap *soap, const char *URL, tt__WhiteBalance20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20Extension", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WhiteBalance20Extension(struct soap *soap, const char *URL, tt__WhiteBalance20Extension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20Extension", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20Extension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_get_tt__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *, const char*, const char*);

inline int soap_read_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__WhiteBalance20Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WhiteBalance20Extension(struct soap *soap, const char *URL, tt__WhiteBalance20Extension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WhiteBalance20Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension *p)
{
	if (::soap_read_tt__WhiteBalance20Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20_DEFINED
#define SOAP_TYPE_tt__WhiteBalance20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20(struct soap*, const char*, int, const tt__WhiteBalance20 *, const char*);
SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_in_tt__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 *, const char*);
SOAP_FMAC1 tt__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20 * soap_new_tt__WhiteBalance20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance20(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance20 * soap_new_req_tt__WhiteBalance20(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode)
{
	tt__WhiteBalance20 *_p = ::soap_new_tt__WhiteBalance20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance20::Mode = Mode;
	}
	return _p;
}

inline tt__WhiteBalance20 * soap_new_set_tt__WhiteBalance20(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float *CrGain,
	float *CbGain,
	tt__WhiteBalance20Extension *Extension)
{
	tt__WhiteBalance20 *_p = ::soap_new_tt__WhiteBalance20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance20::Mode = Mode;
		_p->tt__WhiteBalance20::CrGain = CrGain;
		_p->tt__WhiteBalance20::CbGain = CbGain;
		_p->tt__WhiteBalance20::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__WhiteBalance20(struct soap *soap, const char *URL, tt__WhiteBalance20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WhiteBalance20(struct soap *soap, const char *URL, tt__WhiteBalance20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WhiteBalance20(struct soap *soap, const char *URL, tt__WhiteBalance20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance20", p->soap_type() == SOAP_TYPE_tt__WhiteBalance20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_get_tt__WhiteBalance20(struct soap*, tt__WhiteBalance20 *, const char*, const char*);

inline int soap_read_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__WhiteBalance20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WhiteBalance20(struct soap *soap, const char *URL, tt__WhiteBalance20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WhiteBalance20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 *p)
{
	if (::soap_read_tt__WhiteBalance20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NoiseReduction_DEFINED
#define SOAP_TYPE_tt__NoiseReduction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NoiseReduction(struct soap*, const char*, int, const tt__NoiseReduction *, const char*);
SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_in_tt__NoiseReduction(struct soap*, const char*, tt__NoiseReduction *, const char*);
SOAP_FMAC1 tt__NoiseReduction * SOAP_FMAC2 soap_instantiate_tt__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);

inline tt__NoiseReduction * soap_new_tt__NoiseReduction(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NoiseReduction(soap, n, NULL, NULL, NULL);
}

inline tt__NoiseReduction * soap_new_req_tt__NoiseReduction(
	struct soap *soap,
	float Level)
{
	tt__NoiseReduction *_p = ::soap_new_tt__NoiseReduction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReduction::Level = Level;
	}
	return _p;
}

inline tt__NoiseReduction * soap_new_set_tt__NoiseReduction(
	struct soap *soap,
	float Level)
{
	tt__NoiseReduction *_p = ::soap_new_tt__NoiseReduction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NoiseReduction::Level = Level;
	}
	return _p;
}

inline int soap_write_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReduction", p->soap_type() == SOAP_TYPE_tt__NoiseReduction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NoiseReduction(struct soap *soap, const char *URL, tt__NoiseReduction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReduction", p->soap_type() == SOAP_TYPE_tt__NoiseReduction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NoiseReduction(struct soap *soap, const char *URL, tt__NoiseReduction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReduction", p->soap_type() == SOAP_TYPE_tt__NoiseReduction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NoiseReduction(struct soap *soap, const char *URL, tt__NoiseReduction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NoiseReduction", p->soap_type() == SOAP_TYPE_tt__NoiseReduction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_get_tt__NoiseReduction(struct soap*, tt__NoiseReduction *, const char*, const char*);

inline int soap_read_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NoiseReduction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NoiseReduction(struct soap *soap, const char *URL, tt__NoiseReduction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NoiseReduction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction *p)
{
	if (::soap_read_tt__NoiseReduction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DefoggingExtension_DEFINED
#define SOAP_TYPE_tt__DefoggingExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingExtension(struct soap*, const char*, int, const tt__DefoggingExtension *, const char*);
SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_in_tt__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension *, const char*);
SOAP_FMAC1 tt__DefoggingExtension * SOAP_FMAC2 soap_instantiate_tt__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingExtension * soap_new_tt__DefoggingExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DefoggingExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DefoggingExtension * soap_new_req_tt__DefoggingExtension(
	struct soap *soap)
{
	tt__DefoggingExtension *_p = ::soap_new_tt__DefoggingExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DefoggingExtension * soap_new_set_tt__DefoggingExtension(
	struct soap *soap)
{
	tt__DefoggingExtension *_p = ::soap_new_tt__DefoggingExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingExtension", p->soap_type() == SOAP_TYPE_tt__DefoggingExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DefoggingExtension(struct soap *soap, const char *URL, tt__DefoggingExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingExtension", p->soap_type() == SOAP_TYPE_tt__DefoggingExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DefoggingExtension(struct soap *soap, const char *URL, tt__DefoggingExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingExtension", p->soap_type() == SOAP_TYPE_tt__DefoggingExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DefoggingExtension(struct soap *soap, const char *URL, tt__DefoggingExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DefoggingExtension", p->soap_type() == SOAP_TYPE_tt__DefoggingExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_get_tt__DefoggingExtension(struct soap*, tt__DefoggingExtension *, const char*, const char*);

inline int soap_read_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DefoggingExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DefoggingExtension(struct soap *soap, const char *URL, tt__DefoggingExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DefoggingExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension *p)
{
	if (::soap_read_tt__DefoggingExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Defogging_DEFINED
#define SOAP_TYPE_tt__Defogging_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Defogging(struct soap*, const char*, int, const tt__Defogging *, const char*);
SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_in_tt__Defogging(struct soap*, const char*, tt__Defogging *, const char*);
SOAP_FMAC1 tt__Defogging * SOAP_FMAC2 soap_instantiate_tt__Defogging(struct soap*, int, const char*, const char*, size_t*);

inline tt__Defogging * soap_new_tt__Defogging(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Defogging(soap, n, NULL, NULL, NULL);
}

inline tt__Defogging * soap_new_req_tt__Defogging(
	struct soap *soap,
	const std::string& Mode)
{
	tt__Defogging *_p = ::soap_new_tt__Defogging(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Defogging::Mode = Mode;
	}
	return _p;
}

inline tt__Defogging * soap_new_set_tt__Defogging(
	struct soap *soap,
	const std::string& Mode,
	float *Level,
	tt__DefoggingExtension *Extension)
{
	tt__Defogging *_p = ::soap_new_tt__Defogging(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Defogging::Mode = Mode;
		_p->tt__Defogging::Level = Level;
		_p->tt__Defogging::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Defogging(struct soap *soap, tt__Defogging const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Defogging", p->soap_type() == SOAP_TYPE_tt__Defogging ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Defogging(struct soap *soap, const char *URL, tt__Defogging const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Defogging", p->soap_type() == SOAP_TYPE_tt__Defogging ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Defogging(struct soap *soap, const char *URL, tt__Defogging const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Defogging", p->soap_type() == SOAP_TYPE_tt__Defogging ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Defogging(struct soap *soap, const char *URL, tt__Defogging const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Defogging", p->soap_type() == SOAP_TYPE_tt__Defogging ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_get_tt__Defogging(struct soap*, tt__Defogging *, const char*, const char*);

inline int soap_read_tt__Defogging(struct soap *soap, tt__Defogging *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Defogging(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Defogging(struct soap *soap, const char *URL, tt__Defogging *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Defogging(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Defogging(struct soap *soap, tt__Defogging *p)
{
	if (::soap_read_tt__Defogging(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationExtension_DEFINED
#define SOAP_TYPE_tt__ToneCompensationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationExtension(struct soap*, const char*, int, const tt__ToneCompensationExtension *, const char*);
SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_in_tt__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension *, const char*);
SOAP_FMAC1 tt__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationExtension * soap_new_tt__ToneCompensationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensationExtension * soap_new_req_tt__ToneCompensationExtension(
	struct soap *soap)
{
	tt__ToneCompensationExtension *_p = ::soap_new_tt__ToneCompensationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ToneCompensationExtension * soap_new_set_tt__ToneCompensationExtension(
	struct soap *soap)
{
	tt__ToneCompensationExtension *_p = ::soap_new_tt__ToneCompensationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationExtension", p->soap_type() == SOAP_TYPE_tt__ToneCompensationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ToneCompensationExtension(struct soap *soap, const char *URL, tt__ToneCompensationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationExtension", p->soap_type() == SOAP_TYPE_tt__ToneCompensationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ToneCompensationExtension(struct soap *soap, const char *URL, tt__ToneCompensationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationExtension", p->soap_type() == SOAP_TYPE_tt__ToneCompensationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ToneCompensationExtension(struct soap *soap, const char *URL, tt__ToneCompensationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensationExtension", p->soap_type() == SOAP_TYPE_tt__ToneCompensationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_get_tt__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *, const char*, const char*);

inline int soap_read_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ToneCompensationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ToneCompensationExtension(struct soap *soap, const char *URL, tt__ToneCompensationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ToneCompensationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension *p)
{
	if (::soap_read_tt__ToneCompensationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ToneCompensation_DEFINED
#define SOAP_TYPE_tt__ToneCompensation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensation(struct soap*, const char*, int, const tt__ToneCompensation *, const char*);
SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_in_tt__ToneCompensation(struct soap*, const char*, tt__ToneCompensation *, const char*);
SOAP_FMAC1 tt__ToneCompensation * SOAP_FMAC2 soap_instantiate_tt__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensation * soap_new_tt__ToneCompensation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ToneCompensation(soap, n, NULL, NULL, NULL);
}

inline tt__ToneCompensation * soap_new_req_tt__ToneCompensation(
	struct soap *soap,
	const std::string& Mode)
{
	tt__ToneCompensation *_p = ::soap_new_tt__ToneCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensation::Mode = Mode;
	}
	return _p;
}

inline tt__ToneCompensation * soap_new_set_tt__ToneCompensation(
	struct soap *soap,
	const std::string& Mode,
	float *Level,
	tt__ToneCompensationExtension *Extension)
{
	tt__ToneCompensation *_p = ::soap_new_tt__ToneCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ToneCompensation::Mode = Mode;
		_p->tt__ToneCompensation::Level = Level;
		_p->tt__ToneCompensation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensation", p->soap_type() == SOAP_TYPE_tt__ToneCompensation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ToneCompensation(struct soap *soap, const char *URL, tt__ToneCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensation", p->soap_type() == SOAP_TYPE_tt__ToneCompensation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ToneCompensation(struct soap *soap, const char *URL, tt__ToneCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensation", p->soap_type() == SOAP_TYPE_tt__ToneCompensation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ToneCompensation(struct soap *soap, const char *URL, tt__ToneCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ToneCompensation", p->soap_type() == SOAP_TYPE_tt__ToneCompensation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_get_tt__ToneCompensation(struct soap*, tt__ToneCompensation *, const char*, const char*);

inline int soap_read_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ToneCompensation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ToneCompensation(struct soap *soap, const char *URL, tt__ToneCompensation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ToneCompensation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation *p)
{
	if (::soap_read_tt__ToneCompensation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Exposure20_DEFINED
#define SOAP_TYPE_tt__Exposure20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure20(struct soap*, const char*, int, const tt__Exposure20 *, const char*);
SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_in_tt__Exposure20(struct soap*, const char*, tt__Exposure20 *, const char*);
SOAP_FMAC1 tt__Exposure20 * SOAP_FMAC2 soap_instantiate_tt__Exposure20(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure20 * soap_new_tt__Exposure20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Exposure20(soap, n, NULL, NULL, NULL);
}

inline tt__Exposure20 * soap_new_req_tt__Exposure20(
	struct soap *soap,
	enum tt__ExposureMode Mode)
{
	tt__Exposure20 *_p = ::soap_new_tt__Exposure20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure20::Mode = Mode;
	}
	return _p;
}

inline tt__Exposure20 * soap_new_set_tt__Exposure20(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority *Priority,
	tt__Rectangle *Window,
	float *MinExposureTime,
	float *MaxExposureTime,
	float *MinGain,
	float *MaxGain,
	float *MinIris,
	float *MaxIris,
	float *ExposureTime,
	float *Gain,
	float *Iris)
{
	tt__Exposure20 *_p = ::soap_new_tt__Exposure20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure20::Mode = Mode;
		_p->tt__Exposure20::Priority = Priority;
		_p->tt__Exposure20::Window = Window;
		_p->tt__Exposure20::MinExposureTime = MinExposureTime;
		_p->tt__Exposure20::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure20::MinGain = MinGain;
		_p->tt__Exposure20::MaxGain = MaxGain;
		_p->tt__Exposure20::MinIris = MinIris;
		_p->tt__Exposure20::MaxIris = MaxIris;
		_p->tt__Exposure20::ExposureTime = ExposureTime;
		_p->tt__Exposure20::Gain = Gain;
		_p->tt__Exposure20::Iris = Iris;
	}
	return _p;
}

inline int soap_write_tt__Exposure20(struct soap *soap, tt__Exposure20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure20", p->soap_type() == SOAP_TYPE_tt__Exposure20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Exposure20(struct soap *soap, const char *URL, tt__Exposure20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure20", p->soap_type() == SOAP_TYPE_tt__Exposure20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Exposure20(struct soap *soap, const char *URL, tt__Exposure20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure20", p->soap_type() == SOAP_TYPE_tt__Exposure20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Exposure20(struct soap *soap, const char *URL, tt__Exposure20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure20", p->soap_type() == SOAP_TYPE_tt__Exposure20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_get_tt__Exposure20(struct soap*, tt__Exposure20 *, const char*, const char*);

inline int soap_read_tt__Exposure20(struct soap *soap, tt__Exposure20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Exposure20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Exposure20(struct soap *soap, const char *URL, tt__Exposure20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Exposure20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Exposure20(struct soap *soap, tt__Exposure20 *p)
{
	if (::soap_read_tt__Exposure20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20_DEFINED
#define SOAP_TYPE_tt__BacklightCompensation20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation20(struct soap*, const char*, int, const tt__BacklightCompensation20 *, const char*);
SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_in_tt__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 *, const char*);
SOAP_FMAC1 tt__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation20 * soap_new_tt__BacklightCompensation20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensation20(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensation20 * soap_new_req_tt__BacklightCompensation20(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode)
{
	tt__BacklightCompensation20 *_p = ::soap_new_tt__BacklightCompensation20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation20::Mode = Mode;
	}
	return _p;
}

inline tt__BacklightCompensation20 * soap_new_set_tt__BacklightCompensation20(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float *Level)
{
	tt__BacklightCompensation20 *_p = ::soap_new_tt__BacklightCompensation20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation20::Mode = Mode;
		_p->tt__BacklightCompensation20::Level = Level;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation20", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__BacklightCompensation20(struct soap *soap, const char *URL, tt__BacklightCompensation20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation20", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__BacklightCompensation20(struct soap *soap, const char *URL, tt__BacklightCompensation20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation20", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__BacklightCompensation20(struct soap *soap, const char *URL, tt__BacklightCompensation20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation20", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_get_tt__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *, const char*, const char*);

inline int soap_read_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__BacklightCompensation20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__BacklightCompensation20(struct soap *soap, const char *URL, tt__BacklightCompensation20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__BacklightCompensation20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 *p)
{
	if (::soap_read_tt__BacklightCompensation20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20_DEFINED
#define SOAP_TYPE_tt__WideDynamicRange20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange20(struct soap*, const char*, int, const tt__WideDynamicRange20 *, const char*);
SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_in_tt__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 *, const char*);
SOAP_FMAC1 tt__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange20 * soap_new_tt__WideDynamicRange20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRange20(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRange20 * soap_new_req_tt__WideDynamicRange20(
	struct soap *soap,
	enum tt__WideDynamicMode Mode)
{
	tt__WideDynamicRange20 *_p = ::soap_new_tt__WideDynamicRange20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange20::Mode = Mode;
	}
	return _p;
}

inline tt__WideDynamicRange20 * soap_new_set_tt__WideDynamicRange20(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float *Level)
{
	tt__WideDynamicRange20 *_p = ::soap_new_tt__WideDynamicRange20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange20::Mode = Mode;
		_p->tt__WideDynamicRange20::Level = Level;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange20", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__WideDynamicRange20(struct soap *soap, const char *URL, tt__WideDynamicRange20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange20", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WideDynamicRange20(struct soap *soap, const char *URL, tt__WideDynamicRange20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange20", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WideDynamicRange20(struct soap *soap, const char *URL, tt__WideDynamicRange20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange20", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_get_tt__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *, const char*, const char*);

inline int soap_read_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__WideDynamicRange20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WideDynamicRange20(struct soap *soap, const char *URL, tt__WideDynamicRange20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WideDynamicRange20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 *p)
{
	if (::soap_read_tt__WideDynamicRange20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(
	struct soap *soap)
{
	tt__IrCutFilterAutoAdjustmentExtension *_p = ::soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(
	struct soap *soap)
{
	tt__IrCutFilterAutoAdjustmentExtension *_p = ::soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustmentExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustmentExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustmentExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IrCutFilterAutoAdjustmentExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustmentExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension *p)
{
	if (::soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC1 tt__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustment * soap_new_tt__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL);
}

inline tt__IrCutFilterAutoAdjustment * soap_new_req_tt__IrCutFilterAutoAdjustment(
	struct soap *soap,
	const std::string& BoundaryType)
{
	tt__IrCutFilterAutoAdjustment *_p = ::soap_new_tt__IrCutFilterAutoAdjustment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType;
	}
	return _p;
}

inline tt__IrCutFilterAutoAdjustment * soap_new_set_tt__IrCutFilterAutoAdjustment(
	struct soap *soap,
	const std::string& BoundaryType,
	float *BoundaryOffset,
	std::string *ResponseTime,
	tt__IrCutFilterAutoAdjustmentExtension *Extension)
{
	tt__IrCutFilterAutoAdjustment *_p = ::soap_new_tt__IrCutFilterAutoAdjustment(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType;
		_p->tt__IrCutFilterAutoAdjustment::BoundaryOffset = BoundaryOffset;
		_p->tt__IrCutFilterAutoAdjustment::ResponseTime = ResponseTime;
		_p->tt__IrCutFilterAutoAdjustment::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustment", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustment ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IrCutFilterAutoAdjustment(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustment const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustment", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IrCutFilterAutoAdjustment(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustment const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustment", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustment ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IrCutFilterAutoAdjustment(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustment const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IrCutFilterAutoAdjustment", p->soap_type() == SOAP_TYPE_tt__IrCutFilterAutoAdjustment ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *, const char*, const char*);

inline int soap_read_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IrCutFilterAutoAdjustment(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IrCutFilterAutoAdjustment(struct soap *soap, const char *URL, tt__IrCutFilterAutoAdjustment *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IrCutFilterAutoAdjustment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment *p)
{
	if (::soap_read_tt__IrCutFilterAutoAdjustment(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension_DEFINED
#define SOAP_TYPE_tt__ImageStabilizationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationExtension(struct soap*, const char*, int, const tt__ImageStabilizationExtension *, const char*);
SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_in_tt__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension *, const char*);
SOAP_FMAC1 tt__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationExtension * soap_new_tt__ImageStabilizationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilizationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilizationExtension * soap_new_req_tt__ImageStabilizationExtension(
	struct soap *soap)
{
	tt__ImageStabilizationExtension *_p = ::soap_new_tt__ImageStabilizationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImageStabilizationExtension * soap_new_set_tt__ImageStabilizationExtension(
	struct soap *soap)
{
	tt__ImageStabilizationExtension *_p = ::soap_new_tt__ImageStabilizationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationExtension", p->soap_type() == SOAP_TYPE_tt__ImageStabilizationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImageStabilizationExtension(struct soap *soap, const char *URL, tt__ImageStabilizationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationExtension", p->soap_type() == SOAP_TYPE_tt__ImageStabilizationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImageStabilizationExtension(struct soap *soap, const char *URL, tt__ImageStabilizationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationExtension", p->soap_type() == SOAP_TYPE_tt__ImageStabilizationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImageStabilizationExtension(struct soap *soap, const char *URL, tt__ImageStabilizationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilizationExtension", p->soap_type() == SOAP_TYPE_tt__ImageStabilizationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_get_tt__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *, const char*, const char*);

inline int soap_read_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImageStabilizationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImageStabilizationExtension(struct soap *soap, const char *URL, tt__ImageStabilizationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImageStabilizationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension *p)
{
	if (::soap_read_tt__ImageStabilizationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization_DEFINED
#define SOAP_TYPE_tt__ImageStabilization_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilization(struct soap*, const char*, int, const tt__ImageStabilization *, const char*);
SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_in_tt__ImageStabilization(struct soap*, const char*, tt__ImageStabilization *, const char*);
SOAP_FMAC1 tt__ImageStabilization * SOAP_FMAC2 soap_instantiate_tt__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilization * soap_new_tt__ImageStabilization(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImageStabilization(soap, n, NULL, NULL, NULL);
}

inline tt__ImageStabilization * soap_new_req_tt__ImageStabilization(
	struct soap *soap,
	enum tt__ImageStabilizationMode Mode)
{
	tt__ImageStabilization *_p = ::soap_new_tt__ImageStabilization(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilization::Mode = Mode;
	}
	return _p;
}

inline tt__ImageStabilization * soap_new_set_tt__ImageStabilization(
	struct soap *soap,
	enum tt__ImageStabilizationMode Mode,
	float *Level,
	tt__ImageStabilizationExtension *Extension)
{
	tt__ImageStabilization *_p = ::soap_new_tt__ImageStabilization(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImageStabilization::Mode = Mode;
		_p->tt__ImageStabilization::Level = Level;
		_p->tt__ImageStabilization::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilization", p->soap_type() == SOAP_TYPE_tt__ImageStabilization ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImageStabilization(struct soap *soap, const char *URL, tt__ImageStabilization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilization", p->soap_type() == SOAP_TYPE_tt__ImageStabilization ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImageStabilization(struct soap *soap, const char *URL, tt__ImageStabilization const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilization", p->soap_type() == SOAP_TYPE_tt__ImageStabilization ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImageStabilization(struct soap *soap, const char *URL, tt__ImageStabilization const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImageStabilization", p->soap_type() == SOAP_TYPE_tt__ImageStabilization ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_get_tt__ImageStabilization(struct soap*, tt__ImageStabilization *, const char*, const char*);

inline int soap_read_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImageStabilization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImageStabilization(struct soap *soap, const char *URL, tt__ImageStabilization *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImageStabilization(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization *p)
{
	if (::soap_read_tt__ImageStabilization(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension204_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension204(struct soap*, const char*, int, const tt__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension204 * soap_new_tt__ImagingSettingsExtension204(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension204(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension204 * soap_new_req_tt__ImagingSettingsExtension204(
	struct soap *soap)
{
	tt__ImagingSettingsExtension204 *_p = ::soap_new_tt__ImagingSettingsExtension204(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension204 * soap_new_set_tt__ImagingSettingsExtension204(
	struct soap *soap)
{
	tt__ImagingSettingsExtension204 *_p = ::soap_new_tt__ImagingSettingsExtension204(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension204", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension204 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettingsExtension204(struct soap *soap, const char *URL, tt__ImagingSettingsExtension204 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension204", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension204 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettingsExtension204(struct soap *soap, const char *URL, tt__ImagingSettingsExtension204 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension204", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension204 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettingsExtension204(struct soap *soap, const char *URL, tt__ImagingSettingsExtension204 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension204", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension204 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettingsExtension204(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettingsExtension204(struct soap *soap, const char *URL, tt__ImagingSettingsExtension204 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettingsExtension204(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 *p)
{
	if (::soap_read_tt__ImagingSettingsExtension204(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension203_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension203(struct soap*, const char*, int, const tt__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension203 * soap_new_tt__ImagingSettingsExtension203(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension203(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension203 * soap_new_req_tt__ImagingSettingsExtension203(
	struct soap *soap)
{
	tt__ImagingSettingsExtension203 *_p = ::soap_new_tt__ImagingSettingsExtension203(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension203 * soap_new_set_tt__ImagingSettingsExtension203(
	struct soap *soap,
	tt__ToneCompensation *ToneCompensation,
	tt__Defogging *Defogging,
	tt__NoiseReduction *NoiseReduction,
	tt__ImagingSettingsExtension204 *Extension)
{
	tt__ImagingSettingsExtension203 *_p = ::soap_new_tt__ImagingSettingsExtension203(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension203::ToneCompensation = ToneCompensation;
		_p->tt__ImagingSettingsExtension203::Defogging = Defogging;
		_p->tt__ImagingSettingsExtension203::NoiseReduction = NoiseReduction;
		_p->tt__ImagingSettingsExtension203::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension203", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension203 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettingsExtension203(struct soap *soap, const char *URL, tt__ImagingSettingsExtension203 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension203", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension203 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettingsExtension203(struct soap *soap, const char *URL, tt__ImagingSettingsExtension203 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension203", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension203 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettingsExtension203(struct soap *soap, const char *URL, tt__ImagingSettingsExtension203 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension203", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension203 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettingsExtension203(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettingsExtension203(struct soap *soap, const char *URL, tt__ImagingSettingsExtension203 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettingsExtension203(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 *p)
{
	if (::soap_read_tt__ImagingSettingsExtension203(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension202_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension202(struct soap*, const char*, int, const tt__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension202 * soap_new_tt__ImagingSettingsExtension202(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension202(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension202 * soap_new_req_tt__ImagingSettingsExtension202(
	struct soap *soap)
{
	tt__ImagingSettingsExtension202 *_p = ::soap_new_tt__ImagingSettingsExtension202(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension202 * soap_new_set_tt__ImagingSettingsExtension202(
	struct soap *soap,
	const std::vector<tt__IrCutFilterAutoAdjustment *> & IrCutFilterAutoAdjustment,
	tt__ImagingSettingsExtension203 *Extension)
{
	tt__ImagingSettingsExtension202 *_p = ::soap_new_tt__ImagingSettingsExtension202(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension202::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment;
		_p->tt__ImagingSettingsExtension202::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension202", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension202 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettingsExtension202(struct soap *soap, const char *URL, tt__ImagingSettingsExtension202 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension202", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension202 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettingsExtension202(struct soap *soap, const char *URL, tt__ImagingSettingsExtension202 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension202", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension202 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettingsExtension202(struct soap *soap, const char *URL, tt__ImagingSettingsExtension202 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension202", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension202 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettingsExtension202(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettingsExtension202(struct soap *soap, const char *URL, tt__ImagingSettingsExtension202 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettingsExtension202(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 *p)
{
	if (::soap_read_tt__ImagingSettingsExtension202(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension20(struct soap*, const char*, int, const tt__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension20 * soap_new_tt__ImagingSettingsExtension20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension20 * soap_new_req_tt__ImagingSettingsExtension20(
	struct soap *soap)
{
	tt__ImagingSettingsExtension20 *_p = ::soap_new_tt__ImagingSettingsExtension20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension20 * soap_new_set_tt__ImagingSettingsExtension20(
	struct soap *soap,
	tt__ImageStabilization *ImageStabilization,
	tt__ImagingSettingsExtension202 *Extension)
{
	tt__ImagingSettingsExtension20 *_p = ::soap_new_tt__ImagingSettingsExtension20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettingsExtension20::ImageStabilization = ImageStabilization;
		_p->tt__ImagingSettingsExtension20::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension20", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettingsExtension20(struct soap *soap, const char *URL, tt__ImagingSettingsExtension20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension20", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettingsExtension20(struct soap *soap, const char *URL, tt__ImagingSettingsExtension20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension20", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettingsExtension20(struct soap *soap, const char *URL, tt__ImagingSettingsExtension20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension20", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettingsExtension20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettingsExtension20(struct soap *soap, const char *URL, tt__ImagingSettingsExtension20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettingsExtension20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 *p)
{
	if (::soap_read_tt__ImagingSettingsExtension20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20_DEFINED
#define SOAP_TYPE_tt__ImagingSettings20_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings20(struct soap*, const char*, int, const tt__ImagingSettings20 *, const char*);
SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_in_tt__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 *, const char*);
SOAP_FMAC1 tt__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings20 * soap_new_tt__ImagingSettings20(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettings20(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettings20 * soap_new_req_tt__ImagingSettings20(
	struct soap *soap)
{
	tt__ImagingSettings20 *_p = ::soap_new_tt__ImagingSettings20(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettings20 * soap_new_set_tt__ImagingSettings20(
	struct soap *soap,
	tt__BacklightCompensation20 *BacklightCompensation,
	float *Brightness,
	float *ColorSaturation,
	float *Contrast,
	tt__Exposure20 *Exposure,
	tt__FocusConfiguration20 *Focus,
	enum tt__IrCutFilterMode *IrCutFilter,
	float *Sharpness,
	tt__WideDynamicRange20 *WideDynamicRange,
	tt__WhiteBalance20 *WhiteBalance,
	tt__ImagingSettingsExtension20 *Extension)
{
	tt__ImagingSettings20 *_p = ::soap_new_tt__ImagingSettings20(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettings20::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingSettings20::Brightness = Brightness;
		_p->tt__ImagingSettings20::ColorSaturation = ColorSaturation;
		_p->tt__ImagingSettings20::Contrast = Contrast;
		_p->tt__ImagingSettings20::Exposure = Exposure;
		_p->tt__ImagingSettings20::Focus = Focus;
		_p->tt__ImagingSettings20::IrCutFilter = IrCutFilter;
		_p->tt__ImagingSettings20::Sharpness = Sharpness;
		_p->tt__ImagingSettings20::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingSettings20::WhiteBalance = WhiteBalance;
		_p->tt__ImagingSettings20::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings20", p->soap_type() == SOAP_TYPE_tt__ImagingSettings20 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettings20(struct soap *soap, const char *URL, tt__ImagingSettings20 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings20", p->soap_type() == SOAP_TYPE_tt__ImagingSettings20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettings20(struct soap *soap, const char *URL, tt__ImagingSettings20 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings20", p->soap_type() == SOAP_TYPE_tt__ImagingSettings20 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettings20(struct soap *soap, const char *URL, tt__ImagingSettings20 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings20", p->soap_type() == SOAP_TYPE_tt__ImagingSettings20 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_get_tt__ImagingSettings20(struct soap*, tt__ImagingSettings20 *, const char*, const char*);

inline int soap_read_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettings20(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettings20(struct soap *soap, const char *URL, tt__ImagingSettings20 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettings20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 *p)
{
	if (::soap_read_tt__ImagingSettings20(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance_DEFINED
#define SOAP_TYPE_tt__WhiteBalance_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance(struct soap*, const char*, int, const tt__WhiteBalance *, const char*);
SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_in_tt__WhiteBalance(struct soap*, const char*, tt__WhiteBalance *, const char*);
SOAP_FMAC1 tt__WhiteBalance * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance * soap_new_tt__WhiteBalance(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WhiteBalance(soap, n, NULL, NULL, NULL);
}

inline tt__WhiteBalance * soap_new_req_tt__WhiteBalance(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float CrGain,
	float CbGain)
{
	tt__WhiteBalance *_p = ::soap_new_tt__WhiteBalance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance::Mode = Mode;
		_p->tt__WhiteBalance::CrGain = CrGain;
		_p->tt__WhiteBalance::CbGain = CbGain;
	}
	return _p;
}

inline tt__WhiteBalance * soap_new_set_tt__WhiteBalance(
	struct soap *soap,
	enum tt__WhiteBalanceMode Mode,
	float CrGain,
	float CbGain)
{
	tt__WhiteBalance *_p = ::soap_new_tt__WhiteBalance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WhiteBalance::Mode = Mode;
		_p->tt__WhiteBalance::CrGain = CrGain;
		_p->tt__WhiteBalance::CbGain = CbGain;
	}
	return _p;
}

inline int soap_write_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance", p->soap_type() == SOAP_TYPE_tt__WhiteBalance ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__WhiteBalance(struct soap *soap, const char *URL, tt__WhiteBalance const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance", p->soap_type() == SOAP_TYPE_tt__WhiteBalance ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WhiteBalance(struct soap *soap, const char *URL, tt__WhiteBalance const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance", p->soap_type() == SOAP_TYPE_tt__WhiteBalance ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WhiteBalance(struct soap *soap, const char *URL, tt__WhiteBalance const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WhiteBalance", p->soap_type() == SOAP_TYPE_tt__WhiteBalance ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_get_tt__WhiteBalance(struct soap*, tt__WhiteBalance *, const char*, const char*);

inline int soap_read_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__WhiteBalance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WhiteBalance(struct soap *soap, const char *URL, tt__WhiteBalance *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WhiteBalance(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance *p)
{
	if (::soap_read_tt__WhiteBalance(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation_DEFINED
#define SOAP_TYPE_tt__BacklightCompensation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation(struct soap*, const char*, int, const tt__BacklightCompensation *, const char*);
SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_in_tt__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation *, const char*);
SOAP_FMAC1 tt__BacklightCompensation * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation * soap_new_tt__BacklightCompensation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BacklightCompensation(soap, n, NULL, NULL, NULL);
}

inline tt__BacklightCompensation * soap_new_req_tt__BacklightCompensation(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float Level)
{
	tt__BacklightCompensation *_p = ::soap_new_tt__BacklightCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation::Mode = Mode;
		_p->tt__BacklightCompensation::Level = Level;
	}
	return _p;
}

inline tt__BacklightCompensation * soap_new_set_tt__BacklightCompensation(
	struct soap *soap,
	enum tt__BacklightCompensationMode Mode,
	float Level)
{
	tt__BacklightCompensation *_p = ::soap_new_tt__BacklightCompensation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BacklightCompensation::Mode = Mode;
		_p->tt__BacklightCompensation::Level = Level;
	}
	return _p;
}

inline int soap_write_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__BacklightCompensation(struct soap *soap, const char *URL, tt__BacklightCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__BacklightCompensation(struct soap *soap, const char *URL, tt__BacklightCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__BacklightCompensation(struct soap *soap, const char *URL, tt__BacklightCompensation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BacklightCompensation", p->soap_type() == SOAP_TYPE_tt__BacklightCompensation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_get_tt__BacklightCompensation(struct soap*, tt__BacklightCompensation *, const char*, const char*);

inline int soap_read_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__BacklightCompensation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__BacklightCompensation(struct soap *soap, const char *URL, tt__BacklightCompensation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__BacklightCompensation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation *p)
{
	if (::soap_read_tt__BacklightCompensation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange_DEFINED
#define SOAP_TYPE_tt__WideDynamicRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange(struct soap*, const char*, int, const tt__WideDynamicRange *, const char*);
SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_in_tt__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange *, const char*);
SOAP_FMAC1 tt__WideDynamicRange * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange * soap_new_tt__WideDynamicRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__WideDynamicRange(soap, n, NULL, NULL, NULL);
}

inline tt__WideDynamicRange * soap_new_req_tt__WideDynamicRange(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float Level)
{
	tt__WideDynamicRange *_p = ::soap_new_tt__WideDynamicRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange::Mode = Mode;
		_p->tt__WideDynamicRange::Level = Level;
	}
	return _p;
}

inline tt__WideDynamicRange * soap_new_set_tt__WideDynamicRange(
	struct soap *soap,
	enum tt__WideDynamicMode Mode,
	float Level)
{
	tt__WideDynamicRange *_p = ::soap_new_tt__WideDynamicRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__WideDynamicRange::Mode = Mode;
		_p->tt__WideDynamicRange::Level = Level;
	}
	return _p;
}

inline int soap_write_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__WideDynamicRange(struct soap *soap, const char *URL, tt__WideDynamicRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__WideDynamicRange(struct soap *soap, const char *URL, tt__WideDynamicRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__WideDynamicRange(struct soap *soap, const char *URL, tt__WideDynamicRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:WideDynamicRange", p->soap_type() == SOAP_TYPE_tt__WideDynamicRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_get_tt__WideDynamicRange(struct soap*, tt__WideDynamicRange *, const char*, const char*);

inline int soap_read_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__WideDynamicRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__WideDynamicRange(struct soap *soap, const char *URL, tt__WideDynamicRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__WideDynamicRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange *p)
{
	if (::soap_read_tt__WideDynamicRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Exposure_DEFINED
#define SOAP_TYPE_tt__Exposure_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure(struct soap*, const char*, int, const tt__Exposure *, const char*);
SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_in_tt__Exposure(struct soap*, const char*, tt__Exposure *, const char*);
SOAP_FMAC1 tt__Exposure * SOAP_FMAC2 soap_instantiate_tt__Exposure(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure * soap_new_tt__Exposure(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Exposure(soap, n, NULL, NULL, NULL);
}

inline tt__Exposure * soap_new_req_tt__Exposure(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority Priority,
	tt__Rectangle *Window,
	float MinExposureTime,
	float MaxExposureTime,
	float MinGain,
	float MaxGain,
	float MinIris,
	float MaxIris,
	float ExposureTime,
	float Gain,
	float Iris)
{
	tt__Exposure *_p = ::soap_new_tt__Exposure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure::Mode = Mode;
		_p->tt__Exposure::Priority = Priority;
		_p->tt__Exposure::Window = Window;
		_p->tt__Exposure::MinExposureTime = MinExposureTime;
		_p->tt__Exposure::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure::MinGain = MinGain;
		_p->tt__Exposure::MaxGain = MaxGain;
		_p->tt__Exposure::MinIris = MinIris;
		_p->tt__Exposure::MaxIris = MaxIris;
		_p->tt__Exposure::ExposureTime = ExposureTime;
		_p->tt__Exposure::Gain = Gain;
		_p->tt__Exposure::Iris = Iris;
	}
	return _p;
}

inline tt__Exposure * soap_new_set_tt__Exposure(
	struct soap *soap,
	enum tt__ExposureMode Mode,
	enum tt__ExposurePriority Priority,
	tt__Rectangle *Window,
	float MinExposureTime,
	float MaxExposureTime,
	float MinGain,
	float MaxGain,
	float MinIris,
	float MaxIris,
	float ExposureTime,
	float Gain,
	float Iris)
{
	tt__Exposure *_p = ::soap_new_tt__Exposure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Exposure::Mode = Mode;
		_p->tt__Exposure::Priority = Priority;
		_p->tt__Exposure::Window = Window;
		_p->tt__Exposure::MinExposureTime = MinExposureTime;
		_p->tt__Exposure::MaxExposureTime = MaxExposureTime;
		_p->tt__Exposure::MinGain = MinGain;
		_p->tt__Exposure::MaxGain = MaxGain;
		_p->tt__Exposure::MinIris = MinIris;
		_p->tt__Exposure::MaxIris = MaxIris;
		_p->tt__Exposure::ExposureTime = ExposureTime;
		_p->tt__Exposure::Gain = Gain;
		_p->tt__Exposure::Iris = Iris;
	}
	return _p;
}

inline int soap_write_tt__Exposure(struct soap *soap, tt__Exposure const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure", p->soap_type() == SOAP_TYPE_tt__Exposure ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Exposure(struct soap *soap, const char *URL, tt__Exposure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure", p->soap_type() == SOAP_TYPE_tt__Exposure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Exposure(struct soap *soap, const char *URL, tt__Exposure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure", p->soap_type() == SOAP_TYPE_tt__Exposure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Exposure(struct soap *soap, const char *URL, tt__Exposure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Exposure", p->soap_type() == SOAP_TYPE_tt__Exposure ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_get_tt__Exposure(struct soap*, tt__Exposure *, const char*, const char*);

inline int soap_read_tt__Exposure(struct soap *soap, tt__Exposure *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Exposure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Exposure(struct soap *soap, const char *URL, tt__Exposure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Exposure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Exposure(struct soap *soap, tt__Exposure *p)
{
	if (::soap_read_tt__Exposure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension_DEFINED
#define SOAP_TYPE_tt__ImagingSettingsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension(struct soap*, const char*, int, const tt__ImagingSettingsExtension *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension *, const char*);
SOAP_FMAC1 tt__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension * soap_new_tt__ImagingSettingsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettingsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettingsExtension * soap_new_req_tt__ImagingSettingsExtension(
	struct soap *soap)
{
	tt__ImagingSettingsExtension *_p = ::soap_new_tt__ImagingSettingsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettingsExtension * soap_new_set_tt__ImagingSettingsExtension(
	struct soap *soap)
{
	tt__ImagingSettingsExtension *_p = ::soap_new_tt__ImagingSettingsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettingsExtension(struct soap *soap, const char *URL, tt__ImagingSettingsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettingsExtension(struct soap *soap, const char *URL, tt__ImagingSettingsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettingsExtension(struct soap *soap, const char *URL, tt__ImagingSettingsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettingsExtension", p->soap_type() == SOAP_TYPE_tt__ImagingSettingsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *, const char*, const char*);

inline int soap_read_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettingsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettingsExtension(struct soap *soap, const char *URL, tt__ImagingSettingsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettingsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension *p)
{
	if (::soap_read_tt__ImagingSettingsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings_DEFINED
#define SOAP_TYPE_tt__ImagingSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings(struct soap*, const char*, int, const tt__ImagingSettings *, const char*);
SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_in_tt__ImagingSettings(struct soap*, const char*, tt__ImagingSettings *, const char*);
SOAP_FMAC1 tt__ImagingSettings * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings * soap_new_tt__ImagingSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingSettings(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingSettings * soap_new_req_tt__ImagingSettings(
	struct soap *soap)
{
	tt__ImagingSettings *_p = ::soap_new_tt__ImagingSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ImagingSettings * soap_new_set_tt__ImagingSettings(
	struct soap *soap,
	tt__BacklightCompensation *BacklightCompensation,
	float *Brightness,
	float *ColorSaturation,
	float *Contrast,
	tt__Exposure *Exposure,
	tt__FocusConfiguration *Focus,
	enum tt__IrCutFilterMode *IrCutFilter,
	float *Sharpness,
	tt__WideDynamicRange *WideDynamicRange,
	tt__WhiteBalance *WhiteBalance,
	tt__ImagingSettingsExtension *Extension)
{
	tt__ImagingSettings *_p = ::soap_new_tt__ImagingSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingSettings::BacklightCompensation = BacklightCompensation;
		_p->tt__ImagingSettings::Brightness = Brightness;
		_p->tt__ImagingSettings::ColorSaturation = ColorSaturation;
		_p->tt__ImagingSettings::Contrast = Contrast;
		_p->tt__ImagingSettings::Exposure = Exposure;
		_p->tt__ImagingSettings::Focus = Focus;
		_p->tt__ImagingSettings::IrCutFilter = IrCutFilter;
		_p->tt__ImagingSettings::Sharpness = Sharpness;
		_p->tt__ImagingSettings::WideDynamicRange = WideDynamicRange;
		_p->tt__ImagingSettings::WhiteBalance = WhiteBalance;
		_p->tt__ImagingSettings::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings", p->soap_type() == SOAP_TYPE_tt__ImagingSettings ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingSettings(struct soap *soap, const char *URL, tt__ImagingSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings", p->soap_type() == SOAP_TYPE_tt__ImagingSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingSettings(struct soap *soap, const char *URL, tt__ImagingSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings", p->soap_type() == SOAP_TYPE_tt__ImagingSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingSettings(struct soap *soap, const char *URL, tt__ImagingSettings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingSettings", p->soap_type() == SOAP_TYPE_tt__ImagingSettings ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_get_tt__ImagingSettings(struct soap*, tt__ImagingSettings *, const char*, const char*);

inline int soap_read_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingSettings(struct soap *soap, const char *URL, tt__ImagingSettings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings *p)
{
	if (::soap_read_tt__ImagingSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration_DEFINED
#define SOAP_TYPE_tt__FocusConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration(struct soap*, const char*, int, const tt__FocusConfiguration *, const char*);
SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_in_tt__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration *, const char*);
SOAP_FMAC1 tt__FocusConfiguration * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration * soap_new_tt__FocusConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FocusConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__FocusConfiguration * soap_new_req_tt__FocusConfiguration(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float DefaultSpeed,
	float NearLimit,
	float FarLimit)
{
	tt__FocusConfiguration *_p = ::soap_new_tt__FocusConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration::NearLimit = NearLimit;
		_p->tt__FocusConfiguration::FarLimit = FarLimit;
	}
	return _p;
}

inline tt__FocusConfiguration * soap_new_set_tt__FocusConfiguration(
	struct soap *soap,
	enum tt__AutoFocusMode AutoFocusMode,
	float DefaultSpeed,
	float NearLimit,
	float FarLimit)
{
	tt__FocusConfiguration *_p = ::soap_new_tt__FocusConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode;
		_p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed;
		_p->tt__FocusConfiguration::NearLimit = NearLimit;
		_p->tt__FocusConfiguration::FarLimit = FarLimit;
	}
	return _p;
}

inline int soap_write_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FocusConfiguration(struct soap *soap, const char *URL, tt__FocusConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FocusConfiguration(struct soap *soap, const char *URL, tt__FocusConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FocusConfiguration(struct soap *soap, const char *URL, tt__FocusConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FocusConfiguration", p->soap_type() == SOAP_TYPE_tt__FocusConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_get_tt__FocusConfiguration(struct soap*, tt__FocusConfiguration *, const char*, const char*);

inline int soap_read_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FocusConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FocusConfiguration(struct soap *soap, const char *URL, tt__FocusConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FocusConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration *p)
{
	if (::soap_read_tt__FocusConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptions * soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_req_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_set_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap,
	tt__IntRange *RecurringTime,
	tt__DurationRange *RecurringDuration,
	const std::vector<enum tt__PTZPresetTourDirection> & Direction,
	tt__PTZPresetTourStartingConditionOptionsExtension *Extension)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingConditionOptions::Direction = Direction;
		_p->tt__PTZPresetTourStartingConditionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptions * soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_req_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_set_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap,
	const std::vector<std::string> & PresetToken,
	bool *Home,
	tt__Space2DDescription *PanTiltPositionSpace,
	tt__Space1DDescription *ZoomPositionSpace,
	tt__PTZPresetTourPresetDetailOptionsExtension *Extension)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken;
		_p->tt__PTZPresetTourPresetDetailOptions::Home = Home;
		_p->tt__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotOptions(struct soap*, const char*, int, const tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotOptions * soap_new_tt__PTZPresetTourSpotOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotOptions * soap_new_req_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline tt__PTZPresetTourSpotOptions * soap_new_set_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOptions(struct soap*, const char*, int, const tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOptions * soap_new_tt__PTZPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourOptions * soap_new_req_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline tt__PTZPresetTourOptions * soap_new_set_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionExtension * soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_req_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_set_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingCondition(struct soap*, const char*, int, const tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingCondition * soap_new_tt__PTZPresetTourStartingCondition(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingCondition * soap_new_req_tt__PTZPresetTourStartingCondition(
	struct soap *soap)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingCondition * soap_new_set_tt__PTZPresetTourStartingCondition(
	struct soap *soap,
	int *RecurringTime,
	std::string *RecurringDuration,
	enum tt__PTZPresetTourDirection *Direction,
	tt__PTZPresetTourStartingConditionExtension *Extension,
	bool *RandomPresetOrder)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingCondition::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingCondition::Direction = Direction;
		_p->tt__PTZPresetTourStartingCondition::Extension = Extension;
		_p->tt__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingCondition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatusExtension(struct soap*, const char*, int, const tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatusExtension * soap_new_tt__PTZPresetTourStatusExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatusExtension * soap_new_req_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStatusExtension * soap_new_set_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatusExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatus(struct soap*, const char*, int, const tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatus * soap_new_tt__PTZPresetTourStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatus * soap_new_req_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
	}
	return _p;
}

inline tt__PTZPresetTourStatus * soap_new_set_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State,
	tt__PTZPresetTourSpot *CurrentTourSpot,
	tt__PTZPresetTourStatusExtension *Extension)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
		_p->tt__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot;
		_p->tt__PTZPresetTourStatus::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourTypeExtension(struct soap*, const char*, int, const tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourTypeExtension * soap_new_tt__PTZPresetTourTypeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourTypeExtension * soap_new_req_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourTypeExtension * soap_new_set_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourTypeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetail(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetail * soap_new_tt__PTZPresetTourPresetDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetail * soap_new_req_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetail * soap_new_set_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	int __union_PTZPresetTourPresetDetail,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotExtension(struct soap*, const char*, int, const tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotExtension * soap_new_tt__PTZPresetTourSpotExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotExtension * soap_new_req_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSpotExtension * soap_new_set_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpot(struct soap*, const char*, int, const tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpot * soap_new_tt__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpot * soap_new_req_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourSpot * soap_new_set_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail,
	tt__PTZSpeed *Speed,
	std::string *StayTime,
	tt__PTZPresetTourSpotExtension *Extension)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpot::Speed = Speed;
		_p->tt__PTZPresetTourSpot::StayTime = StayTime;
		_p->tt__PTZPresetTourSpot::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourExtension(struct soap*, const char*, int, const tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourExtension * soap_new_tt__PTZPresetTourExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourExtension * soap_new_req_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourExtension * soap_new_set_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PresetTour_DEFINED
#define SOAP_TYPE_tt__PresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PresetTour(struct soap*, const char*, int, const tt__PresetTour *, const char*);
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_in_tt__PresetTour(struct soap*, const char*, tt__PresetTour *, const char*);
SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline tt__PresetTour * soap_new_tt__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PresetTour(soap, n, NULL, NULL, NULL);
}

inline tt__PresetTour * soap_new_req_tt__PresetTour(
	struct soap *soap,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
	}
	return _p;
}

inline tt__PresetTour * soap_new_set_tt__PresetTour(
	struct soap *soap,
	std::string *Name,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition,
	const std::vector<tt__PTZPresetTourSpot *> & TourSpot,
	tt__PTZPresetTourExtension *Extension,
	std::string *token)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Name = Name;
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
		_p->tt__PresetTour::TourSpot = TourSpot;
		_p->tt__PresetTour::Extension = Extension;
		_p->tt__PresetTour::token = token;
	}
	return _p;
}

inline int soap_write_tt__PresetTour(struct soap *soap, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_get_tt__PresetTour(struct soap*, tt__PresetTour *, const char*, const char*);

inline int soap_read_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPreset_DEFINED
#define SOAP_TYPE_tt__PTZPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPreset(struct soap*, const char*, int, const tt__PTZPreset *, const char*);
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_in_tt__PTZPreset(struct soap*, const char*, tt__PTZPreset *, const char*);
SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPreset * soap_new_tt__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPreset(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPreset * soap_new_req_tt__PTZPreset(
	struct soap *soap)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPreset * soap_new_set_tt__PTZPreset(
	struct soap *soap,
	std::string *Name,
	tt__PTZVector *PTZPosition,
	std::string *token)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPreset::Name = Name;
		_p->tt__PTZPreset::PTZPosition = PTZPosition;
		_p->tt__PTZPreset::token = token;
	}
	return _p;
}

inline int soap_write_tt__PTZPreset(struct soap *soap, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_get_tt__PTZPreset(struct soap*, tt__PTZPreset *, const char*, const char*);

inline int soap_read_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed_DEFINED
#define SOAP_TYPE_tt__PTZSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpeed(struct soap*, const char*, int, const tt__PTZSpeed *, const char*);
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_in_tt__PTZSpeed(struct soap*, const char*, tt__PTZSpeed *, const char*);
SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpeed * soap_new_tt__PTZSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpeed(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpeed * soap_new_req_tt__PTZSpeed(
	struct soap *soap)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpeed * soap_new_set_tt__PTZSpeed(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpeed::PanTilt = PanTilt;
		_p->tt__PTZSpeed::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_get_tt__PTZSpeed(struct soap*, tt__PTZSpeed *, const char*, const char*);

inline int soap_read_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription_DEFINED
#define SOAP_TYPE_tt__Space1DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space1DDescription(struct soap*, const char*, int, const tt__Space1DDescription *, const char*);
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_in_tt__Space1DDescription(struct soap*, const char*, tt__Space1DDescription *, const char*);
SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space1DDescription * soap_new_tt__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space1DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space1DDescription * soap_new_req_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline tt__Space1DDescription * soap_new_set_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline int soap_write_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_get_tt__Space1DDescription(struct soap*, tt__Space1DDescription *, const char*, const char*);

inline int soap_read_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space1DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription_DEFINED
#define SOAP_TYPE_tt__Space2DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space2DDescription(struct soap*, const char*, int, const tt__Space2DDescription *, const char*);
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_in_tt__Space2DDescription(struct soap*, const char*, tt__Space2DDescription *, const char*);
SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space2DDescription * soap_new_tt__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space2DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space2DDescription * soap_new_req_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline tt__Space2DDescription * soap_new_set_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline int soap_write_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_get_tt__Space2DDescription(struct soap*, tt__Space2DDescription *, const char*, const char*);

inline int soap_read_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space2DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpacesExtension(struct soap*, const char*, int, const tt__PTZSpacesExtension *, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_in_tt__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension *, const char*);
SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpacesExtension * soap_new_tt__PTZSpacesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpacesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpacesExtension * soap_new_req_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpacesExtension * soap_new_set_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_get_tt__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *, const char*, const char*);

inline int soap_read_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpacesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces_DEFINED
#define SOAP_TYPE_tt__PTZSpaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpaces(struct soap*, const char*, int, const tt__PTZSpaces *, const char*);
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_in_tt__PTZSpaces(struct soap*, const char*, tt__PTZSpaces *, const char*);
SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpaces * soap_new_tt__PTZSpaces(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpaces(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpaces * soap_new_req_tt__PTZSpaces(
	struct soap *soap)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpaces * soap_new_set_tt__PTZSpaces(
	struct soap *soap,
	const std::vector<tt__Space2DDescription *> & AbsolutePanTiltPositionSpace,
	const std::vector<tt__Space1DDescription *> & AbsoluteZoomPositionSpace,
	const std::vector<tt__Space2DDescription *> & RelativePanTiltTranslationSpace,
	const std::vector<tt__Space1DDescription *> & RelativeZoomTranslationSpace,
	const std::vector<tt__Space2DDescription *> & ContinuousPanTiltVelocitySpace,
	const std::vector<tt__Space1DDescription *> & ContinuousZoomVelocitySpace,
	const std::vector<tt__Space1DDescription *> & PanTiltSpeedSpace,
	const std::vector<tt__Space1DDescription *> & ZoomSpeedSpace,
	tt__PTZSpacesExtension *Extension)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace;
		_p->tt__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace;
		_p->tt__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace;
		_p->tt__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace;
		_p->tt__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace;
		_p->tt__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace;
		_p->tt__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace;
		_p->tt__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace;
		_p->tt__PTZSpaces::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_get_tt__PTZSpaces(struct soap*, tt__PTZSpaces *, const char*, const char*);

inline int soap_read_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits_DEFINED
#define SOAP_TYPE_tt__ZoomLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ZoomLimits(struct soap*, const char*, int, const tt__ZoomLimits *, const char*);
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_in_tt__ZoomLimits(struct soap*, const char*, tt__ZoomLimits *, const char*);
SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__ZoomLimits * soap_new_tt__ZoomLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ZoomLimits(soap, n, NULL, NULL, NULL);
}

inline tt__ZoomLimits * soap_new_req_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline tt__ZoomLimits * soap_new_set_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_get_tt__ZoomLimits(struct soap*, tt__ZoomLimits *, const char*, const char*);

inline int soap_read_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ZoomLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits_DEFINED
#define SOAP_TYPE_tt__PanTiltLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PanTiltLimits(struct soap*, const char*, int, const tt__PanTiltLimits *, const char*);
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_in_tt__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits *, const char*);
SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__PanTiltLimits * soap_new_tt__PanTiltLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PanTiltLimits(soap, n, NULL, NULL, NULL);
}

inline tt__PanTiltLimits * soap_new_req_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline tt__PanTiltLimits * soap_new_set_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_get_tt__PanTiltLimits(struct soap*, tt__PanTiltLimits *, const char*, const char*);

inline int soap_read_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PanTiltLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptionsExtension(struct soap*, const char*, int, const tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_in_tt__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptionsExtension * soap_new_tt__ReverseOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptionsExtension * soap_new_req_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptionsExtension * soap_new_set_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_get_tt__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *, const char*, const char*);

inline int soap_read_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions_DEFINED
#define SOAP_TYPE_tt__ReverseOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptions(struct soap*, const char*, int, const tt__ReverseOptions *, const char*);
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_in_tt__ReverseOptions(struct soap*, const char*, tt__ReverseOptions *, const char*);
SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptions * soap_new_tt__ReverseOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptions * soap_new_req_tt__ReverseOptions(
	struct soap *soap)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptions * soap_new_set_tt__ReverseOptions(
	struct soap *soap,
	const std::vector<enum tt__ReverseMode> & Mode,
	tt__ReverseOptionsExtension *Extension)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseOptions::Mode = Mode;
		_p->tt__ReverseOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_get_tt__ReverseOptions(struct soap*, tt__ReverseOptions *, const char*, const char*);

inline int soap_read_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptionsExtension(struct soap*, const char*, int, const tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_in_tt__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptionsExtension * soap_new_tt__EFlipOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptionsExtension * soap_new_req_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptionsExtension * soap_new_set_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_get_tt__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *, const char*, const char*);

inline int soap_read_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions_DEFINED
#define SOAP_TYPE_tt__EFlipOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptions(struct soap*, const char*, int, const tt__EFlipOptions *, const char*);
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_in_tt__EFlipOptions(struct soap*, const char*, tt__EFlipOptions *, const char*);
SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptions * soap_new_tt__EFlipOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptions(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptions * soap_new_req_tt__EFlipOptions(
	struct soap *soap)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptions * soap_new_set_tt__EFlipOptions(
	struct soap *soap,
	const std::vector<enum tt__EFlipMode> & Mode,
	tt__EFlipOptionsExtension *Extension)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipOptions::Mode = Mode;
		_p->tt__EFlipOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_get_tt__EFlipOptions(struct soap*, tt__EFlipOptions *, const char*, const char*);

inline int soap_read_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptionsExtension * soap_new_tt__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptionsExtension * soap_new_req_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptionsExtension * soap_new_set_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptions(struct soap*, const char*, int, const tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptions * soap_new_tt__PTControlDirectionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptions * soap_new_req_tt__PTControlDirectionOptions(
	struct soap *soap)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptions * soap_new_set_tt__PTControlDirectionOptions(
	struct soap *soap,
	tt__EFlipOptions *EFlip,
	tt__ReverseOptions *Reverse,
	tt__PTControlDirectionOptionsExtension *Extension)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionOptions::EFlip = EFlip;
		_p->tt__PTControlDirectionOptions::Reverse = Reverse;
		_p->tt__PTControlDirectionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions2(struct soap*, const char*, int, const tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions2 * soap_new_tt__PTZConfigurationOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions2 * soap_new_req_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationOptions2 * soap_new_set_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions(struct soap*, const char*, int, const tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions * soap_new_tt__PTZConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions * soap_new_req_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
	}
	return _p;
}

inline tt__PTZConfigurationOptions * soap_new_set_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout,
	tt__PTControlDirectionOptions *PTControlDirection,
	tt__PTZConfigurationOptions2 *Extension,
	std::string *PTZRamps)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
		_p->tt__PTZConfigurationOptions::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationOptions::Extension = Extension;
		_p->tt__PTZConfigurationOptions::PTZRamps = PTZRamps;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Reverse_DEFINED
#define SOAP_TYPE_tt__Reverse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Reverse(struct soap*, const char*, int, const tt__Reverse *, const char*);
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_in_tt__Reverse(struct soap*, const char*, tt__Reverse *, const char*);
SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline tt__Reverse * soap_new_tt__Reverse(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Reverse(soap, n, NULL, NULL, NULL);
}

inline tt__Reverse * soap_new_req_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline tt__Reverse * soap_new_set_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__Reverse(struct soap *soap, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_get_tt__Reverse(struct soap*, tt__Reverse *, const char*, const char*);

inline int soap_read_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Reverse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlip_DEFINED
#define SOAP_TYPE_tt__EFlip_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlip(struct soap*, const char*, int, const tt__EFlip *, const char*);
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_in_tt__EFlip(struct soap*, const char*, tt__EFlip *, const char*);
SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlip * soap_new_tt__EFlip(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlip(soap, n, NULL, NULL, NULL);
}

inline tt__EFlip * soap_new_req_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline tt__EFlip * soap_new_set_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__EFlip(struct soap *soap, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_get_tt__EFlip(struct soap*, tt__EFlip *, const char*, const char*);

inline int soap_read_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlip(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionExtension(struct soap*, const char*, int, const tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionExtension * soap_new_tt__PTControlDirectionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionExtension * soap_new_req_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionExtension * soap_new_set_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection_DEFINED
#define SOAP_TYPE_tt__PTControlDirection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirection(struct soap*, const char*, int, const tt__PTControlDirection *, const char*);
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_in_tt__PTControlDirection(struct soap*, const char*, tt__PTControlDirection *, const char*);
SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirection * soap_new_tt__PTControlDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirection(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirection * soap_new_req_tt__PTControlDirection(
	struct soap *soap)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirection * soap_new_set_tt__PTControlDirection(
	struct soap *soap,
	tt__EFlip *EFlip,
	tt__Reverse *Reverse,
	tt__PTControlDirectionExtension *Extension)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirection::EFlip = EFlip;
		_p->tt__PTControlDirection::Reverse = Reverse;
		_p->tt__PTControlDirection::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_get_tt__PTControlDirection(struct soap*, tt__PTControlDirection *, const char*, const char*);

inline int soap_read_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension2(struct soap*, const char*, int, const tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension2 * soap_new_tt__PTZConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension2 * soap_new_req_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension2 * soap_new_set_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension(struct soap*, const char*, int, const tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension * soap_new_tt__PTZConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension * soap_new_req_tt__PTZConfigurationExtension(
	struct soap *soap)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension * soap_new_set_tt__PTZConfigurationExtension(
	struct soap *soap,
	tt__PTControlDirection *PTControlDirection,
	tt__PTZConfigurationExtension2 *Extension)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationExtension::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration_DEFINED
#define SOAP_TYPE_tt__PTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfiguration(struct soap*, const char*, int, const tt__PTZConfiguration *, const char*);
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_in_tt__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration *, const char*);
SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfiguration * soap_new_tt__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfiguration * soap_new_req_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZConfiguration * soap_new_set_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	std::string *DefaultAbsolutePantTiltPositionSpace,
	std::string *DefaultAbsoluteZoomPositionSpace,
	std::string *DefaultRelativePanTiltTranslationSpace,
	std::string *DefaultRelativeZoomTranslationSpace,
	std::string *DefaultContinuousPanTiltVelocitySpace,
	std::string *DefaultContinuousZoomVelocitySpace,
	tt__PTZSpeed *DefaultPTZSpeed,
	std::string *DefaultPTZTimeout,
	tt__PanTiltLimits *PanTiltLimits,
	tt__ZoomLimits *ZoomLimits,
	tt__PTZConfigurationExtension *Extension,
	int *MoveRamp,
	int *PresetRamp,
	int *PresetTourRamp,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace;
		_p->tt__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace;
		_p->tt__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace;
		_p->tt__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace;
		_p->tt__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace;
		_p->tt__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace;
		_p->tt__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed;
		_p->tt__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout;
		_p->tt__PTZConfiguration::PanTiltLimits = PanTiltLimits;
		_p->tt__PTZConfiguration::ZoomLimits = ZoomLimits;
		_p->tt__PTZConfiguration::Extension = Extension;
		_p->tt__PTZConfiguration::MoveRamp = MoveRamp;
		_p->tt__PTZConfiguration::PresetRamp = PresetRamp;
		_p->tt__PTZConfiguration::PresetTourRamp = PresetTourRamp;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_get_tt__PTZConfiguration(struct soap*, tt__PTZConfiguration *, const char*, const char*);

inline int soap_read_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupportedExtension * soap_new_tt__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupportedExtension * soap_new_req_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSupportedExtension * soap_new_set_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupportedExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupported(struct soap*, const char*, int, const tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupported * soap_new_tt__PTZPresetTourSupported(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupported(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupported * soap_new_req_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
	}
	return _p;
}

inline tt__PTZPresetTourSupported * soap_new_set_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours,
	const std::vector<enum tt__PTZPresetTourOperation> & PTZPresetTourOperation,
	tt__PTZPresetTourSupportedExtension *Extension)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
		_p->tt__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation;
		_p->tt__PTZPresetTourSupported::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupported(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension2(struct soap*, const char*, int, const tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_in_tt__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension2 * soap_new_tt__PTZNodeExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension2 * soap_new_req_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension2 * soap_new_set_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_get_tt__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension(struct soap*, const char*, int, const tt__PTZNodeExtension *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_in_tt__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension * soap_new_tt__PTZNodeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension * soap_new_req_tt__PTZNodeExtension(
	struct soap *soap)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension * soap_new_set_tt__PTZNodeExtension(
	struct soap *soap,
	tt__PTZPresetTourSupported *SupportedPresetTour,
	tt__PTZNodeExtension2 *Extension)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour;
		_p->tt__PTZNodeExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_get_tt__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNode_DEFINED
#define SOAP_TYPE_tt__PTZNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNode(struct soap*, const char*, int, const tt__PTZNode *, const char*);
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_in_tt__PTZNode(struct soap*, const char*, tt__PTZNode *, const char*);
SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNode * soap_new_tt__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNode(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNode * soap_new_req_tt__PTZNode(
	struct soap *soap,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZNode * soap_new_set_tt__PTZNode(
	struct soap *soap,
	std::string *Name,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__PTZNodeExtension *Extension,
	bool *FixedHomePosition,
	bool *GeoMove,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::Name = Name;
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__PTZNode::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__PTZNode::Extension = Extension;
		_p->tt__PTZNode::FixedHomePosition = FixedHomePosition;
		_p->tt__PTZNode::GeoMove = GeoMove;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZNode(struct soap *soap, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_get_tt__PTZNode(struct soap*, tt__PTZNode *, const char*, const char*);

inline int soap_read_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPAddress_DEFINED
#define SOAP_TYPE_tt__IPAddress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddress(struct soap*, const char*, int, const tt__IPAddress *, const char*);
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_in_tt__IPAddress(struct soap*, const char*, tt__IPAddress *, const char*);
SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddress * soap_new_tt__IPAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddress(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddress * soap_new_req_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type)
{
	tt__IPAddress *_p = ::soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
	}
	return _p;
}

inline tt__IPAddress * soap_new_set_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type,
	std::string *IPv4Address,
	std::string *IPv6Address)
{
	tt__IPAddress *_p = ::soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
		_p->tt__IPAddress::IPv4Address = IPv4Address;
		_p->tt__IPAddress::IPv6Address = IPv6Address;
	}
	return _p;
}

inline int soap_write_tt__IPAddress(struct soap *soap, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_get_tt__IPAddress(struct soap*, tt__IPAddress *, const char*, const char*);

inline int soap_read_tt__IPAddress(struct soap *soap, tt__IPAddress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPAddress(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPAddress(struct soap *soap, tt__IPAddress *p)
{
	if (::soap_read_tt__IPAddress(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MediaUri_DEFINED
#define SOAP_TYPE_tt__MediaUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaUri(struct soap*, const char*, int, const tt__MediaUri *, const char*);
SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_in_tt__MediaUri(struct soap*, const char*, tt__MediaUri *, const char*);
SOAP_FMAC1 tt__MediaUri * SOAP_FMAC2 soap_instantiate_tt__MediaUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaUri * soap_new_tt__MediaUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaUri(soap, n, NULL, NULL, NULL);
}

inline tt__MediaUri * soap_new_req_tt__MediaUri(
	struct soap *soap,
	const std::string& Uri,
	bool InvalidAfterConnect,
	bool InvalidAfterReboot,
	const std::string& Timeout)
{
	tt__MediaUri *_p = ::soap_new_tt__MediaUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaUri::Uri = Uri;
		_p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect;
		_p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot;
		_p->tt__MediaUri::Timeout = Timeout;
	}
	return _p;
}

inline tt__MediaUri * soap_new_set_tt__MediaUri(
	struct soap *soap,
	const std::string& Uri,
	bool InvalidAfterConnect,
	bool InvalidAfterReboot,
	const std::string& Timeout)
{
	tt__MediaUri *_p = ::soap_new_tt__MediaUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaUri::Uri = Uri;
		_p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect;
		_p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot;
		_p->tt__MediaUri::Timeout = Timeout;
	}
	return _p;
}

inline int soap_write_tt__MediaUri(struct soap *soap, tt__MediaUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaUri", p->soap_type() == SOAP_TYPE_tt__MediaUri ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MediaUri(struct soap *soap, const char *URL, tt__MediaUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaUri", p->soap_type() == SOAP_TYPE_tt__MediaUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MediaUri(struct soap *soap, const char *URL, tt__MediaUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaUri", p->soap_type() == SOAP_TYPE_tt__MediaUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MediaUri(struct soap *soap, const char *URL, tt__MediaUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaUri", p->soap_type() == SOAP_TYPE_tt__MediaUri ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_get_tt__MediaUri(struct soap*, tt__MediaUri *, const char*, const char*);

inline int soap_read_tt__MediaUri(struct soap *soap, tt__MediaUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MediaUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MediaUri(struct soap *soap, const char *URL, tt__MediaUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MediaUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MediaUri(struct soap *soap, tt__MediaUri *p)
{
	if (::soap_read_tt__MediaUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Transport_DEFINED
#define SOAP_TYPE_tt__Transport_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Transport(struct soap*, const char*, int, const tt__Transport *, const char*);
SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_in_tt__Transport(struct soap*, const char*, tt__Transport *, const char*);
SOAP_FMAC1 tt__Transport * SOAP_FMAC2 soap_instantiate_tt__Transport(struct soap*, int, const char*, const char*, size_t*);

inline tt__Transport * soap_new_tt__Transport(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Transport(soap, n, NULL, NULL, NULL);
}

inline tt__Transport * soap_new_req_tt__Transport(
	struct soap *soap,
	enum tt__TransportProtocol Protocol)
{
	tt__Transport *_p = ::soap_new_tt__Transport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Transport::Protocol = Protocol;
	}
	return _p;
}

inline tt__Transport * soap_new_set_tt__Transport(
	struct soap *soap,
	enum tt__TransportProtocol Protocol,
	tt__Transport *Tunnel)
{
	tt__Transport *_p = ::soap_new_tt__Transport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Transport::Protocol = Protocol;
		_p->tt__Transport::Tunnel = Tunnel;
	}
	return _p;
}

inline int soap_write_tt__Transport(struct soap *soap, tt__Transport const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transport", p->soap_type() == SOAP_TYPE_tt__Transport ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Transport(struct soap *soap, const char *URL, tt__Transport const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transport", p->soap_type() == SOAP_TYPE_tt__Transport ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Transport(struct soap *soap, const char *URL, tt__Transport const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transport", p->soap_type() == SOAP_TYPE_tt__Transport ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Transport(struct soap *soap, const char *URL, tt__Transport const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Transport", p->soap_type() == SOAP_TYPE_tt__Transport ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_get_tt__Transport(struct soap*, tt__Transport *, const char*, const char*);

inline int soap_read_tt__Transport(struct soap *soap, tt__Transport *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Transport(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Transport(struct soap *soap, const char *URL, tt__Transport *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Transport(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Transport(struct soap *soap, tt__Transport *p)
{
	if (::soap_read_tt__Transport(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StreamSetup_DEFINED
#define SOAP_TYPE_tt__StreamSetup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamSetup(struct soap*, const char*, int, const tt__StreamSetup *, const char*);
SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_in_tt__StreamSetup(struct soap*, const char*, tt__StreamSetup *, const char*);
SOAP_FMAC1 tt__StreamSetup * SOAP_FMAC2 soap_instantiate_tt__StreamSetup(struct soap*, int, const char*, const char*, size_t*);

inline tt__StreamSetup * soap_new_tt__StreamSetup(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__StreamSetup(soap, n, NULL, NULL, NULL);
}

inline tt__StreamSetup * soap_new_req_tt__StreamSetup(
	struct soap *soap,
	enum tt__StreamType Stream,
	tt__Transport *Transport)
{
	tt__StreamSetup *_p = ::soap_new_tt__StreamSetup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamSetup::Stream = Stream;
		_p->tt__StreamSetup::Transport = Transport;
	}
	return _p;
}

inline tt__StreamSetup * soap_new_set_tt__StreamSetup(
	struct soap *soap,
	enum tt__StreamType Stream,
	tt__Transport *Transport)
{
	tt__StreamSetup *_p = ::soap_new_tt__StreamSetup(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__StreamSetup::Stream = Stream;
		_p->tt__StreamSetup::Transport = Transport;
	}
	return _p;
}

inline int soap_write_tt__StreamSetup(struct soap *soap, tt__StreamSetup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamSetup", p->soap_type() == SOAP_TYPE_tt__StreamSetup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__StreamSetup(struct soap *soap, const char *URL, tt__StreamSetup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamSetup", p->soap_type() == SOAP_TYPE_tt__StreamSetup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StreamSetup(struct soap *soap, const char *URL, tt__StreamSetup const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamSetup", p->soap_type() == SOAP_TYPE_tt__StreamSetup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StreamSetup(struct soap *soap, const char *URL, tt__StreamSetup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:StreamSetup", p->soap_type() == SOAP_TYPE_tt__StreamSetup ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_get_tt__StreamSetup(struct soap*, tt__StreamSetup *, const char*, const char*);

inline int soap_read_tt__StreamSetup(struct soap *soap, tt__StreamSetup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__StreamSetup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StreamSetup(struct soap *soap, const char *URL, tt__StreamSetup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StreamSetup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StreamSetup(struct soap *soap, tt__StreamSetup *p)
{
	if (::soap_read_tt__StreamSetup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration_DEFINED
#define SOAP_TYPE_tt__MulticastConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MulticastConfiguration(struct soap*, const char*, int, const tt__MulticastConfiguration *, const char*);
SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_in_tt__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration *, const char*);
SOAP_FMAC1 tt__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_tt__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MulticastConfiguration * soap_new_tt__MulticastConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MulticastConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__MulticastConfiguration * soap_new_req_tt__MulticastConfiguration(
	struct soap *soap,
	tt__IPAddress *Address,
	int Port,
	int TTL,
	bool AutoStart)
{
	tt__MulticastConfiguration *_p = ::soap_new_tt__MulticastConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MulticastConfiguration::Address = Address;
		_p->tt__MulticastConfiguration::Port = Port;
		_p->tt__MulticastConfiguration::TTL = TTL;
		_p->tt__MulticastConfiguration::AutoStart = AutoStart;
	}
	return _p;
}

inline tt__MulticastConfiguration * soap_new_set_tt__MulticastConfiguration(
	struct soap *soap,
	tt__IPAddress *Address,
	int Port,
	int TTL,
	bool AutoStart)
{
	tt__MulticastConfiguration *_p = ::soap_new_tt__MulticastConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MulticastConfiguration::Address = Address;
		_p->tt__MulticastConfiguration::Port = Port;
		_p->tt__MulticastConfiguration::TTL = TTL;
		_p->tt__MulticastConfiguration::AutoStart = AutoStart;
	}
	return _p;
}

inline int soap_write_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MulticastConfiguration", p->soap_type() == SOAP_TYPE_tt__MulticastConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MulticastConfiguration(struct soap *soap, const char *URL, tt__MulticastConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MulticastConfiguration", p->soap_type() == SOAP_TYPE_tt__MulticastConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MulticastConfiguration(struct soap *soap, const char *URL, tt__MulticastConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MulticastConfiguration", p->soap_type() == SOAP_TYPE_tt__MulticastConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MulticastConfiguration(struct soap *soap, const char *URL, tt__MulticastConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MulticastConfiguration", p->soap_type() == SOAP_TYPE_tt__MulticastConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_get_tt__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *, const char*, const char*);

inline int soap_read_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MulticastConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MulticastConfiguration(struct soap *soap, const char *URL, tt__MulticastConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MulticastConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration *p)
{
	if (::soap_read_tt__MulticastConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__AudioDecoderConfigurationOptionsExtension *_p = ::soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__AudioDecoderConfigurationOptionsExtension *_p = ::soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioDecoderConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension *p)
{
	if (::soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions_DEFINED
#define SOAP_TYPE_tt__G726DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G726DecOptions(struct soap*, const char*, int, const tt__G726DecOptions *, const char*);
SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_in_tt__G726DecOptions(struct soap*, const char*, tt__G726DecOptions *, const char*);
SOAP_FMAC1 tt__G726DecOptions * SOAP_FMAC2 soap_instantiate_tt__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G726DecOptions * soap_new_tt__G726DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__G726DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__G726DecOptions * soap_new_req_tt__G726DecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__G726DecOptions *_p = ::soap_new_tt__G726DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G726DecOptions::Bitrate = Bitrate;
		_p->tt__G726DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__G726DecOptions * soap_new_set_tt__G726DecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__G726DecOptions *_p = ::soap_new_tt__G726DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G726DecOptions::Bitrate = Bitrate;
		_p->tt__G726DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline int soap_write_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G726DecOptions", p->soap_type() == SOAP_TYPE_tt__G726DecOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__G726DecOptions(struct soap *soap, const char *URL, tt__G726DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G726DecOptions", p->soap_type() == SOAP_TYPE_tt__G726DecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__G726DecOptions(struct soap *soap, const char *URL, tt__G726DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G726DecOptions", p->soap_type() == SOAP_TYPE_tt__G726DecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__G726DecOptions(struct soap *soap, const char *URL, tt__G726DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G726DecOptions", p->soap_type() == SOAP_TYPE_tt__G726DecOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_get_tt__G726DecOptions(struct soap*, tt__G726DecOptions *, const char*, const char*);

inline int soap_read_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__G726DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__G726DecOptions(struct soap *soap, const char *URL, tt__G726DecOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__G726DecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions *p)
{
	if (::soap_read_tt__G726DecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions_DEFINED
#define SOAP_TYPE_tt__AACDecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AACDecOptions(struct soap*, const char*, int, const tt__AACDecOptions *, const char*);
SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_in_tt__AACDecOptions(struct soap*, const char*, tt__AACDecOptions *, const char*);
SOAP_FMAC1 tt__AACDecOptions * SOAP_FMAC2 soap_instantiate_tt__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AACDecOptions * soap_new_tt__AACDecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AACDecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AACDecOptions * soap_new_req_tt__AACDecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__AACDecOptions *_p = ::soap_new_tt__AACDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AACDecOptions::Bitrate = Bitrate;
		_p->tt__AACDecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__AACDecOptions * soap_new_set_tt__AACDecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__AACDecOptions *_p = ::soap_new_tt__AACDecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AACDecOptions::Bitrate = Bitrate;
		_p->tt__AACDecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline int soap_write_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AACDecOptions", p->soap_type() == SOAP_TYPE_tt__AACDecOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AACDecOptions(struct soap *soap, const char *URL, tt__AACDecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AACDecOptions", p->soap_type() == SOAP_TYPE_tt__AACDecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AACDecOptions(struct soap *soap, const char *URL, tt__AACDecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AACDecOptions", p->soap_type() == SOAP_TYPE_tt__AACDecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AACDecOptions(struct soap *soap, const char *URL, tt__AACDecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AACDecOptions", p->soap_type() == SOAP_TYPE_tt__AACDecOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_get_tt__AACDecOptions(struct soap*, tt__AACDecOptions *, const char*, const char*);

inline int soap_read_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AACDecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AACDecOptions(struct soap *soap, const char *URL, tt__AACDecOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AACDecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions *p)
{
	if (::soap_read_tt__AACDecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions_DEFINED
#define SOAP_TYPE_tt__G711DecOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G711DecOptions(struct soap*, const char*, int, const tt__G711DecOptions *, const char*);
SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_in_tt__G711DecOptions(struct soap*, const char*, tt__G711DecOptions *, const char*);
SOAP_FMAC1 tt__G711DecOptions * SOAP_FMAC2 soap_instantiate_tt__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G711DecOptions * soap_new_tt__G711DecOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__G711DecOptions(soap, n, NULL, NULL, NULL);
}

inline tt__G711DecOptions * soap_new_req_tt__G711DecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__G711DecOptions *_p = ::soap_new_tt__G711DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G711DecOptions::Bitrate = Bitrate;
		_p->tt__G711DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline tt__G711DecOptions * soap_new_set_tt__G711DecOptions(
	struct soap *soap,
	tt__IntItems *Bitrate,
	tt__IntItems *SampleRateRange)
{
	tt__G711DecOptions *_p = ::soap_new_tt__G711DecOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__G711DecOptions::Bitrate = Bitrate;
		_p->tt__G711DecOptions::SampleRateRange = SampleRateRange;
	}
	return _p;
}

inline int soap_write_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G711DecOptions", p->soap_type() == SOAP_TYPE_tt__G711DecOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__G711DecOptions(struct soap *soap, const char *URL, tt__G711DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G711DecOptions", p->soap_type() == SOAP_TYPE_tt__G711DecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__G711DecOptions(struct soap *soap, const char *URL, tt__G711DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G711DecOptions", p->soap_type() == SOAP_TYPE_tt__G711DecOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__G711DecOptions(struct soap *soap, const char *URL, tt__G711DecOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:G711DecOptions", p->soap_type() == SOAP_TYPE_tt__G711DecOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_get_tt__G711DecOptions(struct soap*, tt__G711DecOptions *, const char*, const char*);

inline int soap_read_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__G711DecOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__G711DecOptions(struct soap *soap, const char *URL, tt__G711DecOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__G711DecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions *p)
{
	if (::soap_read_tt__G711DecOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptions * soap_new_tt__AudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfigurationOptions * soap_new_req_tt__AudioDecoderConfigurationOptions(
	struct soap *soap)
{
	tt__AudioDecoderConfigurationOptions *_p = ::soap_new_tt__AudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioDecoderConfigurationOptions * soap_new_set_tt__AudioDecoderConfigurationOptions(
	struct soap *soap,
	tt__AACDecOptions *AACDecOptions,
	tt__G711DecOptions *G711DecOptions,
	tt__G726DecOptions *G726DecOptions,
	tt__AudioDecoderConfigurationOptionsExtension *Extension)
{
	tt__AudioDecoderConfigurationOptions *_p = ::soap_new_tt__AudioDecoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioDecoderConfigurationOptions::AACDecOptions = AACDecOptions;
		_p->tt__AudioDecoderConfigurationOptions::G711DecOptions = G711DecOptions;
		_p->tt__AudioDecoderConfigurationOptions::G726DecOptions = G726DecOptions;
		_p->tt__AudioDecoderConfigurationOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioDecoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioDecoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioDecoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioDecoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioDecoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions *p)
{
	if (::soap_read_tt__AudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfiguration(struct soap*, const char*, int, const tt__AudioDecoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration *, const char*);
SOAP_FMAC1 tt__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfiguration * soap_new_tt__AudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioDecoderConfiguration * soap_new_req_tt__AudioDecoderConfiguration(
	struct soap *soap,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioDecoderConfiguration *_p = ::soap_new_tt__AudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioDecoderConfiguration * soap_new_set_tt__AudioDecoderConfiguration(
	struct soap *soap,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioDecoderConfiguration *_p = ::soap_new_tt__AudioDecoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioDecoderConfiguration(struct soap *soap, const char *URL, tt__AudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioDecoderConfiguration(struct soap *soap, const char *URL, tt__AudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioDecoderConfiguration(struct soap *soap, const char *URL, tt__AudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioDecoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioDecoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioDecoderConfiguration(struct soap *soap, const char *URL, tt__AudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *p)
{
	if (::soap_read_tt__AudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfigurationOptions(struct soap*, const char*, int, const tt__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfigurationOptions * soap_new_tt__AudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutputConfigurationOptions * soap_new_req_tt__AudioOutputConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & OutputTokensAvailable,
	tt__IntRange *OutputLevelRange)
{
	tt__AudioOutputConfigurationOptions *_p = ::soap_new_tt__AudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable;
		_p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange;
	}
	return _p;
}

inline tt__AudioOutputConfigurationOptions * soap_new_set_tt__AudioOutputConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & OutputTokensAvailable,
	const std::vector<std::string> & SendPrimacyOptions,
	tt__IntRange *OutputLevelRange)
{
	tt__AudioOutputConfigurationOptions *_p = ::soap_new_tt__AudioOutputConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable;
		_p->tt__AudioOutputConfigurationOptions::SendPrimacyOptions = SendPrimacyOptions;
		_p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange;
	}
	return _p;
}

inline int soap_write_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioOutputConfigurationOptions(struct soap *soap, const char *URL, tt__AudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioOutputConfigurationOptions(struct soap *soap, const char *URL, tt__AudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioOutputConfigurationOptions(struct soap *soap, const char *URL, tt__AudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioOutputConfigurationOptions(struct soap *soap, const char *URL, tt__AudioOutputConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions *p)
{
	if (::soap_read_tt__AudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfiguration(struct soap*, const char*, int, const tt__AudioOutputConfiguration *, const char*);
SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_in_tt__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration *, const char*);
SOAP_FMAC1 tt__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfiguration * soap_new_tt__AudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutputConfiguration * soap_new_req_tt__AudioOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	int OutputLevel,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioOutputConfiguration *_p = ::soap_new_tt__AudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfiguration::OutputToken = OutputToken;
		_p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioOutputConfiguration * soap_new_set_tt__AudioOutputConfiguration(
	struct soap *soap,
	const std::string& OutputToken,
	std::string *SendPrimacy,
	int OutputLevel,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioOutputConfiguration *_p = ::soap_new_tt__AudioOutputConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioOutputConfiguration::OutputToken = OutputToken;
		_p->tt__AudioOutputConfiguration::SendPrimacy = SendPrimacy;
		_p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioOutputConfiguration(struct soap *soap, const char *URL, tt__AudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioOutputConfiguration(struct soap *soap, const char *URL, tt__AudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioOutputConfiguration(struct soap *soap, const char *URL, tt__AudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutputConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioOutputConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_get_tt__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioOutputConfiguration(struct soap *soap, const char *URL, tt__AudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *p)
{
	if (::soap_read_tt__AudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioOutput_DEFINED
#define SOAP_TYPE_tt__AudioOutput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutput(struct soap*, const char*, int, const tt__AudioOutput *, const char*);
SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_in_tt__AudioOutput(struct soap*, const char*, tt__AudioOutput *, const char*);
SOAP_FMAC1 tt__AudioOutput * SOAP_FMAC2 soap_instantiate_tt__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutput * soap_new_tt__AudioOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioOutput(soap, n, NULL, NULL, NULL);
}

inline tt__AudioOutput * soap_new_req_tt__AudioOutput(
	struct soap *soap,
	const std::string& token__1)
{
	tt__AudioOutput *_p = ::soap_new_tt__AudioOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioOutput * soap_new_set_tt__AudioOutput(
	struct soap *soap,
	const std::string& token__1)
{
	tt__AudioOutput *_p = ::soap_new_tt__AudioOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioOutput(struct soap *soap, tt__AudioOutput const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutput", p->soap_type() == SOAP_TYPE_tt__AudioOutput ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioOutput(struct soap *soap, const char *URL, tt__AudioOutput const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutput", p->soap_type() == SOAP_TYPE_tt__AudioOutput ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioOutput(struct soap *soap, const char *URL, tt__AudioOutput const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutput", p->soap_type() == SOAP_TYPE_tt__AudioOutput ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioOutput(struct soap *soap, const char *URL, tt__AudioOutput const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioOutput", p->soap_type() == SOAP_TYPE_tt__AudioOutput ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_get_tt__AudioOutput(struct soap*, tt__AudioOutput *, const char*, const char*);

inline int soap_read_tt__AudioOutput(struct soap *soap, tt__AudioOutput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioOutput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioOutput(struct soap *soap, const char *URL, tt__AudioOutput *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioOutput(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioOutput(struct soap *soap, tt__AudioOutput *p)
{
	if (::soap_read_tt__AudioOutput(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, int, const tt__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptionsExtension * soap_new_tt__PTZStatusFilterOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatusFilterOptionsExtension * soap_new_req_tt__PTZStatusFilterOptionsExtension(
	struct soap *soap)
{
	tt__PTZStatusFilterOptionsExtension *_p = ::soap_new_tt__PTZStatusFilterOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZStatusFilterOptionsExtension * soap_new_set_tt__PTZStatusFilterOptionsExtension(
	struct soap *soap)
{
	tt__PTZStatusFilterOptionsExtension *_p = ::soap_new_tt__PTZStatusFilterOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZStatusFilterOptionsExtension(struct soap *soap, const char *URL, tt__PTZStatusFilterOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZStatusFilterOptionsExtension(struct soap *soap, const char *URL, tt__PTZStatusFilterOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZStatusFilterOptionsExtension(struct soap *soap, const char *URL, tt__PTZStatusFilterOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZStatusFilterOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZStatusFilterOptionsExtension(struct soap *soap, const char *URL, tt__PTZStatusFilterOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZStatusFilterOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension *p)
{
	if (::soap_read_tt__PTZStatusFilterOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions_DEFINED
#define SOAP_TYPE_tt__PTZStatusFilterOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptions(struct soap*, const char*, int, const tt__PTZStatusFilterOptions *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions *, const char*);
SOAP_FMAC1 tt__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptions * soap_new_tt__PTZStatusFilterOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatusFilterOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatusFilterOptions * soap_new_req_tt__PTZStatusFilterOptions(
	struct soap *soap,
	bool PanTiltStatusSupported,
	bool ZoomStatusSupported)
{
	tt__PTZStatusFilterOptions *_p = ::soap_new_tt__PTZStatusFilterOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported;
		_p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported;
	}
	return _p;
}

inline tt__PTZStatusFilterOptions * soap_new_set_tt__PTZStatusFilterOptions(
	struct soap *soap,
	bool PanTiltStatusSupported,
	bool ZoomStatusSupported,
	bool *PanTiltPositionSupported,
	bool *ZoomPositionSupported,
	tt__PTZStatusFilterOptionsExtension *Extension)
{
	tt__PTZStatusFilterOptions *_p = ::soap_new_tt__PTZStatusFilterOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported;
		_p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported;
		_p->tt__PTZStatusFilterOptions::PanTiltPositionSupported = PanTiltPositionSupported;
		_p->tt__PTZStatusFilterOptions::ZoomPositionSupported = ZoomPositionSupported;
		_p->tt__PTZStatusFilterOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptions", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZStatusFilterOptions(struct soap *soap, const char *URL, tt__PTZStatusFilterOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptions", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZStatusFilterOptions(struct soap *soap, const char *URL, tt__PTZStatusFilterOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptions", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZStatusFilterOptions(struct soap *soap, const char *URL, tt__PTZStatusFilterOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatusFilterOptions", p->soap_type() == SOAP_TYPE_tt__PTZStatusFilterOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *, const char*, const char*);

inline int soap_read_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZStatusFilterOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZStatusFilterOptions(struct soap *soap, const char *URL, tt__PTZStatusFilterOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZStatusFilterOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions *p)
{
	if (::soap_read_tt__PTZStatusFilterOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_req_tt__MetadataConfigurationOptionsExtension2(
	struct soap *soap)
{
	tt__MetadataConfigurationOptionsExtension2 *_p = ::soap_new_tt__MetadataConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_set_tt__MetadataConfigurationOptionsExtension2(
	struct soap *soap)
{
	tt__MetadataConfigurationOptionsExtension2 *_p = ::soap_new_tt__MetadataConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MetadataConfigurationOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MetadataConfigurationOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 *p)
{
	if (::soap_read_tt__MetadataConfigurationOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension * soap_new_tt__MetadataConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptionsExtension * soap_new_req_tt__MetadataConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__MetadataConfigurationOptionsExtension *_p = ::soap_new_tt__MetadataConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationOptionsExtension * soap_new_set_tt__MetadataConfigurationOptionsExtension(
	struct soap *soap,
	const std::vector<std::string> & CompressionType,
	tt__MetadataConfigurationOptionsExtension2 *Extension)
{
	tt__MetadataConfigurationOptionsExtension *_p = ::soap_new_tt__MetadataConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptionsExtension::CompressionType = CompressionType;
		_p->tt__MetadataConfigurationOptionsExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MetadataConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MetadataConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MetadataConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MetadataConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MetadataConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MetadataConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension *p)
{
	if (::soap_read_tt__MetadataConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptions(struct soap*, const char*, int, const tt__MetadataConfigurationOptions *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptions * soap_new_tt__MetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationOptions * soap_new_req_tt__MetadataConfigurationOptions(
	struct soap *soap,
	tt__PTZStatusFilterOptions *PTZStatusFilterOptions)
{
	tt__MetadataConfigurationOptions *_p = ::soap_new_tt__MetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions;
	}
	return _p;
}

inline tt__MetadataConfigurationOptions * soap_new_set_tt__MetadataConfigurationOptions(
	struct soap *soap,
	tt__PTZStatusFilterOptions *PTZStatusFilterOptions,
	tt__MetadataConfigurationOptionsExtension *Extension,
	bool *GeoLocation,
	int *MaxContentFilterSize)
{
	tt__MetadataConfigurationOptions *_p = ::soap_new_tt__MetadataConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions;
		_p->tt__MetadataConfigurationOptions::Extension = Extension;
		_p->tt__MetadataConfigurationOptions::GeoLocation = GeoLocation;
		_p->tt__MetadataConfigurationOptions::MaxContentFilterSize = MaxContentFilterSize;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MetadataConfigurationOptions(struct soap *soap, const char *URL, tt__MetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MetadataConfigurationOptions(struct soap *soap, const char *URL, tt__MetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MetadataConfigurationOptions(struct soap *soap, const char *URL, tt__MetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MetadataConfigurationOptions(struct soap *soap, const char *URL, tt__MetadataConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions *p)
{
	if (::soap_read_tt__MetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EventSubscription_DEFINED
#define SOAP_TYPE_tt__EventSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventSubscription(struct soap*, const char*, int, const tt__EventSubscription *, const char*);
SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_in_tt__EventSubscription(struct soap*, const char*, tt__EventSubscription *, const char*);
SOAP_FMAC1 tt__EventSubscription * SOAP_FMAC2 soap_instantiate_tt__EventSubscription(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventSubscription * soap_new_tt__EventSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventSubscription(soap, n, NULL, NULL, NULL);
}

inline tt__EventSubscription * soap_new_req_tt__EventSubscription(
	struct soap *soap)
{
	tt__EventSubscription *_p = ::soap_new_tt__EventSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EventSubscription * soap_new_set_tt__EventSubscription(
	struct soap *soap,
	wsnt__FilterType *Filter,
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy)
{
	tt__EventSubscription *_p = ::soap_new_tt__EventSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventSubscription::Filter = Filter;
		_p->tt__EventSubscription::SubscriptionPolicy = SubscriptionPolicy;
	}
	return _p;
}

inline int soap_write_tt__EventSubscription(struct soap *soap, tt__EventSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription", p->soap_type() == SOAP_TYPE_tt__EventSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EventSubscription(struct soap *soap, const char *URL, tt__EventSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription", p->soap_type() == SOAP_TYPE_tt__EventSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EventSubscription(struct soap *soap, const char *URL, tt__EventSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription", p->soap_type() == SOAP_TYPE_tt__EventSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EventSubscription(struct soap *soap, const char *URL, tt__EventSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventSubscription", p->soap_type() == SOAP_TYPE_tt__EventSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_get_tt__EventSubscription(struct soap*, tt__EventSubscription *, const char*, const char*);

inline int soap_read_tt__EventSubscription(struct soap *soap, tt__EventSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EventSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EventSubscription(struct soap *soap, const char *URL, tt__EventSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EventSubscription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EventSubscription(struct soap *soap, tt__EventSubscription *p)
{
	if (::soap_read_tt__EventSubscription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZFilter_DEFINED
#define SOAP_TYPE_tt__PTZFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZFilter(struct soap*, const char*, int, const tt__PTZFilter *, const char*);
SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_in_tt__PTZFilter(struct soap*, const char*, tt__PTZFilter *, const char*);
SOAP_FMAC1 tt__PTZFilter * SOAP_FMAC2 soap_instantiate_tt__PTZFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZFilter * soap_new_tt__PTZFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZFilter(soap, n, NULL, NULL, NULL);
}

inline tt__PTZFilter * soap_new_req_tt__PTZFilter(
	struct soap *soap,
	bool Status,
	bool Position)
{
	tt__PTZFilter *_p = ::soap_new_tt__PTZFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZFilter::Status = Status;
		_p->tt__PTZFilter::Position = Position;
	}
	return _p;
}

inline tt__PTZFilter * soap_new_set_tt__PTZFilter(
	struct soap *soap,
	bool Status,
	bool Position)
{
	tt__PTZFilter *_p = ::soap_new_tt__PTZFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZFilter::Status = Status;
		_p->tt__PTZFilter::Position = Position;
	}
	return _p;
}

inline int soap_write_tt__PTZFilter(struct soap *soap, tt__PTZFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZFilter", p->soap_type() == SOAP_TYPE_tt__PTZFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZFilter(struct soap *soap, const char *URL, tt__PTZFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZFilter", p->soap_type() == SOAP_TYPE_tt__PTZFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZFilter(struct soap *soap, const char *URL, tt__PTZFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZFilter", p->soap_type() == SOAP_TYPE_tt__PTZFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZFilter(struct soap *soap, const char *URL, tt__PTZFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZFilter", p->soap_type() == SOAP_TYPE_tt__PTZFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_get_tt__PTZFilter(struct soap*, tt__PTZFilter *, const char*, const char*);

inline int soap_read_tt__PTZFilter(struct soap *soap, tt__PTZFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZFilter(struct soap *soap, const char *URL, tt__PTZFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZFilter(struct soap *soap, tt__PTZFilter *p)
{
	if (::soap_read_tt__PTZFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__MetadataConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationExtension(struct soap*, const char*, int, const tt__MetadataConfigurationExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension *, const char*);
SOAP_FMAC1 tt__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationExtension * soap_new_tt__MetadataConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfigurationExtension * soap_new_req_tt__MetadataConfigurationExtension(
	struct soap *soap)
{
	tt__MetadataConfigurationExtension *_p = ::soap_new_tt__MetadataConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__MetadataConfigurationExtension * soap_new_set_tt__MetadataConfigurationExtension(
	struct soap *soap)
{
	tt__MetadataConfigurationExtension *_p = ::soap_new_tt__MetadataConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MetadataConfigurationExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MetadataConfigurationExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MetadataConfigurationExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__MetadataConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MetadataConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MetadataConfigurationExtension(struct soap *soap, const char *URL, tt__MetadataConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MetadataConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension *p)
{
	if (::soap_read_tt__MetadataConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration_DEFINED
#define SOAP_TYPE_tt__MetadataConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfiguration(struct soap*, const char*, int, const tt__MetadataConfiguration *, const char*);
SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_in_tt__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration *, const char*);
SOAP_FMAC1 tt__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_tt__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfiguration * soap_new_tt__MetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__MetadataConfiguration * soap_new_req_tt__MetadataConfiguration(
	struct soap *soap,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__MetadataConfiguration *_p = ::soap_new_tt__MetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfiguration::Multicast = Multicast;
		_p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__MetadataConfiguration * soap_new_set_tt__MetadataConfiguration(
	struct soap *soap,
	tt__PTZFilter *PTZStatus,
	tt__EventSubscription *Events,
	bool *Analytics,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__MetadataConfigurationExtension *Extension,
	std::string *CompressionType,
	bool *GeoLocation,
	bool *ShapePolygon,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__MetadataConfiguration *_p = ::soap_new_tt__MetadataConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MetadataConfiguration::PTZStatus = PTZStatus;
		_p->tt__MetadataConfiguration::Events = Events;
		_p->tt__MetadataConfiguration::Analytics = Analytics;
		_p->tt__MetadataConfiguration::Multicast = Multicast;
		_p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__MetadataConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__MetadataConfiguration::Extension = Extension;
		_p->tt__MetadataConfiguration::CompressionType = CompressionType;
		_p->tt__MetadataConfiguration::GeoLocation = GeoLocation;
		_p->tt__MetadataConfiguration::ShapePolygon = ShapePolygon;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfiguration", p->soap_type() == SOAP_TYPE_tt__MetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MetadataConfiguration(struct soap *soap, const char *URL, tt__MetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfiguration", p->soap_type() == SOAP_TYPE_tt__MetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MetadataConfiguration(struct soap *soap, const char *URL, tt__MetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfiguration", p->soap_type() == SOAP_TYPE_tt__MetadataConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MetadataConfiguration(struct soap *soap, const char *URL, tt__MetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MetadataConfiguration", p->soap_type() == SOAP_TYPE_tt__MetadataConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_get_tt__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *, const char*, const char*);

inline int soap_read_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MetadataConfiguration(struct soap *soap, const char *URL, tt__MetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *p)
{
	if (::soap_read_tt__MetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAnalyticsConfiguration(struct soap*, const char*, int, const tt__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_in_tt__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 tt__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAnalyticsConfiguration * soap_new_tt__VideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoAnalyticsConfiguration * soap_new_req_tt__VideoAnalyticsConfiguration(
	struct soap *soap,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__RuleEngineConfiguration *RuleEngineConfiguration,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoAnalyticsConfiguration *_p = ::soap_new_tt__VideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__VideoAnalyticsConfiguration * soap_new_set_tt__VideoAnalyticsConfiguration(
	struct soap *soap,
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration,
	tt__RuleEngineConfiguration *RuleEngineConfiguration,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoAnalyticsConfiguration *_p = ::soap_new_tt__VideoAnalyticsConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration;
		_p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoAnalyticsConfiguration(struct soap *soap, const char *URL, tt__VideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoAnalyticsConfiguration(struct soap *soap, const char *URL, tt__VideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoAnalyticsConfiguration(struct soap *soap, const char *URL, tt__VideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoAnalyticsConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoAnalyticsConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_get_tt__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoAnalyticsConfiguration(struct soap *soap, const char *URL, tt__VideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *p)
{
	if (::soap_read_tt__VideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOption(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOption * soap_new_tt__AudioEncoderConfigurationOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfigurationOption * soap_new_req_tt__AudioEncoderConfigurationOption(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	tt__IntItems *BitrateList,
	tt__IntItems *SampleRateList)
{
	tt__AudioEncoderConfigurationOption *_p = ::soap_new_tt__AudioEncoderConfigurationOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOption::Encoding = Encoding;
		_p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList;
		_p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList;
	}
	return _p;
}

inline tt__AudioEncoderConfigurationOption * soap_new_set_tt__AudioEncoderConfigurationOption(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	tt__IntItems *BitrateList,
	tt__IntItems *SampleRateList)
{
	tt__AudioEncoderConfigurationOption *_p = ::soap_new_tt__AudioEncoderConfigurationOption(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOption::Encoding = Encoding;
		_p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList;
		_p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOption", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOption ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioEncoderConfigurationOption(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOption const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOption", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOption ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioEncoderConfigurationOption(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOption const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOption", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOption ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioEncoderConfigurationOption(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOption const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOption", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOption ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioEncoderConfigurationOption(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioEncoderConfigurationOption(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOption *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioEncoderConfigurationOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption *p)
{
	if (::soap_read_tt__AudioEncoderConfigurationOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOptions * soap_new_tt__AudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfigurationOptions * soap_new_req_tt__AudioEncoderConfigurationOptions(
	struct soap *soap)
{
	tt__AudioEncoderConfigurationOptions *_p = ::soap_new_tt__AudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioEncoderConfigurationOptions * soap_new_set_tt__AudioEncoderConfigurationOptions(
	struct soap *soap,
	const std::vector<tt__AudioEncoderConfigurationOption *> & Options)
{
	tt__AudioEncoderConfigurationOptions *_p = ::soap_new_tt__AudioEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfigurationOptions::Options = Options;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__AudioEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions *p)
{
	if (::soap_read_tt__AudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfiguration(struct soap*, const char*, int, const tt__AudioEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration *, const char*);
SOAP_FMAC1 tt__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfiguration * soap_new_tt__AudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioEncoderConfiguration * soap_new_req_tt__AudioEncoderConfiguration(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	int Bitrate,
	int SampleRate,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioEncoderConfiguration *_p = ::soap_new_tt__AudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfiguration::Encoding = Encoding;
		_p->tt__AudioEncoderConfiguration::Bitrate = Bitrate;
		_p->tt__AudioEncoderConfiguration::SampleRate = SampleRate;
		_p->tt__AudioEncoderConfiguration::Multicast = Multicast;
		_p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioEncoderConfiguration * soap_new_set_tt__AudioEncoderConfiguration(
	struct soap *soap,
	enum tt__AudioEncoding Encoding,
	int Bitrate,
	int SampleRate,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioEncoderConfiguration *_p = ::soap_new_tt__AudioEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioEncoderConfiguration::Encoding = Encoding;
		_p->tt__AudioEncoderConfiguration::Bitrate = Bitrate;
		_p->tt__AudioEncoderConfiguration::SampleRate = SampleRate;
		_p->tt__AudioEncoderConfiguration::Multicast = Multicast;
		_p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioEncoderConfiguration(struct soap *soap, const char *URL, tt__AudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioEncoderConfiguration(struct soap *soap, const char *URL, tt__AudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioEncoderConfiguration(struct soap *soap, const char *URL, tt__AudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioEncoderConfiguration(struct soap *soap, const char *URL, tt__AudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration *p)
{
	if (::soap_read_tt__AudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension_DEFINED
#define SOAP_TYPE_tt__AudioSourceOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceOptionsExtension(struct soap*, const char*, int, const tt__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC1 tt__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceOptionsExtension * soap_new_tt__AudioSourceOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceOptionsExtension * soap_new_req_tt__AudioSourceOptionsExtension(
	struct soap *soap)
{
	tt__AudioSourceOptionsExtension *_p = ::soap_new_tt__AudioSourceOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AudioSourceOptionsExtension * soap_new_set_tt__AudioSourceOptionsExtension(
	struct soap *soap)
{
	tt__AudioSourceOptionsExtension *_p = ::soap_new_tt__AudioSourceOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioSourceOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioSourceOptionsExtension(struct soap *soap, const char *URL, tt__AudioSourceOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioSourceOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioSourceOptionsExtension(struct soap *soap, const char *URL, tt__AudioSourceOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioSourceOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioSourceOptionsExtension(struct soap *soap, const char *URL, tt__AudioSourceOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceOptionsExtension", p->soap_type() == SOAP_TYPE_tt__AudioSourceOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *, const char*, const char*);

inline int soap_read_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioSourceOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioSourceOptionsExtension(struct soap *soap, const char *URL, tt__AudioSourceOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioSourceOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension *p)
{
	if (::soap_read_tt__AudioSourceOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfigurationOptions(struct soap*, const char*, int, const tt__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 tt__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfigurationOptions * soap_new_tt__AudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceConfigurationOptions * soap_new_req_tt__AudioSourceConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & InputTokensAvailable)
{
	tt__AudioSourceConfigurationOptions *_p = ::soap_new_tt__AudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable;
	}
	return _p;
}

inline tt__AudioSourceConfigurationOptions * soap_new_set_tt__AudioSourceConfigurationOptions(
	struct soap *soap,
	const std::vector<std::string> & InputTokensAvailable,
	tt__AudioSourceOptionsExtension *Extension)
{
	tt__AudioSourceConfigurationOptions *_p = ::soap_new_tt__AudioSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable;
		_p->tt__AudioSourceConfigurationOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioSourceConfigurationOptions(struct soap *soap, const char *URL, tt__AudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioSourceConfigurationOptions(struct soap *soap, const char *URL, tt__AudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioSourceConfigurationOptions(struct soap *soap, const char *URL, tt__AudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioSourceConfigurationOptions(struct soap *soap, const char *URL, tt__AudioSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions *p)
{
	if (::soap_read_tt__AudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_tt__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfiguration(struct soap*, const char*, int, const tt__AudioSourceConfiguration *, const char*);
SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_in_tt__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration *, const char*);
SOAP_FMAC1 tt__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfiguration * soap_new_tt__AudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSourceConfiguration * soap_new_req_tt__AudioSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioSourceConfiguration *_p = ::soap_new_tt__AudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfiguration::SourceToken = SourceToken;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioSourceConfiguration * soap_new_set_tt__AudioSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__AudioSourceConfiguration *_p = ::soap_new_tt__AudioSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSourceConfiguration::SourceToken = SourceToken;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioSourceConfiguration(struct soap *soap, const char *URL, tt__AudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioSourceConfiguration(struct soap *soap, const char *URL, tt__AudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioSourceConfiguration(struct soap *soap, const char *URL, tt__AudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__AudioSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_get_tt__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *, const char*, const char*);

inline int soap_read_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioSourceConfiguration(struct soap *soap, const char *URL, tt__AudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *p)
{
	if (::soap_read_tt__AudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__H264Options2_DEFINED
#define SOAP_TYPE_tt__H264Options2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options2(struct soap*, const char*, int, const tt__H264Options2 *, const char*);
SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_in_tt__H264Options2(struct soap*, const char*, tt__H264Options2 *, const char*);
SOAP_FMAC1 tt__H264Options2 * SOAP_FMAC2 soap_instantiate_tt__H264Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options2 * soap_new_tt__H264Options2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Options2(soap, n, NULL, NULL, NULL);
}

inline tt__H264Options2 * soap_new_req_tt__H264Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *GovLengthRange__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported__1)
{
	tt__H264Options2 *_p = ::soap_new_tt__H264Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options2::BitrateRange = BitrateRange;
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__H264Options::GovLengthRange = GovLengthRange__1;
		_p->tt__H264Options::FrameRateRange = FrameRateRange__1;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange__1;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported__1;
	}
	return _p;
}

inline tt__H264Options2 * soap_new_set_tt__H264Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *GovLengthRange__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported__1)
{
	tt__H264Options2 *_p = ::soap_new_tt__H264Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options2::BitrateRange = BitrateRange;
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__H264Options::GovLengthRange = GovLengthRange__1;
		_p->tt__H264Options::FrameRateRange = FrameRateRange__1;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange__1;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported__1;
	}
	return _p;
}

inline int soap_write_tt__H264Options2(struct soap *soap, tt__H264Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options2", p->soap_type() == SOAP_TYPE_tt__H264Options2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__H264Options2(struct soap *soap, const char *URL, tt__H264Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options2", p->soap_type() == SOAP_TYPE_tt__H264Options2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__H264Options2(struct soap *soap, const char *URL, tt__H264Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options2", p->soap_type() == SOAP_TYPE_tt__H264Options2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__H264Options2(struct soap *soap, const char *URL, tt__H264Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options2", p->soap_type() == SOAP_TYPE_tt__H264Options2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_get_tt__H264Options2(struct soap*, tt__H264Options2 *, const char*, const char*);

inline int soap_read_tt__H264Options2(struct soap *soap, tt__H264Options2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__H264Options2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__H264Options2(struct soap *soap, const char *URL, tt__H264Options2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__H264Options2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__H264Options2(struct soap *soap, tt__H264Options2 *p)
{
	if (::soap_read_tt__H264Options2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__H264Options_DEFINED
#define SOAP_TYPE_tt__H264Options_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options(struct soap*, const char*, int, const tt__H264Options *, const char*);
SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_in_tt__H264Options(struct soap*, const char*, tt__H264Options *, const char*);
SOAP_FMAC1 tt__H264Options * SOAP_FMAC2 soap_instantiate_tt__H264Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options * soap_new_tt__H264Options(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Options(soap, n, NULL, NULL, NULL);
}

inline tt__H264Options * soap_new_req_tt__H264Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported)
{
	tt__H264Options *_p = ::soap_new_tt__H264Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264Options::GovLengthRange = GovLengthRange;
		_p->tt__H264Options::FrameRateRange = FrameRateRange;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported;
	}
	return _p;
}

inline tt__H264Options * soap_new_set_tt__H264Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__H264Profile> & H264ProfilesSupported)
{
	tt__H264Options *_p = ::soap_new_tt__H264Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__H264Options::GovLengthRange = GovLengthRange;
		_p->tt__H264Options::FrameRateRange = FrameRateRange;
		_p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported;
	}
	return _p;
}

inline int soap_write_tt__H264Options(struct soap *soap, tt__H264Options const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options", p->soap_type() == SOAP_TYPE_tt__H264Options ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__H264Options(struct soap *soap, const char *URL, tt__H264Options const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options", p->soap_type() == SOAP_TYPE_tt__H264Options ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__H264Options(struct soap *soap, const char *URL, tt__H264Options const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options", p->soap_type() == SOAP_TYPE_tt__H264Options ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__H264Options(struct soap *soap, const char *URL, tt__H264Options const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Options", p->soap_type() == SOAP_TYPE_tt__H264Options ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_get_tt__H264Options(struct soap*, tt__H264Options *, const char*, const char*);

inline int soap_read_tt__H264Options(struct soap *soap, tt__H264Options *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__H264Options(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__H264Options(struct soap *soap, const char *URL, tt__H264Options *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__H264Options(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__H264Options(struct soap *soap, tt__H264Options *p)
{
	if (::soap_read_tt__H264Options(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2_DEFINED
#define SOAP_TYPE_tt__Mpeg4Options2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options2(struct soap*, const char*, int, const tt__Mpeg4Options2 *, const char*);
SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_in_tt__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 *, const char*);
SOAP_FMAC1 tt__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options2 * soap_new_tt__Mpeg4Options2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Options2(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Options2 * soap_new_req_tt__Mpeg4Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *GovLengthRange__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported__1)
{
	tt__Mpeg4Options2 *_p = ::soap_new_tt__Mpeg4Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options2::BitrateRange = BitrateRange;
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange__1;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange__1;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange__1;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported__1;
	}
	return _p;
}

inline tt__Mpeg4Options2 * soap_new_set_tt__Mpeg4Options2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *GovLengthRange__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported__1)
{
	tt__Mpeg4Options2 *_p = ::soap_new_tt__Mpeg4Options2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options2::BitrateRange = BitrateRange;
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange__1;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange__1;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange__1;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported__1;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options2", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Mpeg4Options2(struct soap *soap, const char *URL, tt__Mpeg4Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options2", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Mpeg4Options2(struct soap *soap, const char *URL, tt__Mpeg4Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options2", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Mpeg4Options2(struct soap *soap, const char *URL, tt__Mpeg4Options2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options2", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_get_tt__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *, const char*, const char*);

inline int soap_read_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Mpeg4Options2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Mpeg4Options2(struct soap *soap, const char *URL, tt__Mpeg4Options2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Mpeg4Options2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 *p)
{
	if (::soap_read_tt__Mpeg4Options2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options_DEFINED
#define SOAP_TYPE_tt__Mpeg4Options_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options(struct soap*, const char*, int, const tt__Mpeg4Options *, const char*);
SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_in_tt__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options *, const char*);
SOAP_FMAC1 tt__Mpeg4Options * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options * soap_new_tt__Mpeg4Options(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Options(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Options * soap_new_req_tt__Mpeg4Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported)
{
	tt__Mpeg4Options *_p = ::soap_new_tt__Mpeg4Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported;
	}
	return _p;
}

inline tt__Mpeg4Options * soap_new_set_tt__Mpeg4Options(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *GovLengthRange,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange,
	const std::vector<enum tt__Mpeg4Profile> & Mpeg4ProfilesSupported)
{
	tt__Mpeg4Options *_p = ::soap_new_tt__Mpeg4Options(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__Mpeg4Options::GovLengthRange = GovLengthRange;
		_p->tt__Mpeg4Options::FrameRateRange = FrameRateRange;
		_p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange;
		_p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Mpeg4Options(struct soap *soap, const char *URL, tt__Mpeg4Options const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Mpeg4Options(struct soap *soap, const char *URL, tt__Mpeg4Options const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Mpeg4Options(struct soap *soap, const char *URL, tt__Mpeg4Options const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Options", p->soap_type() == SOAP_TYPE_tt__Mpeg4Options ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_get_tt__Mpeg4Options(struct soap*, tt__Mpeg4Options *, const char*, const char*);

inline int soap_read_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Mpeg4Options(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Mpeg4Options(struct soap *soap, const char *URL, tt__Mpeg4Options *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Mpeg4Options(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options *p)
{
	if (::soap_read_tt__Mpeg4Options(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2_DEFINED
#define SOAP_TYPE_tt__JpegOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions2(struct soap*, const char*, int, const tt__JpegOptions2 *, const char*);
SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_in_tt__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 *, const char*);
SOAP_FMAC1 tt__JpegOptions2 * SOAP_FMAC2 soap_instantiate_tt__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions2 * soap_new_tt__JpegOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JpegOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__JpegOptions2 * soap_new_req_tt__JpegOptions2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1)
{
	tt__JpegOptions2 *_p = ::soap_new_tt__JpegOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions2::BitrateRange = BitrateRange;
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange__1;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange__1;
	}
	return _p;
}

inline tt__JpegOptions2 * soap_new_set_tt__JpegOptions2(
	struct soap *soap,
	tt__IntRange *BitrateRange,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable__1,
	tt__IntRange *FrameRateRange__1,
	tt__IntRange *EncodingIntervalRange__1)
{
	tt__JpegOptions2 *_p = ::soap_new_tt__JpegOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions2::BitrateRange = BitrateRange;
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable__1;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange__1;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange__1;
	}
	return _p;
}

inline int soap_write_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions2", p->soap_type() == SOAP_TYPE_tt__JpegOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__JpegOptions2(struct soap *soap, const char *URL, tt__JpegOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions2", p->soap_type() == SOAP_TYPE_tt__JpegOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__JpegOptions2(struct soap *soap, const char *URL, tt__JpegOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions2", p->soap_type() == SOAP_TYPE_tt__JpegOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__JpegOptions2(struct soap *soap, const char *URL, tt__JpegOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions2", p->soap_type() == SOAP_TYPE_tt__JpegOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_get_tt__JpegOptions2(struct soap*, tt__JpegOptions2 *, const char*, const char*);

inline int soap_read_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__JpegOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__JpegOptions2(struct soap *soap, const char *URL, tt__JpegOptions2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__JpegOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 *p)
{
	if (::soap_read_tt__JpegOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__JpegOptions_DEFINED
#define SOAP_TYPE_tt__JpegOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions(struct soap*, const char*, int, const tt__JpegOptions *, const char*);
SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_in_tt__JpegOptions(struct soap*, const char*, tt__JpegOptions *, const char*);
SOAP_FMAC1 tt__JpegOptions * SOAP_FMAC2 soap_instantiate_tt__JpegOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions * soap_new_tt__JpegOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__JpegOptions(soap, n, NULL, NULL, NULL);
}

inline tt__JpegOptions * soap_new_req_tt__JpegOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange)
{
	tt__JpegOptions *_p = ::soap_new_tt__JpegOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange;
	}
	return _p;
}

inline tt__JpegOptions * soap_new_set_tt__JpegOptions(
	struct soap *soap,
	const std::vector<tt__VideoResolution *> & ResolutionsAvailable,
	tt__IntRange *FrameRateRange,
	tt__IntRange *EncodingIntervalRange)
{
	tt__JpegOptions *_p = ::soap_new_tt__JpegOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable;
		_p->tt__JpegOptions::FrameRateRange = FrameRateRange;
		_p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange;
	}
	return _p;
}

inline int soap_write_tt__JpegOptions(struct soap *soap, tt__JpegOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions", p->soap_type() == SOAP_TYPE_tt__JpegOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__JpegOptions(struct soap *soap, const char *URL, tt__JpegOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions", p->soap_type() == SOAP_TYPE_tt__JpegOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__JpegOptions(struct soap *soap, const char *URL, tt__JpegOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions", p->soap_type() == SOAP_TYPE_tt__JpegOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__JpegOptions(struct soap *soap, const char *URL, tt__JpegOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:JpegOptions", p->soap_type() == SOAP_TYPE_tt__JpegOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_get_tt__JpegOptions(struct soap*, tt__JpegOptions *, const char*, const char*);

inline int soap_read_tt__JpegOptions(struct soap *soap, tt__JpegOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__JpegOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__JpegOptions(struct soap *soap, const char *URL, tt__JpegOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__JpegOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__JpegOptions(struct soap *soap, tt__JpegOptions *p)
{
	if (::soap_read_tt__JpegOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension2 * soap_new_tt__VideoEncoderOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderOptionsExtension2 * soap_new_req_tt__VideoEncoderOptionsExtension2(
	struct soap *soap)
{
	tt__VideoEncoderOptionsExtension2 *_p = ::soap_new_tt__VideoEncoderOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoEncoderOptionsExtension2 * soap_new_set_tt__VideoEncoderOptionsExtension2(
	struct soap *soap)
{
	tt__VideoEncoderOptionsExtension2 *_p = ::soap_new_tt__VideoEncoderOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoEncoderOptionsExtension2(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoEncoderOptionsExtension2(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoEncoderOptionsExtension2(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoEncoderOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoEncoderOptionsExtension2(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoEncoderOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 *p)
{
	if (::soap_read_tt__VideoEncoderOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension_DEFINED
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC1 tt__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension * soap_new_tt__VideoEncoderOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderOptionsExtension * soap_new_req_tt__VideoEncoderOptionsExtension(
	struct soap *soap)
{
	tt__VideoEncoderOptionsExtension *_p = ::soap_new_tt__VideoEncoderOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoEncoderOptionsExtension * soap_new_set_tt__VideoEncoderOptionsExtension(
	struct soap *soap,
	tt__JpegOptions2 *JPEG,
	tt__Mpeg4Options2 *MPEG4,
	tt__H264Options2 *H264,
	tt__VideoEncoderOptionsExtension2 *Extension)
{
	tt__VideoEncoderOptionsExtension *_p = ::soap_new_tt__VideoEncoderOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderOptionsExtension::JPEG = JPEG;
		_p->tt__VideoEncoderOptionsExtension::MPEG4 = MPEG4;
		_p->tt__VideoEncoderOptionsExtension::H264 = H264;
		_p->tt__VideoEncoderOptionsExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoEncoderOptionsExtension(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoEncoderOptionsExtension(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoEncoderOptionsExtension(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoEncoderOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *, const char*, const char*);

inline int soap_read_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoEncoderOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoEncoderOptionsExtension(struct soap *soap, const char *URL, tt__VideoEncoderOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoEncoderOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension *p)
{
	if (::soap_read_tt__VideoEncoderOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, int, const tt__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, tt__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfigurationOptions * soap_new_tt__VideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderConfigurationOptions * soap_new_req_tt__VideoEncoderConfigurationOptions(
	struct soap *soap,
	tt__IntRange *QualityRange)
{
	tt__VideoEncoderConfigurationOptions *_p = ::soap_new_tt__VideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange;
	}
	return _p;
}

inline tt__VideoEncoderConfigurationOptions * soap_new_set_tt__VideoEncoderConfigurationOptions(
	struct soap *soap,
	tt__IntRange *QualityRange,
	tt__JpegOptions *JPEG,
	tt__Mpeg4Options *MPEG4,
	tt__H264Options *H264,
	tt__VideoEncoderOptionsExtension *Extension,
	bool *GuaranteedFrameRateSupported)
{
	tt__VideoEncoderConfigurationOptions *_p = ::soap_new_tt__VideoEncoderConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange;
		_p->tt__VideoEncoderConfigurationOptions::JPEG = JPEG;
		_p->tt__VideoEncoderConfigurationOptions::MPEG4 = MPEG4;
		_p->tt__VideoEncoderConfigurationOptions::H264 = H264;
		_p->tt__VideoEncoderConfigurationOptions::Extension = Extension;
		_p->tt__VideoEncoderConfigurationOptions::GuaranteedFrameRateSupported = GuaranteedFrameRateSupported;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__VideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__VideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__VideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoEncoderConfigurationOptions(struct soap *soap, const char *URL, tt__VideoEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions *p)
{
	if (::soap_read_tt__VideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__H264Configuration_DEFINED
#define SOAP_TYPE_tt__H264Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Configuration(struct soap*, const char*, int, const tt__H264Configuration *, const char*);
SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_in_tt__H264Configuration(struct soap*, const char*, tt__H264Configuration *, const char*);
SOAP_FMAC1 tt__H264Configuration * SOAP_FMAC2 soap_instantiate_tt__H264Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Configuration * soap_new_tt__H264Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__H264Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__H264Configuration * soap_new_req_tt__H264Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__H264Profile H264Profile)
{
	tt__H264Configuration *_p = ::soap_new_tt__H264Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Configuration::GovLength = GovLength;
		_p->tt__H264Configuration::H264Profile = H264Profile;
	}
	return _p;
}

inline tt__H264Configuration * soap_new_set_tt__H264Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__H264Profile H264Profile)
{
	tt__H264Configuration *_p = ::soap_new_tt__H264Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__H264Configuration::GovLength = GovLength;
		_p->tt__H264Configuration::H264Profile = H264Profile;
	}
	return _p;
}

inline int soap_write_tt__H264Configuration(struct soap *soap, tt__H264Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Configuration", p->soap_type() == SOAP_TYPE_tt__H264Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__H264Configuration(struct soap *soap, const char *URL, tt__H264Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Configuration", p->soap_type() == SOAP_TYPE_tt__H264Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__H264Configuration(struct soap *soap, const char *URL, tt__H264Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Configuration", p->soap_type() == SOAP_TYPE_tt__H264Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__H264Configuration(struct soap *soap, const char *URL, tt__H264Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:H264Configuration", p->soap_type() == SOAP_TYPE_tt__H264Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_get_tt__H264Configuration(struct soap*, tt__H264Configuration *, const char*, const char*);

inline int soap_read_tt__H264Configuration(struct soap *soap, tt__H264Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__H264Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__H264Configuration(struct soap *soap, const char *URL, tt__H264Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__H264Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__H264Configuration(struct soap *soap, tt__H264Configuration *p)
{
	if (::soap_read_tt__H264Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration_DEFINED
#define SOAP_TYPE_tt__Mpeg4Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Configuration(struct soap*, const char*, int, const tt__Mpeg4Configuration *, const char*);
SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_in_tt__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration *, const char*);
SOAP_FMAC1 tt__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Configuration * soap_new_tt__Mpeg4Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Mpeg4Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Mpeg4Configuration * soap_new_req_tt__Mpeg4Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__Mpeg4Profile Mpeg4Profile)
{
	tt__Mpeg4Configuration *_p = ::soap_new_tt__Mpeg4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Configuration::GovLength = GovLength;
		_p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile;
	}
	return _p;
}

inline tt__Mpeg4Configuration * soap_new_set_tt__Mpeg4Configuration(
	struct soap *soap,
	int GovLength,
	enum tt__Mpeg4Profile Mpeg4Profile)
{
	tt__Mpeg4Configuration *_p = ::soap_new_tt__Mpeg4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Mpeg4Configuration::GovLength = GovLength;
		_p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile;
	}
	return _p;
}

inline int soap_write_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Configuration", p->soap_type() == SOAP_TYPE_tt__Mpeg4Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Mpeg4Configuration(struct soap *soap, const char *URL, tt__Mpeg4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Configuration", p->soap_type() == SOAP_TYPE_tt__Mpeg4Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Mpeg4Configuration(struct soap *soap, const char *URL, tt__Mpeg4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Configuration", p->soap_type() == SOAP_TYPE_tt__Mpeg4Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Mpeg4Configuration(struct soap *soap, const char *URL, tt__Mpeg4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Mpeg4Configuration", p->soap_type() == SOAP_TYPE_tt__Mpeg4Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_get_tt__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *, const char*, const char*);

inline int soap_read_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Mpeg4Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Mpeg4Configuration(struct soap *soap, const char *URL, tt__Mpeg4Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Mpeg4Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration *p)
{
	if (::soap_read_tt__Mpeg4Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl_DEFINED
#define SOAP_TYPE_tt__VideoRateControl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoRateControl(struct soap*, const char*, int, const tt__VideoRateControl *, const char*);
SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_in_tt__VideoRateControl(struct soap*, const char*, tt__VideoRateControl *, const char*);
SOAP_FMAC1 tt__VideoRateControl * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoRateControl * soap_new_tt__VideoRateControl(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoRateControl(soap, n, NULL, NULL, NULL);
}

inline tt__VideoRateControl * soap_new_req_tt__VideoRateControl(
	struct soap *soap,
	int FrameRateLimit,
	int EncodingInterval,
	int BitrateLimit)
{
	tt__VideoRateControl *_p = ::soap_new_tt__VideoRateControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl::EncodingInterval = EncodingInterval;
		_p->tt__VideoRateControl::BitrateLimit = BitrateLimit;
	}
	return _p;
}

inline tt__VideoRateControl * soap_new_set_tt__VideoRateControl(
	struct soap *soap,
	int FrameRateLimit,
	int EncodingInterval,
	int BitrateLimit)
{
	tt__VideoRateControl *_p = ::soap_new_tt__VideoRateControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit;
		_p->tt__VideoRateControl::EncodingInterval = EncodingInterval;
		_p->tt__VideoRateControl::BitrateLimit = BitrateLimit;
	}
	return _p;
}

inline int soap_write_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl", p->soap_type() == SOAP_TYPE_tt__VideoRateControl ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoRateControl(struct soap *soap, const char *URL, tt__VideoRateControl const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl", p->soap_type() == SOAP_TYPE_tt__VideoRateControl ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoRateControl(struct soap *soap, const char *URL, tt__VideoRateControl const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl", p->soap_type() == SOAP_TYPE_tt__VideoRateControl ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoRateControl(struct soap *soap, const char *URL, tt__VideoRateControl const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoRateControl", p->soap_type() == SOAP_TYPE_tt__VideoRateControl ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_get_tt__VideoRateControl(struct soap*, tt__VideoRateControl *, const char*, const char*);

inline int soap_read_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoRateControl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoRateControl(struct soap *soap, const char *URL, tt__VideoRateControl *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoRateControl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl *p)
{
	if (::soap_read_tt__VideoRateControl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoResolution_DEFINED
#define SOAP_TYPE_tt__VideoResolution_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoResolution(struct soap*, const char*, int, const tt__VideoResolution *, const char*);
SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_in_tt__VideoResolution(struct soap*, const char*, tt__VideoResolution *, const char*);
SOAP_FMAC1 tt__VideoResolution * SOAP_FMAC2 soap_instantiate_tt__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoResolution * soap_new_tt__VideoResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoResolution(soap, n, NULL, NULL, NULL);
}

inline tt__VideoResolution * soap_new_req_tt__VideoResolution(
	struct soap *soap,
	int Width,
	int Height)
{
	tt__VideoResolution *_p = ::soap_new_tt__VideoResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution::Width = Width;
		_p->tt__VideoResolution::Height = Height;
	}
	return _p;
}

inline tt__VideoResolution * soap_new_set_tt__VideoResolution(
	struct soap *soap,
	int Width,
	int Height)
{
	tt__VideoResolution *_p = ::soap_new_tt__VideoResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoResolution::Width = Width;
		_p->tt__VideoResolution::Height = Height;
	}
	return _p;
}

inline int soap_write_tt__VideoResolution(struct soap *soap, tt__VideoResolution const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution", p->soap_type() == SOAP_TYPE_tt__VideoResolution ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoResolution(struct soap *soap, const char *URL, tt__VideoResolution const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution", p->soap_type() == SOAP_TYPE_tt__VideoResolution ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoResolution(struct soap *soap, const char *URL, tt__VideoResolution const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution", p->soap_type() == SOAP_TYPE_tt__VideoResolution ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoResolution(struct soap *soap, const char *URL, tt__VideoResolution const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoResolution", p->soap_type() == SOAP_TYPE_tt__VideoResolution ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_get_tt__VideoResolution(struct soap*, tt__VideoResolution *, const char*, const char*);

inline int soap_read_tt__VideoResolution(struct soap *soap, tt__VideoResolution *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoResolution(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoResolution(struct soap *soap, const char *URL, tt__VideoResolution *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoResolution(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoResolution(struct soap *soap, tt__VideoResolution *p)
{
	if (::soap_read_tt__VideoResolution(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfiguration(struct soap*, const char*, int, const tt__VideoEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_in_tt__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration *, const char*);
SOAP_FMAC1 tt__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfiguration * soap_new_tt__VideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoEncoderConfiguration * soap_new_req_tt__VideoEncoderConfiguration(
	struct soap *soap,
	enum tt__VideoEncoding Encoding,
	tt__VideoResolution *Resolution,
	float Quality,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoEncoderConfiguration *_p = ::soap_new_tt__VideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfiguration::Encoding = Encoding;
		_p->tt__VideoEncoderConfiguration::Resolution = Resolution;
		_p->tt__VideoEncoderConfiguration::Quality = Quality;
		_p->tt__VideoEncoderConfiguration::Multicast = Multicast;
		_p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__VideoEncoderConfiguration * soap_new_set_tt__VideoEncoderConfiguration(
	struct soap *soap,
	enum tt__VideoEncoding Encoding,
	tt__VideoResolution *Resolution,
	float Quality,
	tt__VideoRateControl *RateControl,
	tt__Mpeg4Configuration *MPEG4,
	tt__H264Configuration *H264,
	tt__MulticastConfiguration *Multicast,
	const std::string& SessionTimeout,
	bool *GuaranteedFrameRate,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoEncoderConfiguration *_p = ::soap_new_tt__VideoEncoderConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoEncoderConfiguration::Encoding = Encoding;
		_p->tt__VideoEncoderConfiguration::Resolution = Resolution;
		_p->tt__VideoEncoderConfiguration::Quality = Quality;
		_p->tt__VideoEncoderConfiguration::RateControl = RateControl;
		_p->tt__VideoEncoderConfiguration::MPEG4 = MPEG4;
		_p->tt__VideoEncoderConfiguration::H264 = H264;
		_p->tt__VideoEncoderConfiguration::Multicast = Multicast;
		_p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout;
		_p->tt__VideoEncoderConfiguration::GuaranteedFrameRate = GuaranteedFrameRate;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoEncoderConfiguration(struct soap *soap, const char *URL, tt__VideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoEncoderConfiguration(struct soap *soap, const char *URL, tt__VideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoEncoderConfiguration(struct soap *soap, const char *URL, tt__VideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoEncoderConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoEncoderConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_get_tt__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoEncoderConfiguration(struct soap *soap, const char *URL, tt__VideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration *p)
{
	if (::soap_read_tt__VideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SceneOrientation_DEFINED
#define SOAP_TYPE_tt__SceneOrientation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientation(struct soap*, const char*, int, const tt__SceneOrientation *, const char*);
SOAP_FMAC3 tt__SceneOrientation * SOAP_FMAC4 soap_in_tt__SceneOrientation(struct soap*, const char*, tt__SceneOrientation *, const char*);
SOAP_FMAC1 tt__SceneOrientation * SOAP_FMAC2 soap_instantiate_tt__SceneOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__SceneOrientation * soap_new_tt__SceneOrientation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SceneOrientation(soap, n, NULL, NULL, NULL);
}

inline tt__SceneOrientation * soap_new_req_tt__SceneOrientation(
	struct soap *soap,
	enum tt__SceneOrientationMode Mode)
{
	tt__SceneOrientation *_p = ::soap_new_tt__SceneOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SceneOrientation::Mode = Mode;
	}
	return _p;
}

inline tt__SceneOrientation * soap_new_set_tt__SceneOrientation(
	struct soap *soap,
	enum tt__SceneOrientationMode Mode,
	std::string *Orientation)
{
	tt__SceneOrientation *_p = ::soap_new_tt__SceneOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SceneOrientation::Mode = Mode;
		_p->tt__SceneOrientation::Orientation = Orientation;
	}
	return _p;
}

inline int soap_write_tt__SceneOrientation(struct soap *soap, tt__SceneOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SceneOrientation", p->soap_type() == SOAP_TYPE_tt__SceneOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SceneOrientation(struct soap *soap, const char *URL, tt__SceneOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SceneOrientation", p->soap_type() == SOAP_TYPE_tt__SceneOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SceneOrientation(struct soap *soap, const char *URL, tt__SceneOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SceneOrientation", p->soap_type() == SOAP_TYPE_tt__SceneOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SceneOrientation(struct soap *soap, const char *URL, tt__SceneOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SceneOrientation", p->soap_type() == SOAP_TYPE_tt__SceneOrientation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SceneOrientation * SOAP_FMAC4 soap_get_tt__SceneOrientation(struct soap*, tt__SceneOrientation *, const char*, const char*);

inline int soap_read_tt__SceneOrientation(struct soap *soap, tt__SceneOrientation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SceneOrientation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SceneOrientation(struct soap *soap, const char *URL, tt__SceneOrientation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SceneOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SceneOrientation(struct soap *soap, tt__SceneOrientation *p)
{
	if (::soap_read_tt__SceneOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension_DEFINED
#define SOAP_TYPE_tt__RotateOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptionsExtension(struct soap*, const char*, int, const tt__RotateOptionsExtension *, const char*);
SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_in_tt__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension *, const char*);
SOAP_FMAC1 tt__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptionsExtension * soap_new_tt__RotateOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RotateOptionsExtension * soap_new_req_tt__RotateOptionsExtension(
	struct soap *soap)
{
	tt__RotateOptionsExtension *_p = ::soap_new_tt__RotateOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RotateOptionsExtension * soap_new_set_tt__RotateOptionsExtension(
	struct soap *soap)
{
	tt__RotateOptionsExtension *_p = ::soap_new_tt__RotateOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptionsExtension", p->soap_type() == SOAP_TYPE_tt__RotateOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RotateOptionsExtension(struct soap *soap, const char *URL, tt__RotateOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptionsExtension", p->soap_type() == SOAP_TYPE_tt__RotateOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RotateOptionsExtension(struct soap *soap, const char *URL, tt__RotateOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptionsExtension", p->soap_type() == SOAP_TYPE_tt__RotateOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RotateOptionsExtension(struct soap *soap, const char *URL, tt__RotateOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptionsExtension", p->soap_type() == SOAP_TYPE_tt__RotateOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_get_tt__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *, const char*, const char*);

inline int soap_read_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RotateOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RotateOptionsExtension(struct soap *soap, const char *URL, tt__RotateOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RotateOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension *p)
{
	if (::soap_read_tt__RotateOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RotateOptions_DEFINED
#define SOAP_TYPE_tt__RotateOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptions(struct soap*, const char*, int, const tt__RotateOptions *, const char*);
SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_in_tt__RotateOptions(struct soap*, const char*, tt__RotateOptions *, const char*);
SOAP_FMAC1 tt__RotateOptions * SOAP_FMAC2 soap_instantiate_tt__RotateOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptions * soap_new_tt__RotateOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateOptions(soap, n, NULL, NULL, NULL);
}

inline tt__RotateOptions * soap_new_req_tt__RotateOptions(
	struct soap *soap,
	const std::vector<enum tt__RotateMode> & Mode)
{
	tt__RotateOptions *_p = ::soap_new_tt__RotateOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateOptions::Mode = Mode;
	}
	return _p;
}

inline tt__RotateOptions * soap_new_set_tt__RotateOptions(
	struct soap *soap,
	const std::vector<enum tt__RotateMode> & Mode,
	tt__IntItems *DegreeList,
	tt__RotateOptionsExtension *Extension,
	bool *Reboot)
{
	tt__RotateOptions *_p = ::soap_new_tt__RotateOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RotateOptions::Mode = Mode;
		_p->tt__RotateOptions::DegreeList = DegreeList;
		_p->tt__RotateOptions::Extension = Extension;
		_p->tt__RotateOptions::Reboot = Reboot;
	}
	return _p;
}

inline int soap_write_tt__RotateOptions(struct soap *soap, tt__RotateOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptions", p->soap_type() == SOAP_TYPE_tt__RotateOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RotateOptions(struct soap *soap, const char *URL, tt__RotateOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptions", p->soap_type() == SOAP_TYPE_tt__RotateOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RotateOptions(struct soap *soap, const char *URL, tt__RotateOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptions", p->soap_type() == SOAP_TYPE_tt__RotateOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RotateOptions(struct soap *soap, const char *URL, tt__RotateOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateOptions", p->soap_type() == SOAP_TYPE_tt__RotateOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_get_tt__RotateOptions(struct soap*, tt__RotateOptions *, const char*, const char*);

inline int soap_read_tt__RotateOptions(struct soap *soap, tt__RotateOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RotateOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RotateOptions(struct soap *soap, const char *URL, tt__RotateOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RotateOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RotateOptions(struct soap *soap, tt__RotateOptions *p)
{
	if (::soap_read_tt__RotateOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(
	struct soap *soap)
{
	tt__VideoSourceConfigurationOptionsExtension2 *_p = ::soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(
	struct soap *soap,
	const std::vector<enum tt__SceneOrientationMode> & SceneOrientationMode)
{
	tt__VideoSourceConfigurationOptionsExtension2 *_p = ::soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptionsExtension2::SceneOrientationMode = SceneOrientationMode;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfigurationOptionsExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 *p)
{
	if (::soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_req_tt__VideoSourceConfigurationOptionsExtension(
	struct soap *soap)
{
	tt__VideoSourceConfigurationOptionsExtension *_p = ::soap_new_tt__VideoSourceConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_set_tt__VideoSourceConfigurationOptionsExtension(
	struct soap *soap,
	tt__RotateOptions *Rotate,
	tt__VideoSourceConfigurationOptionsExtension2 *Extension)
{
	tt__VideoSourceConfigurationOptionsExtension *_p = ::soap_new_tt__VideoSourceConfigurationOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptionsExtension::Rotate = Rotate;
		_p->tt__VideoSourceConfigurationOptionsExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfigurationOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension *p)
{
	if (::soap_read_tt__VideoSourceConfigurationOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptions(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptions * soap_new_tt__VideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationOptions * soap_new_req_tt__VideoSourceConfigurationOptions(
	struct soap *soap,
	tt__IntRectangleRange *BoundsRange,
	const std::vector<std::string> & VideoSourceTokensAvailable)
{
	tt__VideoSourceConfigurationOptions *_p = ::soap_new_tt__VideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange;
		_p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable;
	}
	return _p;
}

inline tt__VideoSourceConfigurationOptions * soap_new_set_tt__VideoSourceConfigurationOptions(
	struct soap *soap,
	tt__IntRectangleRange *BoundsRange,
	const std::vector<std::string> & VideoSourceTokensAvailable,
	tt__VideoSourceConfigurationOptionsExtension *Extension,
	int *MaximumNumberOfProfiles)
{
	tt__VideoSourceConfigurationOptions *_p = ::soap_new_tt__VideoSourceConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange;
		_p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable;
		_p->tt__VideoSourceConfigurationOptions::Extension = Extension;
		_p->tt__VideoSourceConfigurationOptions::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfigurationOptions(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfigurationOptions(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfigurationOptions(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfigurationOptions(struct soap *soap, const char *URL, tt__VideoSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions *p)
{
	if (::soap_read_tt__VideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LensDescription_DEFINED
#define SOAP_TYPE_tt__LensDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensDescription(struct soap*, const char*, int, const tt__LensDescription *, const char*);
SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_in_tt__LensDescription(struct soap*, const char*, tt__LensDescription *, const char*);
SOAP_FMAC1 tt__LensDescription * SOAP_FMAC2 soap_instantiate_tt__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensDescription * soap_new_tt__LensDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensDescription(soap, n, NULL, NULL, NULL);
}

inline tt__LensDescription * soap_new_req_tt__LensDescription(
	struct soap *soap,
	tt__LensOffset *Offset,
	const std::vector<tt__LensProjection *> & Projection,
	float XFactor)
{
	tt__LensDescription *_p = ::soap_new_tt__LensDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensDescription::Offset = Offset;
		_p->tt__LensDescription::Projection = Projection;
		_p->tt__LensDescription::XFactor = XFactor;
	}
	return _p;
}

inline tt__LensDescription * soap_new_set_tt__LensDescription(
	struct soap *soap,
	tt__LensOffset *Offset,
	const std::vector<tt__LensProjection *> & Projection,
	float XFactor,
	float *FocalLength)
{
	tt__LensDescription *_p = ::soap_new_tt__LensDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensDescription::Offset = Offset;
		_p->tt__LensDescription::Projection = Projection;
		_p->tt__LensDescription::XFactor = XFactor;
		_p->tt__LensDescription::FocalLength = FocalLength;
	}
	return _p;
}

inline int soap_write_tt__LensDescription(struct soap *soap, tt__LensDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensDescription", p->soap_type() == SOAP_TYPE_tt__LensDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LensDescription(struct soap *soap, const char *URL, tt__LensDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensDescription", p->soap_type() == SOAP_TYPE_tt__LensDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LensDescription(struct soap *soap, const char *URL, tt__LensDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensDescription", p->soap_type() == SOAP_TYPE_tt__LensDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LensDescription(struct soap *soap, const char *URL, tt__LensDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensDescription", p->soap_type() == SOAP_TYPE_tt__LensDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_get_tt__LensDescription(struct soap*, tt__LensDescription *, const char*, const char*);

inline int soap_read_tt__LensDescription(struct soap *soap, tt__LensDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LensDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LensDescription(struct soap *soap, const char *URL, tt__LensDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LensDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LensDescription(struct soap *soap, tt__LensDescription *p)
{
	if (::soap_read_tt__LensDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LensOffset_DEFINED
#define SOAP_TYPE_tt__LensOffset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensOffset(struct soap*, const char*, int, const tt__LensOffset *, const char*);
SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_in_tt__LensOffset(struct soap*, const char*, tt__LensOffset *, const char*);
SOAP_FMAC1 tt__LensOffset * SOAP_FMAC2 soap_instantiate_tt__LensOffset(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensOffset * soap_new_tt__LensOffset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensOffset(soap, n, NULL, NULL, NULL);
}

inline tt__LensOffset * soap_new_req_tt__LensOffset(
	struct soap *soap)
{
	tt__LensOffset *_p = ::soap_new_tt__LensOffset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LensOffset * soap_new_set_tt__LensOffset(
	struct soap *soap,
	float *x,
	float *y)
{
	tt__LensOffset *_p = ::soap_new_tt__LensOffset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensOffset::x = x;
		_p->tt__LensOffset::y = y;
	}
	return _p;
}

inline int soap_write_tt__LensOffset(struct soap *soap, tt__LensOffset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensOffset", p->soap_type() == SOAP_TYPE_tt__LensOffset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LensOffset(struct soap *soap, const char *URL, tt__LensOffset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensOffset", p->soap_type() == SOAP_TYPE_tt__LensOffset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LensOffset(struct soap *soap, const char *URL, tt__LensOffset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensOffset", p->soap_type() == SOAP_TYPE_tt__LensOffset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LensOffset(struct soap *soap, const char *URL, tt__LensOffset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensOffset", p->soap_type() == SOAP_TYPE_tt__LensOffset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_get_tt__LensOffset(struct soap*, tt__LensOffset *, const char*, const char*);

inline int soap_read_tt__LensOffset(struct soap *soap, tt__LensOffset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LensOffset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LensOffset(struct soap *soap, const char *URL, tt__LensOffset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LensOffset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LensOffset(struct soap *soap, tt__LensOffset *p)
{
	if (::soap_read_tt__LensOffset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LensProjection_DEFINED
#define SOAP_TYPE_tt__LensProjection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensProjection(struct soap*, const char*, int, const tt__LensProjection *, const char*);
SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_in_tt__LensProjection(struct soap*, const char*, tt__LensProjection *, const char*);
SOAP_FMAC1 tt__LensProjection * SOAP_FMAC2 soap_instantiate_tt__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensProjection * soap_new_tt__LensProjection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LensProjection(soap, n, NULL, NULL, NULL);
}

inline tt__LensProjection * soap_new_req_tt__LensProjection(
	struct soap *soap,
	float Angle,
	float Radius)
{
	tt__LensProjection *_p = ::soap_new_tt__LensProjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensProjection::Angle = Angle;
		_p->tt__LensProjection::Radius = Radius;
	}
	return _p;
}

inline tt__LensProjection * soap_new_set_tt__LensProjection(
	struct soap *soap,
	float Angle,
	float Radius,
	float *Transmittance)
{
	tt__LensProjection *_p = ::soap_new_tt__LensProjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LensProjection::Angle = Angle;
		_p->tt__LensProjection::Radius = Radius;
		_p->tt__LensProjection::Transmittance = Transmittance;
	}
	return _p;
}

inline int soap_write_tt__LensProjection(struct soap *soap, tt__LensProjection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensProjection", p->soap_type() == SOAP_TYPE_tt__LensProjection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LensProjection(struct soap *soap, const char *URL, tt__LensProjection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensProjection", p->soap_type() == SOAP_TYPE_tt__LensProjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LensProjection(struct soap *soap, const char *URL, tt__LensProjection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensProjection", p->soap_type() == SOAP_TYPE_tt__LensProjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LensProjection(struct soap *soap, const char *URL, tt__LensProjection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LensProjection", p->soap_type() == SOAP_TYPE_tt__LensProjection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_get_tt__LensProjection(struct soap*, tt__LensProjection *, const char*, const char*);

inline int soap_read_tt__LensProjection(struct soap *soap, tt__LensProjection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LensProjection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LensProjection(struct soap *soap, const char *URL, tt__LensProjection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LensProjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LensProjection(struct soap *soap, tt__LensProjection *p)
{
	if (::soap_read_tt__LensProjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RotateExtension_DEFINED
#define SOAP_TYPE_tt__RotateExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateExtension(struct soap*, const char*, int, const tt__RotateExtension *, const char*);
SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_in_tt__RotateExtension(struct soap*, const char*, tt__RotateExtension *, const char*);
SOAP_FMAC1 tt__RotateExtension * SOAP_FMAC2 soap_instantiate_tt__RotateExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateExtension * soap_new_tt__RotateExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RotateExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RotateExtension * soap_new_req_tt__RotateExtension(
	struct soap *soap)
{
	tt__RotateExtension *_p = ::soap_new_tt__RotateExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RotateExtension * soap_new_set_tt__RotateExtension(
	struct soap *soap)
{
	tt__RotateExtension *_p = ::soap_new_tt__RotateExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__RotateExtension(struct soap *soap, tt__RotateExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateExtension", p->soap_type() == SOAP_TYPE_tt__RotateExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RotateExtension(struct soap *soap, const char *URL, tt__RotateExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateExtension", p->soap_type() == SOAP_TYPE_tt__RotateExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RotateExtension(struct soap *soap, const char *URL, tt__RotateExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateExtension", p->soap_type() == SOAP_TYPE_tt__RotateExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RotateExtension(struct soap *soap, const char *URL, tt__RotateExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RotateExtension", p->soap_type() == SOAP_TYPE_tt__RotateExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_get_tt__RotateExtension(struct soap*, tt__RotateExtension *, const char*, const char*);

inline int soap_read_tt__RotateExtension(struct soap *soap, tt__RotateExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RotateExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RotateExtension(struct soap *soap, const char *URL, tt__RotateExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RotateExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RotateExtension(struct soap *soap, tt__RotateExtension *p)
{
	if (::soap_read_tt__RotateExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Rotate_DEFINED
#define SOAP_TYPE_tt__Rotate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rotate(struct soap*, const char*, int, const tt__Rotate *, const char*);
SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_in_tt__Rotate(struct soap*, const char*, tt__Rotate *, const char*);
SOAP_FMAC1 tt__Rotate * SOAP_FMAC2 soap_instantiate_tt__Rotate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rotate * soap_new_tt__Rotate(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Rotate(soap, n, NULL, NULL, NULL);
}

inline tt__Rotate * soap_new_req_tt__Rotate(
	struct soap *soap,
	enum tt__RotateMode Mode)
{
	tt__Rotate *_p = ::soap_new_tt__Rotate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rotate::Mode = Mode;
	}
	return _p;
}

inline tt__Rotate * soap_new_set_tt__Rotate(
	struct soap *soap,
	enum tt__RotateMode Mode,
	int *Degree,
	tt__RotateExtension *Extension)
{
	tt__Rotate *_p = ::soap_new_tt__Rotate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Rotate::Mode = Mode;
		_p->tt__Rotate::Degree = Degree;
		_p->tt__Rotate::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Rotate(struct soap *soap, tt__Rotate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rotate", p->soap_type() == SOAP_TYPE_tt__Rotate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Rotate(struct soap *soap, const char *URL, tt__Rotate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rotate", p->soap_type() == SOAP_TYPE_tt__Rotate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Rotate(struct soap *soap, const char *URL, tt__Rotate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rotate", p->soap_type() == SOAP_TYPE_tt__Rotate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Rotate(struct soap *soap, const char *URL, tt__Rotate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Rotate", p->soap_type() == SOAP_TYPE_tt__Rotate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_get_tt__Rotate(struct soap*, tt__Rotate *, const char*, const char*);

inline int soap_read_tt__Rotate(struct soap *soap, tt__Rotate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Rotate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Rotate(struct soap *soap, const char *URL, tt__Rotate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Rotate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Rotate(struct soap *soap, tt__Rotate *p)
{
	if (::soap_read_tt__Rotate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension2 * soap_new_tt__VideoSourceConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationExtension2 * soap_new_req_tt__VideoSourceConfigurationExtension2(
	struct soap *soap)
{
	tt__VideoSourceConfigurationExtension2 *_p = ::soap_new_tt__VideoSourceConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationExtension2 * soap_new_set_tt__VideoSourceConfigurationExtension2(
	struct soap *soap,
	const std::vector<tt__LensDescription *> & LensDescription,
	tt__SceneOrientation *SceneOrientation)
{
	tt__VideoSourceConfigurationExtension2 *_p = ::soap_new_tt__VideoSourceConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationExtension2::LensDescription = LensDescription;
		_p->tt__VideoSourceConfigurationExtension2::SceneOrientation = SceneOrientation;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfigurationExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfigurationExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfigurationExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfigurationExtension2(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 *p)
{
	if (::soap_read_tt__VideoSourceConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension * soap_new_tt__VideoSourceConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfigurationExtension * soap_new_req_tt__VideoSourceConfigurationExtension(
	struct soap *soap)
{
	tt__VideoSourceConfigurationExtension *_p = ::soap_new_tt__VideoSourceConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceConfigurationExtension * soap_new_set_tt__VideoSourceConfigurationExtension(
	struct soap *soap,
	tt__Rotate *Rotate,
	tt__VideoSourceConfigurationExtension2 *Extension)
{
	tt__VideoSourceConfigurationExtension *_p = ::soap_new_tt__VideoSourceConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfigurationExtension::Rotate = Rotate;
		_p->tt__VideoSourceConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfigurationExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfigurationExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfigurationExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfigurationExtension(struct soap *soap, const char *URL, tt__VideoSourceConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension *p)
{
	if (::soap_read_tt__VideoSourceConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_tt__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfiguration(struct soap*, const char*, int, const tt__VideoSourceConfiguration *, const char*);
SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_in_tt__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration *, const char*);
SOAP_FMAC1 tt__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfiguration * soap_new_tt__VideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceConfiguration * soap_new_req_tt__VideoSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	tt__IntRectangle *Bounds,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoSourceConfiguration *_p = ::soap_new_tt__VideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfiguration::SourceToken = SourceToken;
		_p->tt__VideoSourceConfiguration::Bounds = Bounds;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__VideoSourceConfiguration * soap_new_set_tt__VideoSourceConfiguration(
	struct soap *soap,
	const std::string& SourceToken,
	tt__IntRectangle *Bounds,
	tt__VideoSourceConfigurationExtension *Extension,
	std::string *ViewMode,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__VideoSourceConfiguration *_p = ::soap_new_tt__VideoSourceConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceConfiguration::SourceToken = SourceToken;
		_p->tt__VideoSourceConfiguration::Bounds = Bounds;
		_p->tt__VideoSourceConfiguration::Extension = Extension;
		_p->tt__VideoSourceConfiguration::ViewMode = ViewMode;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceConfiguration(struct soap *soap, const char *URL, tt__VideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceConfiguration(struct soap *soap, const char *URL, tt__VideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceConfiguration(struct soap *soap, const char *URL, tt__VideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceConfiguration", p->soap_type() == SOAP_TYPE_tt__VideoSourceConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_get_tt__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *, const char*, const char*);

inline int soap_read_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceConfiguration(struct soap *soap, const char *URL, tt__VideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *p)
{
	if (::soap_read_tt__VideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity_DEFINED
#define SOAP_TYPE_tt__ConfigurationEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigurationEntity(struct soap*, const char*, int, const tt__ConfigurationEntity *, const char*);
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_in_tt__ConfigurationEntity(struct soap*, const char*, tt__ConfigurationEntity *, const char*);
SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigurationEntity * soap_new_tt__ConfigurationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigurationEntity(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigurationEntity * soap_new_req_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline tt__ConfigurationEntity * soap_new_set_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_get_tt__ConfigurationEntity(struct soap*, tt__ConfigurationEntity *, const char*, const char*);

inline int soap_read_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ConfigurationEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2_DEFINED
#define SOAP_TYPE_tt__ProfileExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension2(struct soap*, const char*, int, const tt__ProfileExtension2 *, const char*);
SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_in_tt__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 *, const char*);
SOAP_FMAC1 tt__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension2 * soap_new_tt__ProfileExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileExtension2 * soap_new_req_tt__ProfileExtension2(
	struct soap *soap)
{
	tt__ProfileExtension2 *_p = ::soap_new_tt__ProfileExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileExtension2 * soap_new_set_tt__ProfileExtension2(
	struct soap *soap)
{
	tt__ProfileExtension2 *_p = ::soap_new_tt__ProfileExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension2", p->soap_type() == SOAP_TYPE_tt__ProfileExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ProfileExtension2(struct soap *soap, const char *URL, tt__ProfileExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension2", p->soap_type() == SOAP_TYPE_tt__ProfileExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ProfileExtension2(struct soap *soap, const char *URL, tt__ProfileExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension2", p->soap_type() == SOAP_TYPE_tt__ProfileExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ProfileExtension2(struct soap *soap, const char *URL, tt__ProfileExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension2", p->soap_type() == SOAP_TYPE_tt__ProfileExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_get_tt__ProfileExtension2(struct soap*, tt__ProfileExtension2 *, const char*, const char*);

inline int soap_read_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ProfileExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ProfileExtension2(struct soap *soap, const char *URL, tt__ProfileExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ProfileExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 *p)
{
	if (::soap_read_tt__ProfileExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension_DEFINED
#define SOAP_TYPE_tt__ProfileExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension(struct soap*, const char*, int, const tt__ProfileExtension *, const char*);
SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_in_tt__ProfileExtension(struct soap*, const char*, tt__ProfileExtension *, const char*);
SOAP_FMAC1 tt__ProfileExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension * soap_new_tt__ProfileExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileExtension * soap_new_req_tt__ProfileExtension(
	struct soap *soap)
{
	tt__ProfileExtension *_p = ::soap_new_tt__ProfileExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ProfileExtension * soap_new_set_tt__ProfileExtension(
	struct soap *soap,
	tt__AudioOutputConfiguration *AudioOutputConfiguration,
	tt__AudioDecoderConfiguration *AudioDecoderConfiguration,
	tt__ProfileExtension2 *Extension)
{
	tt__ProfileExtension *_p = ::soap_new_tt__ProfileExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileExtension::AudioOutputConfiguration = AudioOutputConfiguration;
		_p->tt__ProfileExtension::AudioDecoderConfiguration = AudioDecoderConfiguration;
		_p->tt__ProfileExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension", p->soap_type() == SOAP_TYPE_tt__ProfileExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ProfileExtension(struct soap *soap, const char *URL, tt__ProfileExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension", p->soap_type() == SOAP_TYPE_tt__ProfileExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ProfileExtension(struct soap *soap, const char *URL, tt__ProfileExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension", p->soap_type() == SOAP_TYPE_tt__ProfileExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ProfileExtension(struct soap *soap, const char *URL, tt__ProfileExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileExtension", p->soap_type() == SOAP_TYPE_tt__ProfileExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_get_tt__ProfileExtension(struct soap*, tt__ProfileExtension *, const char*, const char*);

inline int soap_read_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ProfileExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ProfileExtension(struct soap *soap, const char *URL, tt__ProfileExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ProfileExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension *p)
{
	if (::soap_read_tt__ProfileExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Profile_DEFINED
#define SOAP_TYPE_tt__Profile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Profile(struct soap*, const char*, int, const tt__Profile *, const char*);
SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_in_tt__Profile(struct soap*, const char*, tt__Profile *, const char*);
SOAP_FMAC1 tt__Profile * SOAP_FMAC2 soap_instantiate_tt__Profile(struct soap*, int, const char*, const char*, size_t*);

inline tt__Profile * soap_new_tt__Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Profile(soap, n, NULL, NULL, NULL);
}

inline tt__Profile * soap_new_req_tt__Profile(
	struct soap *soap,
	const std::string& Name,
	const std::string& token)
{
	tt__Profile *_p = ::soap_new_tt__Profile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Profile::Name = Name;
		_p->tt__Profile::token = token;
	}
	return _p;
}

inline tt__Profile * soap_new_set_tt__Profile(
	struct soap *soap,
	const std::string& Name,
	tt__VideoSourceConfiguration *VideoSourceConfiguration,
	tt__AudioSourceConfiguration *AudioSourceConfiguration,
	tt__VideoEncoderConfiguration *VideoEncoderConfiguration,
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration,
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration,
	tt__PTZConfiguration *PTZConfiguration,
	tt__MetadataConfiguration *MetadataConfiguration,
	tt__ProfileExtension *Extension,
	const std::string& token,
	bool *fixed)
{
	tt__Profile *_p = ::soap_new_tt__Profile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Profile::Name = Name;
		_p->tt__Profile::VideoSourceConfiguration = VideoSourceConfiguration;
		_p->tt__Profile::AudioSourceConfiguration = AudioSourceConfiguration;
		_p->tt__Profile::VideoEncoderConfiguration = VideoEncoderConfiguration;
		_p->tt__Profile::AudioEncoderConfiguration = AudioEncoderConfiguration;
		_p->tt__Profile::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration;
		_p->tt__Profile::PTZConfiguration = PTZConfiguration;
		_p->tt__Profile::MetadataConfiguration = MetadataConfiguration;
		_p->tt__Profile::Extension = Extension;
		_p->tt__Profile::token = token;
		_p->tt__Profile::fixed = fixed;
	}
	return _p;
}

inline int soap_write_tt__Profile(struct soap *soap, tt__Profile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Profile", p->soap_type() == SOAP_TYPE_tt__Profile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Profile(struct soap *soap, const char *URL, tt__Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Profile", p->soap_type() == SOAP_TYPE_tt__Profile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Profile(struct soap *soap, const char *URL, tt__Profile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Profile", p->soap_type() == SOAP_TYPE_tt__Profile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Profile(struct soap *soap, const char *URL, tt__Profile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Profile", p->soap_type() == SOAP_TYPE_tt__Profile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_get_tt__Profile(struct soap*, tt__Profile *, const char*, const char*);

inline int soap_read_tt__Profile(struct soap *soap, tt__Profile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Profile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Profile(struct soap *soap, const char *URL, tt__Profile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Profile(struct soap *soap, tt__Profile *p)
{
	if (::soap_read_tt__Profile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AudioSource_DEFINED
#define SOAP_TYPE_tt__AudioSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSource(struct soap*, const char*, int, const tt__AudioSource *, const char*);
SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_in_tt__AudioSource(struct soap*, const char*, tt__AudioSource *, const char*);
SOAP_FMAC1 tt__AudioSource * SOAP_FMAC2 soap_instantiate_tt__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSource * soap_new_tt__AudioSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AudioSource(soap, n, NULL, NULL, NULL);
}

inline tt__AudioSource * soap_new_req_tt__AudioSource(
	struct soap *soap,
	int Channels,
	const std::string& token__1)
{
	tt__AudioSource *_p = ::soap_new_tt__AudioSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSource::Channels = Channels;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__AudioSource * soap_new_set_tt__AudioSource(
	struct soap *soap,
	int Channels,
	const std::string& token__1)
{
	tt__AudioSource *_p = ::soap_new_tt__AudioSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AudioSource::Channels = Channels;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__AudioSource(struct soap *soap, tt__AudioSource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSource", p->soap_type() == SOAP_TYPE_tt__AudioSource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AudioSource(struct soap *soap, const char *URL, tt__AudioSource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSource", p->soap_type() == SOAP_TYPE_tt__AudioSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AudioSource(struct soap *soap, const char *URL, tt__AudioSource const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSource", p->soap_type() == SOAP_TYPE_tt__AudioSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AudioSource(struct soap *soap, const char *URL, tt__AudioSource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AudioSource", p->soap_type() == SOAP_TYPE_tt__AudioSource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_get_tt__AudioSource(struct soap*, tt__AudioSource *, const char*, const char*);

inline int soap_read_tt__AudioSource(struct soap *soap, tt__AudioSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AudioSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AudioSource(struct soap *soap, const char *URL, tt__AudioSource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AudioSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AudioSource(struct soap *soap, tt__AudioSource *p)
{
	if (::soap_read_tt__AudioSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2_DEFINED
#define SOAP_TYPE_tt__VideoSourceExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension2(struct soap*, const char*, int, const tt__VideoSourceExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 *, const char*);
SOAP_FMAC1 tt__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension2 * soap_new_tt__VideoSourceExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceExtension2 * soap_new_req_tt__VideoSourceExtension2(
	struct soap *soap)
{
	tt__VideoSourceExtension2 *_p = ::soap_new_tt__VideoSourceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceExtension2 * soap_new_set_tt__VideoSourceExtension2(
	struct soap *soap)
{
	tt__VideoSourceExtension2 *_p = ::soap_new_tt__VideoSourceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceExtension2(struct soap *soap, const char *URL, tt__VideoSourceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceExtension2(struct soap *soap, const char *URL, tt__VideoSourceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceExtension2(struct soap *soap, const char *URL, tt__VideoSourceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension2", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *, const char*, const char*);

inline int soap_read_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceExtension2(struct soap *soap, const char *URL, tt__VideoSourceExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 *p)
{
	if (::soap_read_tt__VideoSourceExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension_DEFINED
#define SOAP_TYPE_tt__VideoSourceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension(struct soap*, const char*, int, const tt__VideoSourceExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_in_tt__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension *, const char*);
SOAP_FMAC1 tt__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension * soap_new_tt__VideoSourceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSourceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSourceExtension * soap_new_req_tt__VideoSourceExtension(
	struct soap *soap)
{
	tt__VideoSourceExtension *_p = ::soap_new_tt__VideoSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__VideoSourceExtension * soap_new_set_tt__VideoSourceExtension(
	struct soap *soap,
	tt__ImagingSettings20 *Imaging,
	tt__VideoSourceExtension2 *Extension)
{
	tt__VideoSourceExtension *_p = ::soap_new_tt__VideoSourceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSourceExtension::Imaging = Imaging;
		_p->tt__VideoSourceExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSourceExtension(struct soap *soap, const char *URL, tt__VideoSourceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSourceExtension(struct soap *soap, const char *URL, tt__VideoSourceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSourceExtension(struct soap *soap, const char *URL, tt__VideoSourceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSourceExtension", p->soap_type() == SOAP_TYPE_tt__VideoSourceExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_get_tt__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *, const char*, const char*);

inline int soap_read_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSourceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSourceExtension(struct soap *soap, const char *URL, tt__VideoSourceExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSourceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension *p)
{
	if (::soap_read_tt__VideoSourceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__VideoSource_DEFINED
#define SOAP_TYPE_tt__VideoSource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSource(struct soap*, const char*, int, const tt__VideoSource *, const char*);
SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_in_tt__VideoSource(struct soap*, const char*, tt__VideoSource *, const char*);
SOAP_FMAC1 tt__VideoSource * SOAP_FMAC2 soap_instantiate_tt__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSource * soap_new_tt__VideoSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__VideoSource(soap, n, NULL, NULL, NULL);
}

inline tt__VideoSource * soap_new_req_tt__VideoSource(
	struct soap *soap,
	float Framerate,
	tt__VideoResolution *Resolution,
	const std::string& token__1)
{
	tt__VideoSource *_p = ::soap_new_tt__VideoSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSource::Framerate = Framerate;
		_p->tt__VideoSource::Resolution = Resolution;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__VideoSource * soap_new_set_tt__VideoSource(
	struct soap *soap,
	float Framerate,
	tt__VideoResolution *Resolution,
	tt__ImagingSettings *Imaging,
	tt__VideoSourceExtension *Extension,
	const std::string& token__1)
{
	tt__VideoSource *_p = ::soap_new_tt__VideoSource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__VideoSource::Framerate = Framerate;
		_p->tt__VideoSource::Resolution = Resolution;
		_p->tt__VideoSource::Imaging = Imaging;
		_p->tt__VideoSource::Extension = Extension;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__VideoSource(struct soap *soap, tt__VideoSource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSource", p->soap_type() == SOAP_TYPE_tt__VideoSource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__VideoSource(struct soap *soap, const char *URL, tt__VideoSource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSource", p->soap_type() == SOAP_TYPE_tt__VideoSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__VideoSource(struct soap *soap, const char *URL, tt__VideoSource const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSource", p->soap_type() == SOAP_TYPE_tt__VideoSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__VideoSource(struct soap *soap, const char *URL, tt__VideoSource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:VideoSource", p->soap_type() == SOAP_TYPE_tt__VideoSource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_get_tt__VideoSource(struct soap*, tt__VideoSource *, const char*, const char*);

inline int soap_read_tt__VideoSource(struct soap *soap, tt__VideoSource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__VideoSource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__VideoSource(struct soap *soap, const char *URL, tt__VideoSource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__VideoSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__VideoSource(struct soap *soap, tt__VideoSource *p)
{
	if (::soap_read_tt__VideoSource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntItems_DEFINED
#define SOAP_TYPE_tt__IntItems_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntItems(struct soap*, const char*, int, const tt__IntItems *, const char*);
SOAP_FMAC3 tt__IntItems * SOAP_FMAC4 soap_in_tt__IntItems(struct soap*, const char*, tt__IntItems *, const char*);
SOAP_FMAC1 tt__IntItems * SOAP_FMAC2 soap_instantiate_tt__IntItems(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntItems * soap_new_tt__IntItems(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntItems(soap, n, NULL, NULL, NULL);
}

inline tt__IntItems * soap_new_req_tt__IntItems(
	struct soap *soap)
{
	tt__IntItems *_p = ::soap_new_tt__IntItems(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IntItems * soap_new_set_tt__IntItems(
	struct soap *soap,
	const std::vector<int> & Items)
{
	tt__IntItems *_p = ::soap_new_tt__IntItems(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntItems::Items = Items;
	}
	return _p;
}

inline int soap_write_tt__IntItems(struct soap *soap, tt__IntItems const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntItems", p->soap_type() == SOAP_TYPE_tt__IntItems ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntItems(struct soap *soap, const char *URL, tt__IntItems const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntItems", p->soap_type() == SOAP_TYPE_tt__IntItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntItems(struct soap *soap, const char *URL, tt__IntItems const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntItems", p->soap_type() == SOAP_TYPE_tt__IntItems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntItems(struct soap *soap, const char *URL, tt__IntItems const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntItems", p->soap_type() == SOAP_TYPE_tt__IntItems ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntItems * SOAP_FMAC4 soap_get_tt__IntItems(struct soap*, tt__IntItems *, const char*, const char*);

inline int soap_read_tt__IntItems(struct soap *soap, tt__IntItems *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntItems(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntItems(struct soap *soap, const char *URL, tt__IntItems *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntItems(struct soap *soap, tt__IntItems *p)
{
	if (::soap_read_tt__IntItems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DurationRange_DEFINED
#define SOAP_TYPE_tt__DurationRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DurationRange(struct soap*, const char*, int, const tt__DurationRange *, const char*);
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_in_tt__DurationRange(struct soap*, const char*, tt__DurationRange *, const char*);
SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DurationRange * soap_new_tt__DurationRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DurationRange(soap, n, NULL, NULL, NULL);
}

inline tt__DurationRange * soap_new_req_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline tt__DurationRange * soap_new_set_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__DurationRange(struct soap *soap, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_get_tt__DurationRange(struct soap*, tt__DurationRange *, const char*, const char*);

inline int soap_read_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DurationRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FloatRange_DEFINED
#define SOAP_TYPE_tt__FloatRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatRange(struct soap*, const char*, int, const tt__FloatRange *, const char*);
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_in_tt__FloatRange(struct soap*, const char*, tt__FloatRange *, const char*);
SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatRange * soap_new_tt__FloatRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FloatRange(soap, n, NULL, NULL, NULL);
}

inline tt__FloatRange * soap_new_req_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline tt__FloatRange * soap_new_set_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__FloatRange(struct soap *soap, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_get_tt__FloatRange(struct soap*, tt__FloatRange *, const char*, const char*);

inline int soap_read_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FloatRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange_DEFINED
#define SOAP_TYPE_tt__IntRectangleRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangleRange(struct soap*, const char*, int, const tt__IntRectangleRange *, const char*);
SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_in_tt__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange *, const char*);
SOAP_FMAC1 tt__IntRectangleRange * SOAP_FMAC2 soap_instantiate_tt__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangleRange * soap_new_tt__IntRectangleRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRectangleRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRectangleRange * soap_new_req_tt__IntRectangleRange(
	struct soap *soap,
	tt__IntRange *XRange,
	tt__IntRange *YRange,
	tt__IntRange *WidthRange,
	tt__IntRange *HeightRange)
{
	tt__IntRectangleRange *_p = ::soap_new_tt__IntRectangleRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangleRange::XRange = XRange;
		_p->tt__IntRectangleRange::YRange = YRange;
		_p->tt__IntRectangleRange::WidthRange = WidthRange;
		_p->tt__IntRectangleRange::HeightRange = HeightRange;
	}
	return _p;
}

inline tt__IntRectangleRange * soap_new_set_tt__IntRectangleRange(
	struct soap *soap,
	tt__IntRange *XRange,
	tt__IntRange *YRange,
	tt__IntRange *WidthRange,
	tt__IntRange *HeightRange)
{
	tt__IntRectangleRange *_p = ::soap_new_tt__IntRectangleRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangleRange::XRange = XRange;
		_p->tt__IntRectangleRange::YRange = YRange;
		_p->tt__IntRectangleRange::WidthRange = WidthRange;
		_p->tt__IntRectangleRange::HeightRange = HeightRange;
	}
	return _p;
}

inline int soap_write_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangleRange", p->soap_type() == SOAP_TYPE_tt__IntRectangleRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRectangleRange(struct soap *soap, const char *URL, tt__IntRectangleRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangleRange", p->soap_type() == SOAP_TYPE_tt__IntRectangleRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRectangleRange(struct soap *soap, const char *URL, tt__IntRectangleRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangleRange", p->soap_type() == SOAP_TYPE_tt__IntRectangleRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRectangleRange(struct soap *soap, const char *URL, tt__IntRectangleRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangleRange", p->soap_type() == SOAP_TYPE_tt__IntRectangleRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_get_tt__IntRectangleRange(struct soap*, tt__IntRectangleRange *, const char*, const char*);

inline int soap_read_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRectangleRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRectangleRange(struct soap *soap, const char *URL, tt__IntRectangleRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRectangleRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange *p)
{
	if (::soap_read_tt__IntRectangleRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRectangle_DEFINED
#define SOAP_TYPE_tt__IntRectangle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangle(struct soap*, const char*, int, const tt__IntRectangle *, const char*);
SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_in_tt__IntRectangle(struct soap*, const char*, tt__IntRectangle *, const char*);
SOAP_FMAC1 tt__IntRectangle * SOAP_FMAC2 soap_instantiate_tt__IntRectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangle * soap_new_tt__IntRectangle(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRectangle(soap, n, NULL, NULL, NULL);
}

inline tt__IntRectangle * soap_new_req_tt__IntRectangle(
	struct soap *soap,
	int x,
	int y,
	int width,
	int height)
{
	tt__IntRectangle *_p = ::soap_new_tt__IntRectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangle::x = x;
		_p->tt__IntRectangle::y = y;
		_p->tt__IntRectangle::width = width;
		_p->tt__IntRectangle::height = height;
	}
	return _p;
}

inline tt__IntRectangle * soap_new_set_tt__IntRectangle(
	struct soap *soap,
	int x,
	int y,
	int width,
	int height)
{
	tt__IntRectangle *_p = ::soap_new_tt__IntRectangle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRectangle::x = x;
		_p->tt__IntRectangle::y = y;
		_p->tt__IntRectangle::width = width;
		_p->tt__IntRectangle::height = height;
	}
	return _p;
}

inline int soap_write_tt__IntRectangle(struct soap *soap, tt__IntRectangle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangle", p->soap_type() == SOAP_TYPE_tt__IntRectangle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRectangle(struct soap *soap, const char *URL, tt__IntRectangle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangle", p->soap_type() == SOAP_TYPE_tt__IntRectangle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRectangle(struct soap *soap, const char *URL, tt__IntRectangle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangle", p->soap_type() == SOAP_TYPE_tt__IntRectangle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRectangle(struct soap *soap, const char *URL, tt__IntRectangle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRectangle", p->soap_type() == SOAP_TYPE_tt__IntRectangle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_get_tt__IntRectangle(struct soap*, tt__IntRectangle *, const char*, const char*);

inline int soap_read_tt__IntRectangle(struct soap *soap, tt__IntRectangle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRectangle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRectangle(struct soap *soap, const char *URL, tt__IntRectangle *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRectangle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRectangle(struct soap *soap, tt__IntRectangle *p)
{
	if (::soap_read_tt__IntRectangle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity_DEFINED
#define SOAP_TYPE_tt__DeviceEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);
SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

inline int soap_read_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__MoveAndStartTrackingResponse_DEFINED
#define SOAP_TYPE__tptz__MoveAndStartTrackingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__MoveAndStartTrackingResponse(struct soap*, const char*, int, const _tptz__MoveAndStartTrackingResponse *, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC4 soap_in__tptz__MoveAndStartTrackingResponse(struct soap*, const char*, _tptz__MoveAndStartTrackingResponse *, const char*);
SOAP_FMAC1 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTrackingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__MoveAndStartTrackingResponse * soap_new__tptz__MoveAndStartTrackingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__MoveAndStartTrackingResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__MoveAndStartTrackingResponse * soap_new_req__tptz__MoveAndStartTrackingResponse(
	struct soap *soap)
{
	_tptz__MoveAndStartTrackingResponse *_p = ::soap_new__tptz__MoveAndStartTrackingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__MoveAndStartTrackingResponse * soap_new_set__tptz__MoveAndStartTrackingResponse(
	struct soap *soap)
{
	_tptz__MoveAndStartTrackingResponse *_p = ::soap_new__tptz__MoveAndStartTrackingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC4 soap_get__tptz__MoveAndStartTrackingResponse(struct soap*, _tptz__MoveAndStartTrackingResponse *, const char*, const char*);

inline int soap_read__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__MoveAndStartTrackingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__MoveAndStartTrackingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse *p)
{
	if (::soap_read__tptz__MoveAndStartTrackingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE__tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__MoveAndStartTracking(struct soap*, const char*, int, const _tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTracking * SOAP_FMAC4 soap_in__tptz__MoveAndStartTracking(struct soap*, const char*, _tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC1 _tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__MoveAndStartTracking * soap_new__tptz__MoveAndStartTracking(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__MoveAndStartTracking(soap, n, NULL, NULL, NULL);
}

inline _tptz__MoveAndStartTracking * soap_new_req__tptz__MoveAndStartTracking(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__MoveAndStartTracking *_p = ::soap_new__tptz__MoveAndStartTracking(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__MoveAndStartTracking::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__MoveAndStartTracking * soap_new_set__tptz__MoveAndStartTracking(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetToken,
	tt__GeoLocation *GeoLocation,
	tt__PTZVector *TargetPosition,
	tt__PTZSpeed *Speed,
	std::string *ObjectID)
{
	_tptz__MoveAndStartTracking *_p = ::soap_new__tptz__MoveAndStartTracking(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__MoveAndStartTracking::ProfileToken = ProfileToken;
		_p->_tptz__MoveAndStartTracking::PresetToken = PresetToken;
		_p->_tptz__MoveAndStartTracking::GeoLocation = GeoLocation;
		_p->_tptz__MoveAndStartTracking::TargetPosition = TargetPosition;
		_p->_tptz__MoveAndStartTracking::Speed = Speed;
		_p->_tptz__MoveAndStartTracking::ObjectID = ObjectID;
	}
	return _p;
}

inline int soap_write__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__MoveAndStartTracking * SOAP_FMAC4 soap_get__tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_read__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__MoveAndStartTracking(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking *p)
{
	if (::soap_read__tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurationsResponse * soap_new__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_req__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_set__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurationsResponse(struct soap*, _tptz__GetCompatibleConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurations * soap_new__tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurations * soap_new_req__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurations * soap_new_set__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTourResponse(struct soap*, const char*, int, const _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetTourResponse(struct soap*, const char*, _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTourResponse * soap_new__tptz__RemovePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTourResponse * soap_new_req__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetTourResponse * soap_new_set__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetTourResponse(struct soap*, _tptz__RemovePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTour(struct soap*, const char*, int, const _tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_in__tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTour * soap_new__tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTour * soap_new_req__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__RemovePresetTour * soap_new_set__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_get__tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTourResponse(struct soap*, const char*, int, const _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__OperatePresetTourResponse(struct soap*, const char*, _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTourResponse * soap_new__tptz__OperatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTourResponse * soap_new_req__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__OperatePresetTourResponse * soap_new_set__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__OperatePresetTourResponse(struct soap*, _tptz__OperatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTour(struct soap*, const char*, int, const _tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_in__tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTour * soap_new__tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTour * soap_new_req__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline _tptz__OperatePresetTour * soap_new_set__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_get__tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTourResponse(struct soap*, const char*, int, const _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_in__tptz__ModifyPresetTourResponse(struct soap*, const char*, _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTourResponse * soap_new__tptz__ModifyPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTourResponse * soap_new_req__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ModifyPresetTourResponse * soap_new_set__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_get__tptz__ModifyPresetTourResponse(struct soap*, _tptz__ModifyPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTour(struct soap*, const char*, int, const _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_in__tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTour * soap_new__tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTour * soap_new_req__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__ModifyPresetTour * soap_new_set__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_get__tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTourResponse(struct soap*, const char*, int, const _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__CreatePresetTourResponse(struct soap*, const char*, _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTourResponse * soap_new__tptz__CreatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTourResponse * soap_new_req__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__CreatePresetTourResponse * soap_new_set__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__CreatePresetTourResponse(struct soap*, _tptz__CreatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTour(struct soap*, const char*, int, const _tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_in__tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTour * soap_new__tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTour * soap_new_req__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__CreatePresetTour * soap_new_set__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_get__tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, int, const _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptionsResponse * soap_new__tptz__GetPresetTourOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_req__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_set__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptionsResponse(struct soap*, _tptz__GetPresetTourOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptions(struct soap*, const char*, int, const _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptions * soap_new__tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptions * soap_new_req__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTourOptions * soap_new_set__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetTourToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTourOptions::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourResponse(struct soap*, const char*, int, const _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourResponse(struct soap*, const char*, _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourResponse * soap_new__tptz__GetPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourResponse * soap_new_req__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__GetPresetTourResponse * soap_new_set__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourResponse(struct soap*, _tptz__GetPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour_DEFINED
#define SOAP_TYPE__tptz__GetPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTour(struct soap*, const char*, int, const _tptz__GetPresetTour *, const char*);
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_in__tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour *, const char*);
SOAP_FMAC1 _tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTour * soap_new__tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTour * soap_new_req__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__GetPresetTour * soap_new_set__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_get__tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *, const char*, const char*);

inline int soap_read__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetToursResponse(struct soap*, const char*, int, const _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_in__tptz__GetPresetToursResponse(struct soap*, const char*, _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetToursResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetToursResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetToursResponse * soap_new__tptz__GetPresetToursResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetToursResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetToursResponse * soap_new_req__tptz__GetPresetToursResponse(
	struct soap *soap)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetToursResponse * soap_new_set__tptz__GetPresetToursResponse(
	struct soap *soap,
	const std::vector<tt__PresetTour *> & PresetTour)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetToursResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_get__tptz__GetPresetToursResponse(struct soap*, _tptz__GetPresetToursResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetToursResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours_DEFINED
#define SOAP_TYPE__tptz__GetPresetTours_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTours(struct soap*, const char*, int, const _tptz__GetPresetTours *, const char*);
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_in__tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours *, const char*);
SOAP_FMAC1 _tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTours * soap_new__tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTours * soap_new_req__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTours * soap_new_set__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_get__tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *, const char*, const char*);

inline int soap_read__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__StopResponse_DEFINED
#define SOAP_TYPE__tptz__StopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__StopResponse(struct soap*, const char*, int, const _tptz__StopResponse *, const char*);
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_in__tptz__StopResponse(struct soap*, const char*, _tptz__StopResponse *, const char*);
SOAP_FMAC1 _tptz__StopResponse * SOAP_FMAC2 soap_instantiate__tptz__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__StopResponse * soap_new__tptz__StopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__StopResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__StopResponse * soap_new_req__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__StopResponse * soap_new_set__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__StopResponse(struct soap *soap, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_get__tptz__StopResponse(struct soap*, _tptz__StopResponse *, const char*, const char*);

inline int soap_read__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__StopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__Stop_DEFINED
#define SOAP_TYPE__tptz__Stop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__Stop(struct soap*, const char*, int, const _tptz__Stop *, const char*);
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_in__tptz__Stop(struct soap*, const char*, _tptz__Stop *, const char*);
SOAP_FMAC1 _tptz__Stop * SOAP_FMAC2 soap_instantiate__tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__Stop * soap_new__tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline _tptz__Stop * soap_new_req__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__Stop * soap_new_set__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken,
	bool *PanTilt,
	bool *Zoom)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
		_p->_tptz__Stop::PanTilt = PanTilt;
		_p->_tptz__Stop::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write__tptz__Stop(struct soap *soap, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_get__tptz__Stop(struct soap*, _tptz__Stop *, const char*, const char*);

inline int soap_read__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
#define SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMoveResponse(struct soap*, const char*, int, const _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_in__tptz__GeoMoveResponse(struct soap*, const char*, _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC1 _tptz__GeoMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__GeoMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMoveResponse * soap_new__tptz__GeoMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMoveResponse * soap_new_req__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GeoMoveResponse * soap_new_set__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_get__tptz__GeoMoveResponse(struct soap*, _tptz__GeoMoveResponse *, const char*, const char*);

inline int soap_read__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMove_DEFINED
#define SOAP_TYPE__tptz__GeoMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMove(struct soap*, const char*, int, const _tptz__GeoMove *, const char*);
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_in__tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove *, const char*);
SOAP_FMAC1 _tptz__GeoMove * SOAP_FMAC2 soap_instantiate__tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMove * soap_new__tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMove * soap_new_req__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
	}
	return _p;
}

inline _tptz__GeoMove * soap_new_set__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target,
	tt__PTZSpeed *Speed,
	float *AreaHeight,
	float *AreaWidth)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
		_p->_tptz__GeoMove::Speed = Speed;
		_p->_tptz__GeoMove::AreaHeight = AreaHeight;
		_p->_tptz__GeoMove::AreaWidth = AreaWidth;
	}
	return _p;
}

inline int soap_write__tptz__GeoMove(struct soap *soap, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_get__tptz__GeoMove(struct soap*, _tptz__GeoMove *, const char*, const char*);

inline int soap_read__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMoveResponse(struct soap*, const char*, int, const _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_in__tptz__AbsoluteMoveResponse(struct soap*, const char*, _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMoveResponse * soap_new__tptz__AbsoluteMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMoveResponse * soap_new_req__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__AbsoluteMoveResponse * soap_new_set__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_get__tptz__AbsoluteMoveResponse(struct soap*, _tptz__AbsoluteMoveResponse *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMove(struct soap*, const char*, int, const _tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_in__tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMove * soap_new__tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMove * soap_new_req__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
	}
	return _p;
}

inline _tptz__AbsoluteMove * soap_new_set__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position,
	tt__PTZSpeed *Speed)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
		_p->_tptz__AbsoluteMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_get__tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
#define SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMoveResponse(struct soap*, const char*, int, const _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_in__tptz__RelativeMoveResponse(struct soap*, const char*, _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC1 _tptz__RelativeMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__RelativeMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMoveResponse * soap_new__tptz__RelativeMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMoveResponse * soap_new_req__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RelativeMoveResponse * soap_new_set__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_get__tptz__RelativeMoveResponse(struct soap*, _tptz__RelativeMoveResponse *, const char*, const char*);

inline int soap_read__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove_DEFINED
#define SOAP_TYPE__tptz__RelativeMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMove(struct soap*, const char*, int, const _tptz__RelativeMove *, const char*);
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_in__tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove *, const char*);
SOAP_FMAC1 _tptz__RelativeMove * SOAP_FMAC2 soap_instantiate__tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMove * soap_new__tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMove * soap_new_req__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
	}
	return _p;
}

inline _tptz__RelativeMove * soap_new_set__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation,
	tt__PTZSpeed *Speed)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
		_p->_tptz__RelativeMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_get__tptz__RelativeMove(struct soap*, _tptz__RelativeMove *, const char*, const char*);

inline int soap_read__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
#define SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMoveResponse(struct soap*, const char*, int, const _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_in__tptz__ContinuousMoveResponse(struct soap*, const char*, _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC1 _tptz__ContinuousMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMoveResponse * soap_new__tptz__ContinuousMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMoveResponse * soap_new_req__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ContinuousMoveResponse * soap_new_set__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_get__tptz__ContinuousMoveResponse(struct soap*, _tptz__ContinuousMoveResponse *, const char*, const char*);

inline int soap_read__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove_DEFINED
#define SOAP_TYPE__tptz__ContinuousMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMove(struct soap*, const char*, int, const _tptz__ContinuousMove *, const char*);
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_in__tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove *, const char*);
SOAP_FMAC1 _tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMove * soap_new__tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMove * soap_new_req__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
	}
	return _p;
}

inline _tptz__ContinuousMove * soap_new_set__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity,
	std::string *Timeout)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
		_p->_tptz__ContinuousMove::Timeout = Timeout;
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_get__tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *, const char*, const char*);

inline int soap_read__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePositionResponse(struct soap*, const char*, int, const _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_in__tptz__SetHomePositionResponse(struct soap*, const char*, _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__SetHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__SetHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePositionResponse * soap_new__tptz__SetHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePositionResponse * soap_new_req__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetHomePositionResponse * soap_new_set__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_get__tptz__SetHomePositionResponse(struct soap*, _tptz__SetHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition_DEFINED
#define SOAP_TYPE__tptz__SetHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePosition(struct soap*, const char*, int, const _tptz__SetHomePosition *, const char*);
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_in__tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition *, const char*);
SOAP_FMAC1 _tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate__tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePosition * soap_new__tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePosition * soap_new_req__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetHomePosition * soap_new_set__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_get__tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *, const char*, const char*);

inline int soap_read__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePositionResponse(struct soap*, const char*, int, const _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_in__tptz__GotoHomePositionResponse(struct soap*, const char*, _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__GotoHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePositionResponse * soap_new__tptz__GotoHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePositionResponse * soap_new_req__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoHomePositionResponse * soap_new_set__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_get__tptz__GotoHomePositionResponse(struct soap*, _tptz__GotoHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE__tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePosition(struct soap*, const char*, int, const _tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_in__tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 _tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePosition * soap_new__tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePosition * soap_new_req__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GotoHomePosition * soap_new_set__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
		_p->_tptz__GotoHomePosition::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_get__tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse_DEFINED
#define SOAP_TYPE__tptz__GetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatusResponse(struct soap*, const char*, int, const _tptz__GetStatusResponse *, const char*);
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_in__tptz__GetStatusResponse(struct soap*, const char*, _tptz__GetStatusResponse *, const char*);
SOAP_FMAC1 _tptz__GetStatusResponse * SOAP_FMAC2 soap_instantiate__tptz__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatusResponse * soap_new__tptz__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatusResponse * soap_new_req__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline _tptz__GetStatusResponse * soap_new_set__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline int soap_write__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_get__tptz__GetStatusResponse(struct soap*, _tptz__GetStatusResponse *, const char*, const char*);

inline int soap_read__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatus_DEFINED
#define SOAP_TYPE__tptz__GetStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatus(struct soap*, const char*, int, const _tptz__GetStatus *, const char*);
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_in__tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus *, const char*);
SOAP_FMAC1 _tptz__GetStatus * SOAP_FMAC2 soap_instantiate__tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatus * soap_new__tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatus * soap_new_req__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetStatus * soap_new_set__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetStatus(struct soap *soap, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_get__tptz__GetStatus(struct soap*, _tptz__GetStatus *, const char*, const char*);

inline int soap_read__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
#define SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPresetResponse(struct soap*, const char*, int, const _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_in__tptz__GotoPresetResponse(struct soap*, const char*, _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC1 _tptz__GotoPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPresetResponse * soap_new__tptz__GotoPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPresetResponse * soap_new_req__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoPresetResponse * soap_new_set__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_get__tptz__GotoPresetResponse(struct soap*, _tptz__GotoPresetResponse *, const char*, const char*);

inline int soap_read__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset_DEFINED
#define SOAP_TYPE__tptz__GotoPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPreset(struct soap*, const char*, int, const _tptz__GotoPreset *, const char*);
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_in__tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset *, const char*);
SOAP_FMAC1 _tptz__GotoPreset * SOAP_FMAC2 soap_instantiate__tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPreset * soap_new__tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPreset * soap_new_req__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__GotoPreset * soap_new_set__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
		_p->_tptz__GotoPreset::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_get__tptz__GotoPreset(struct soap*, _tptz__GotoPreset *, const char*, const char*);

inline int soap_read__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetResponse(struct soap*, const char*, int, const _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetResponse(struct soap*, const char*, _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetResponse * soap_new__tptz__RemovePresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetResponse * soap_new_req__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetResponse * soap_new_set__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetResponse(struct soap*, _tptz__RemovePresetResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset_DEFINED
#define SOAP_TYPE__tptz__RemovePreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePreset(struct soap*, const char*, int, const _tptz__RemovePreset *, const char*);
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_in__tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset *, const char*);
SOAP_FMAC1 _tptz__RemovePreset * SOAP_FMAC2 soap_instantiate__tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePreset * soap_new__tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePreset * soap_new_req__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__RemovePreset * soap_new_set__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_get__tptz__RemovePreset(struct soap*, _tptz__RemovePreset *, const char*, const char*);

inline int soap_read__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse_DEFINED
#define SOAP_TYPE__tptz__SetPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPresetResponse(struct soap*, const char*, int, const _tptz__SetPresetResponse *, const char*);
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_in__tptz__SetPresetResponse(struct soap*, const char*, _tptz__SetPresetResponse *, const char*);
SOAP_FMAC1 _tptz__SetPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__SetPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPresetResponse * soap_new__tptz__SetPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPresetResponse * soap_new_req__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__SetPresetResponse * soap_new_set__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_get__tptz__SetPresetResponse(struct soap*, _tptz__SetPresetResponse *, const char*, const char*);

inline int soap_read__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPreset_DEFINED
#define SOAP_TYPE__tptz__SetPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPreset(struct soap*, const char*, int, const _tptz__SetPreset *, const char*);
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_in__tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset *, const char*);
SOAP_FMAC1 _tptz__SetPreset * SOAP_FMAC2 soap_instantiate__tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPreset * soap_new__tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPreset * soap_new_req__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetPreset * soap_new_set__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetName,
	std::string *PresetToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
		_p->_tptz__SetPreset::PresetName = PresetName;
		_p->_tptz__SetPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPreset(struct soap *soap, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_get__tptz__SetPreset(struct soap*, _tptz__SetPreset *, const char*, const char*);

inline int soap_read__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetsResponse(struct soap*, const char*, int, const _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetsResponse(struct soap*, const char*, _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetsResponse * soap_new__tptz__GetPresetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetsResponse * soap_new_req__tptz__GetPresetsResponse(
	struct soap *soap)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetsResponse * soap_new_set__tptz__GetPresetsResponse(
	struct soap *soap,
	const std::vector<tt__PTZPreset *> & Preset)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetsResponse::Preset = Preset;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetsResponse(struct soap*, _tptz__GetPresetsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresets_DEFINED
#define SOAP_TYPE__tptz__GetPresets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresets(struct soap*, const char*, int, const _tptz__GetPresets *, const char*);
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_in__tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets *, const char*);
SOAP_FMAC1 _tptz__GetPresets * SOAP_FMAC2 soap_instantiate__tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresets * soap_new__tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresets * soap_new_req__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresets * soap_new_set__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresets(struct soap *soap, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_get__tptz__GetPresets(struct soap*, _tptz__GetPresets *, const char*, const char*);

inline int soap_read__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommandResponse * soap_new__tptz__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_req__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_set__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommandResponse(struct soap*, _tptz__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommand * soap_new__tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommand * soap_new_req__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommand * soap_new_set__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptionsResponse * soap_new__tptz__GetConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_req__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_set__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptionsResponse(struct soap*, _tptz__GetConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptions(struct soap*, const char*, int, const _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptions * soap_new__tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptions * soap_new_req__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfigurationOptions * soap_new_set__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfigurationResponse(struct soap*, const char*, int, const _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__SetConfigurationResponse(struct soap*, const char*, _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfigurationResponse * soap_new__tptz__SetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfigurationResponse * soap_new_req__tptz__SetConfigurationResponse(
	struct soap *soap)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetConfigurationResponse * soap_new_set__tptz__SetConfigurationResponse(
	struct soap *soap,
	struct __tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfigurationResponse::__SetConfigurationResponse_sequence = __SetConfigurationResponse_sequence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__SetConfigurationResponse(struct soap*, _tptz__SetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration_DEFINED
#define SOAP_TYPE__tptz__SetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfiguration(struct soap*, const char*, int, const _tptz__SetConfiguration *, const char*);
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_in__tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration *, const char*);
SOAP_FMAC1 _tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfiguration * soap_new__tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfiguration * soap_new_req__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _tptz__SetConfiguration * soap_new_set__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_get__tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *, const char*, const char*);

inline int soap_read__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationResponse(struct soap*, const char*, int, const _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationResponse(struct soap*, const char*, _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationResponse * soap_new__tptz__GetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationResponse * soap_new_req__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline _tptz__GetConfigurationResponse * soap_new_set__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationResponse(struct soap*, _tptz__GetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration_DEFINED
#define SOAP_TYPE__tptz__GetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfiguration(struct soap*, const char*, int, const _tptz__GetConfiguration *, const char*);
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_in__tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration *, const char*);
SOAP_FMAC1 _tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfiguration * soap_new__tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfiguration * soap_new_req__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfiguration * soap_new_set__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_get__tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *, const char*, const char*);

inline int soap_read__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationsResponse(struct soap*, const char*, _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationsResponse * soap_new__tptz__GetConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationsResponse * soap_new_req__tptz__GetConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurationsResponse * soap_new_set__tptz__GetConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationsResponse(struct soap*, _tptz__GetConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurations(struct soap*, const char*, int, const _tptz__GetConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_in__tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurations * soap_new__tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurations * soap_new_req__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurations * soap_new_set__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_get__tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodeResponse(struct soap*, const char*, int, const _tptz__GetNodeResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_in__tptz__GetNodeResponse(struct soap*, const char*, _tptz__GetNodeResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodeResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodeResponse * soap_new__tptz__GetNodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodeResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodeResponse * soap_new_req__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline _tptz__GetNodeResponse * soap_new_set__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_get__tptz__GetNodeResponse(struct soap*, _tptz__GetNodeResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNode_DEFINED
#define SOAP_TYPE__tptz__GetNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNode(struct soap*, const char*, int, const _tptz__GetNode *, const char*);
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_in__tptz__GetNode(struct soap*, const char*, _tptz__GetNode *, const char*);
SOAP_FMAC1 _tptz__GetNode * SOAP_FMAC2 soap_instantiate__tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNode * soap_new__tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNode * soap_new_req__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline _tptz__GetNode * soap_new_set__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline int soap_write__tptz__GetNode(struct soap *soap, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_get__tptz__GetNode(struct soap*, _tptz__GetNode *, const char*, const char*);

inline int soap_read__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodesResponse(struct soap*, const char*, int, const _tptz__GetNodesResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_in__tptz__GetNodesResponse(struct soap*, const char*, _tptz__GetNodesResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodesResponse * soap_new__tptz__GetNodesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodesResponse * soap_new_req__tptz__GetNodesResponse(
	struct soap *soap)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodesResponse * soap_new_set__tptz__GetNodesResponse(
	struct soap *soap,
	const std::vector<tt__PTZNode *> & PTZNode)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodesResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_get__tptz__GetNodesResponse(struct soap*, _tptz__GetNodesResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodes_DEFINED
#define SOAP_TYPE__tptz__GetNodes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodes(struct soap*, const char*, int, const _tptz__GetNodes *, const char*);
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_in__tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes *, const char*);
SOAP_FMAC1 _tptz__GetNodes * SOAP_FMAC2 soap_instantiate__tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodes * soap_new__tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodes * soap_new_req__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodes * soap_new_set__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetNodes(struct soap *soap, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_get__tptz__GetNodes(struct soap*, _tptz__GetNodes *, const char*, const char*);

inline int soap_read__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilitiesResponse * soap_new__tptz__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_req__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_set__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilitiesResponse(struct soap*, _tptz__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilities(struct soap*, const char*, int, const _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilities * soap_new__tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilities * soap_new_req__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetServiceCapabilities * soap_new_set__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tptz__Capabilities_DEFINED
#define SOAP_TYPE_tptz__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tptz__Capabilities(struct soap*, const char*, int, const tptz__Capabilities *, const char*);
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_in_tptz__Capabilities(struct soap*, const char*, tptz__Capabilities *, const char*);
SOAP_FMAC1 tptz__Capabilities * SOAP_FMAC2 soap_instantiate_tptz__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tptz__Capabilities * soap_new_tptz__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tptz__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tptz__Capabilities * soap_new_req_tptz__Capabilities(
	struct soap *soap)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tptz__Capabilities * soap_new_set_tptz__Capabilities(
	struct soap *soap,
	bool *EFlip,
	bool *Reverse,
	bool *GetCompatibleConfigurations,
	bool *MoveStatus,
	bool *StatusPosition,
	std::string *MoveAndTrack)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tptz__Capabilities::EFlip = EFlip;
		_p->tptz__Capabilities::Reverse = Reverse;
		_p->tptz__Capabilities::GetCompatibleConfigurations = GetCompatibleConfigurations;
		_p->tptz__Capabilities::MoveStatus = MoveStatus;
		_p->tptz__Capabilities::StatusPosition = StatusPosition;
		_p->tptz__Capabilities::MoveAndTrack = MoveAndTrack;
	}
	return _p;
}

inline int soap_write_tptz__Capabilities(struct soap *soap, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_get_tptz__Capabilities(struct soap*, tptz__Capabilities *, const char*, const char*);

inline int soap_read_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tptz__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xml__lang(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__xml__lang(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_DEFINED
#define SOAP_TYPE_xsd__anySimpleType_DEFINED

inline void soap_default_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);

#define soap_xsd__anySimpleType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anySimpleType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_new_xsd__anySimpleType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anySimpleType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anySimpleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anySimpleType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__DeleteOSD_DEFINED
#define SOAP_TYPE___trt__DeleteOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__DeleteOSD(struct soap*, struct __trt__DeleteOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__DeleteOSD(struct soap*, const struct __trt__DeleteOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__DeleteOSD(struct soap*, const char*, int, const struct __trt__DeleteOSD *, const char*);
SOAP_FMAC3 struct __trt__DeleteOSD * SOAP_FMAC4 soap_in___trt__DeleteOSD(struct soap*, const char*, struct __trt__DeleteOSD *, const char*);
SOAP_FMAC1 struct __trt__DeleteOSD * SOAP_FMAC2 soap_instantiate___trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__DeleteOSD * soap_new___trt__DeleteOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__DeleteOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__DeleteOSD * soap_new_req___trt__DeleteOSD(
	struct soap *soap)
{
	struct __trt__DeleteOSD *_p = ::soap_new___trt__DeleteOSD(soap);
	if (_p)
	{	::soap_default___trt__DeleteOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__DeleteOSD * soap_new_set___trt__DeleteOSD(
	struct soap *soap,
	_trt__DeleteOSD *trt__DeleteOSD)
{
	struct __trt__DeleteOSD *_p = ::soap_new___trt__DeleteOSD(soap);
	if (_p)
	{	::soap_default___trt__DeleteOSD(soap, _p);
		_p->trt__DeleteOSD = trt__DeleteOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__DeleteOSD(struct soap*, const struct __trt__DeleteOSD *, const char*, const char*);

inline int soap_write___trt__DeleteOSD(struct soap *soap, struct __trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__DeleteOSD(soap, p), 0) || ::soap_put___trt__DeleteOSD(soap, p, "-trt:DeleteOSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__DeleteOSD(struct soap *soap, const char *URL, struct __trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteOSD(soap, p), 0) || ::soap_put___trt__DeleteOSD(soap, p, "-trt:DeleteOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__DeleteOSD(struct soap *soap, const char *URL, struct __trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteOSD(soap, p), 0) || ::soap_put___trt__DeleteOSD(soap, p, "-trt:DeleteOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__DeleteOSD(struct soap *soap, const char *URL, struct __trt__DeleteOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteOSD(soap, p), 0) || ::soap_put___trt__DeleteOSD(soap, p, "-trt:DeleteOSD", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__DeleteOSD * SOAP_FMAC4 soap_get___trt__DeleteOSD(struct soap*, struct __trt__DeleteOSD *, const char*, const char*);

inline int soap_read___trt__DeleteOSD(struct soap *soap, struct __trt__DeleteOSD *p)
{
	if (p)
	{	::soap_default___trt__DeleteOSD(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__DeleteOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__DeleteOSD(struct soap *soap, const char *URL, struct __trt__DeleteOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__DeleteOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__DeleteOSD(struct soap *soap, struct __trt__DeleteOSD *p)
{
	if (::soap_read___trt__DeleteOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__CreateOSD_DEFINED
#define SOAP_TYPE___trt__CreateOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__CreateOSD(struct soap*, struct __trt__CreateOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__CreateOSD(struct soap*, const struct __trt__CreateOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__CreateOSD(struct soap*, const char*, int, const struct __trt__CreateOSD *, const char*);
SOAP_FMAC3 struct __trt__CreateOSD * SOAP_FMAC4 soap_in___trt__CreateOSD(struct soap*, const char*, struct __trt__CreateOSD *, const char*);
SOAP_FMAC1 struct __trt__CreateOSD * SOAP_FMAC2 soap_instantiate___trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__CreateOSD * soap_new___trt__CreateOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__CreateOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__CreateOSD * soap_new_req___trt__CreateOSD(
	struct soap *soap)
{
	struct __trt__CreateOSD *_p = ::soap_new___trt__CreateOSD(soap);
	if (_p)
	{	::soap_default___trt__CreateOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__CreateOSD * soap_new_set___trt__CreateOSD(
	struct soap *soap,
	_trt__CreateOSD *trt__CreateOSD)
{
	struct __trt__CreateOSD *_p = ::soap_new___trt__CreateOSD(soap);
	if (_p)
	{	::soap_default___trt__CreateOSD(soap, _p);
		_p->trt__CreateOSD = trt__CreateOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__CreateOSD(struct soap*, const struct __trt__CreateOSD *, const char*, const char*);

inline int soap_write___trt__CreateOSD(struct soap *soap, struct __trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__CreateOSD(soap, p), 0) || ::soap_put___trt__CreateOSD(soap, p, "-trt:CreateOSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__CreateOSD(struct soap *soap, const char *URL, struct __trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateOSD(soap, p), 0) || ::soap_put___trt__CreateOSD(soap, p, "-trt:CreateOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__CreateOSD(struct soap *soap, const char *URL, struct __trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateOSD(soap, p), 0) || ::soap_put___trt__CreateOSD(soap, p, "-trt:CreateOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__CreateOSD(struct soap *soap, const char *URL, struct __trt__CreateOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateOSD(soap, p), 0) || ::soap_put___trt__CreateOSD(soap, p, "-trt:CreateOSD", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__CreateOSD * SOAP_FMAC4 soap_get___trt__CreateOSD(struct soap*, struct __trt__CreateOSD *, const char*, const char*);

inline int soap_read___trt__CreateOSD(struct soap *soap, struct __trt__CreateOSD *p)
{
	if (p)
	{	::soap_default___trt__CreateOSD(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__CreateOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__CreateOSD(struct soap *soap, const char *URL, struct __trt__CreateOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__CreateOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__CreateOSD(struct soap *soap, struct __trt__CreateOSD *p)
{
	if (::soap_read___trt__CreateOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetOSD_DEFINED
#define SOAP_TYPE___trt__SetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetOSD(struct soap*, struct __trt__SetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetOSD(struct soap*, const struct __trt__SetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetOSD(struct soap*, const char*, int, const struct __trt__SetOSD *, const char*);
SOAP_FMAC3 struct __trt__SetOSD * SOAP_FMAC4 soap_in___trt__SetOSD(struct soap*, const char*, struct __trt__SetOSD *, const char*);
SOAP_FMAC1 struct __trt__SetOSD * SOAP_FMAC2 soap_instantiate___trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetOSD * soap_new___trt__SetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetOSD * soap_new_req___trt__SetOSD(
	struct soap *soap)
{
	struct __trt__SetOSD *_p = ::soap_new___trt__SetOSD(soap);
	if (_p)
	{	::soap_default___trt__SetOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__SetOSD * soap_new_set___trt__SetOSD(
	struct soap *soap,
	_trt__SetOSD *trt__SetOSD)
{
	struct __trt__SetOSD *_p = ::soap_new___trt__SetOSD(soap);
	if (_p)
	{	::soap_default___trt__SetOSD(soap, _p);
		_p->trt__SetOSD = trt__SetOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetOSD(struct soap*, const struct __trt__SetOSD *, const char*, const char*);

inline int soap_write___trt__SetOSD(struct soap *soap, struct __trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetOSD(soap, p), 0) || ::soap_put___trt__SetOSD(soap, p, "-trt:SetOSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetOSD(struct soap *soap, const char *URL, struct __trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetOSD(soap, p), 0) || ::soap_put___trt__SetOSD(soap, p, "-trt:SetOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetOSD(struct soap *soap, const char *URL, struct __trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetOSD(soap, p), 0) || ::soap_put___trt__SetOSD(soap, p, "-trt:SetOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetOSD(struct soap *soap, const char *URL, struct __trt__SetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetOSD(soap, p), 0) || ::soap_put___trt__SetOSD(soap, p, "-trt:SetOSD", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetOSD * SOAP_FMAC4 soap_get___trt__SetOSD(struct soap*, struct __trt__SetOSD *, const char*, const char*);

inline int soap_read___trt__SetOSD(struct soap *soap, struct __trt__SetOSD *p)
{
	if (p)
	{	::soap_default___trt__SetOSD(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetOSD(struct soap *soap, const char *URL, struct __trt__SetOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetOSD(struct soap *soap, struct __trt__SetOSD *p)
{
	if (::soap_read___trt__SetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetOSDOptions_DEFINED
#define SOAP_TYPE___trt__GetOSDOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSDOptions(struct soap*, struct __trt__GetOSDOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSDOptions(struct soap*, const struct __trt__GetOSDOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSDOptions(struct soap*, const char*, int, const struct __trt__GetOSDOptions *, const char*);
SOAP_FMAC3 struct __trt__GetOSDOptions * SOAP_FMAC4 soap_in___trt__GetOSDOptions(struct soap*, const char*, struct __trt__GetOSDOptions *, const char*);
SOAP_FMAC1 struct __trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate___trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSDOptions * soap_new___trt__GetOSDOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSDOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSDOptions * soap_new_req___trt__GetOSDOptions(
	struct soap *soap)
{
	struct __trt__GetOSDOptions *_p = ::soap_new___trt__GetOSDOptions(soap);
	if (_p)
	{	::soap_default___trt__GetOSDOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSDOptions * soap_new_set___trt__GetOSDOptions(
	struct soap *soap,
	_trt__GetOSDOptions *trt__GetOSDOptions)
{
	struct __trt__GetOSDOptions *_p = ::soap_new___trt__GetOSDOptions(soap);
	if (_p)
	{	::soap_default___trt__GetOSDOptions(soap, _p);
		_p->trt__GetOSDOptions = trt__GetOSDOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSDOptions(struct soap*, const struct __trt__GetOSDOptions *, const char*, const char*);

inline int soap_write___trt__GetOSDOptions(struct soap *soap, struct __trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetOSDOptions(soap, p), 0) || ::soap_put___trt__GetOSDOptions(soap, p, "-trt:GetOSDOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetOSDOptions(struct soap *soap, const char *URL, struct __trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDOptions(soap, p), 0) || ::soap_put___trt__GetOSDOptions(soap, p, "-trt:GetOSDOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetOSDOptions(struct soap *soap, const char *URL, struct __trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDOptions(soap, p), 0) || ::soap_put___trt__GetOSDOptions(soap, p, "-trt:GetOSDOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetOSDOptions(struct soap *soap, const char *URL, struct __trt__GetOSDOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDOptions(soap, p), 0) || ::soap_put___trt__GetOSDOptions(soap, p, "-trt:GetOSDOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSDOptions * SOAP_FMAC4 soap_get___trt__GetOSDOptions(struct soap*, struct __trt__GetOSDOptions *, const char*, const char*);

inline int soap_read___trt__GetOSDOptions(struct soap *soap, struct __trt__GetOSDOptions *p)
{
	if (p)
	{	::soap_default___trt__GetOSDOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetOSDOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetOSDOptions(struct soap *soap, const char *URL, struct __trt__GetOSDOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetOSDOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetOSDOptions(struct soap *soap, struct __trt__GetOSDOptions *p)
{
	if (::soap_read___trt__GetOSDOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetOSD_DEFINED
#define SOAP_TYPE___trt__GetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSD(struct soap*, struct __trt__GetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSD(struct soap*, const struct __trt__GetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSD(struct soap*, const char*, int, const struct __trt__GetOSD *, const char*);
SOAP_FMAC3 struct __trt__GetOSD * SOAP_FMAC4 soap_in___trt__GetOSD(struct soap*, const char*, struct __trt__GetOSD *, const char*);
SOAP_FMAC1 struct __trt__GetOSD * SOAP_FMAC2 soap_instantiate___trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSD * soap_new___trt__GetOSD(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSD(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSD * soap_new_req___trt__GetOSD(
	struct soap *soap)
{
	struct __trt__GetOSD *_p = ::soap_new___trt__GetOSD(soap);
	if (_p)
	{	::soap_default___trt__GetOSD(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSD * soap_new_set___trt__GetOSD(
	struct soap *soap,
	_trt__GetOSD *trt__GetOSD)
{
	struct __trt__GetOSD *_p = ::soap_new___trt__GetOSD(soap);
	if (_p)
	{	::soap_default___trt__GetOSD(soap, _p);
		_p->trt__GetOSD = trt__GetOSD;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSD(struct soap*, const struct __trt__GetOSD *, const char*, const char*);

inline int soap_write___trt__GetOSD(struct soap *soap, struct __trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetOSD(soap, p), 0) || ::soap_put___trt__GetOSD(soap, p, "-trt:GetOSD", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetOSD(struct soap *soap, const char *URL, struct __trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSD(soap, p), 0) || ::soap_put___trt__GetOSD(soap, p, "-trt:GetOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetOSD(struct soap *soap, const char *URL, struct __trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSD(soap, p), 0) || ::soap_put___trt__GetOSD(soap, p, "-trt:GetOSD", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetOSD(struct soap *soap, const char *URL, struct __trt__GetOSD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSD(soap, p), 0) || ::soap_put___trt__GetOSD(soap, p, "-trt:GetOSD", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSD * SOAP_FMAC4 soap_get___trt__GetOSD(struct soap*, struct __trt__GetOSD *, const char*, const char*);

inline int soap_read___trt__GetOSD(struct soap *soap, struct __trt__GetOSD *p)
{
	if (p)
	{	::soap_default___trt__GetOSD(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetOSD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetOSD(struct soap *soap, const char *URL, struct __trt__GetOSD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetOSD(struct soap *soap, struct __trt__GetOSD *p)
{
	if (::soap_read___trt__GetOSD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetOSDs_DEFINED
#define SOAP_TYPE___trt__GetOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetOSDs(struct soap*, struct __trt__GetOSDs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetOSDs(struct soap*, const struct __trt__GetOSDs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetOSDs(struct soap*, const char*, int, const struct __trt__GetOSDs *, const char*);
SOAP_FMAC3 struct __trt__GetOSDs * SOAP_FMAC4 soap_in___trt__GetOSDs(struct soap*, const char*, struct __trt__GetOSDs *, const char*);
SOAP_FMAC1 struct __trt__GetOSDs * SOAP_FMAC2 soap_instantiate___trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetOSDs * soap_new___trt__GetOSDs(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetOSDs(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetOSDs * soap_new_req___trt__GetOSDs(
	struct soap *soap)
{
	struct __trt__GetOSDs *_p = ::soap_new___trt__GetOSDs(soap);
	if (_p)
	{	::soap_default___trt__GetOSDs(soap, _p);
	}
	return _p;
}

inline struct __trt__GetOSDs * soap_new_set___trt__GetOSDs(
	struct soap *soap,
	_trt__GetOSDs *trt__GetOSDs)
{
	struct __trt__GetOSDs *_p = ::soap_new___trt__GetOSDs(soap);
	if (_p)
	{	::soap_default___trt__GetOSDs(soap, _p);
		_p->trt__GetOSDs = trt__GetOSDs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetOSDs(struct soap*, const struct __trt__GetOSDs *, const char*, const char*);

inline int soap_write___trt__GetOSDs(struct soap *soap, struct __trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetOSDs(soap, p), 0) || ::soap_put___trt__GetOSDs(soap, p, "-trt:GetOSDs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetOSDs(struct soap *soap, const char *URL, struct __trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDs(soap, p), 0) || ::soap_put___trt__GetOSDs(soap, p, "-trt:GetOSDs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetOSDs(struct soap *soap, const char *URL, struct __trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDs(soap, p), 0) || ::soap_put___trt__GetOSDs(soap, p, "-trt:GetOSDs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetOSDs(struct soap *soap, const char *URL, struct __trt__GetOSDs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetOSDs(soap, p), 0) || ::soap_put___trt__GetOSDs(soap, p, "-trt:GetOSDs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetOSDs * SOAP_FMAC4 soap_get___trt__GetOSDs(struct soap*, struct __trt__GetOSDs *, const char*, const char*);

inline int soap_read___trt__GetOSDs(struct soap *soap, struct __trt__GetOSDs *p)
{
	if (p)
	{	::soap_default___trt__GetOSDs(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetOSDs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetOSDs(struct soap *soap, const char *URL, struct __trt__GetOSDs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetOSDs(struct soap *soap, struct __trt__GetOSDs *p)
{
	if (::soap_read___trt__GetOSDs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE___trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoSourceMode(struct soap*, struct __trt__SetVideoSourceMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoSourceMode(struct soap*, const struct __trt__SetVideoSourceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoSourceMode(struct soap*, const char*, int, const struct __trt__SetVideoSourceMode *, const char*);
SOAP_FMAC3 struct __trt__SetVideoSourceMode * SOAP_FMAC4 soap_in___trt__SetVideoSourceMode(struct soap*, const char*, struct __trt__SetVideoSourceMode *, const char*);
SOAP_FMAC1 struct __trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoSourceMode * soap_new___trt__SetVideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoSourceMode(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoSourceMode * soap_new_req___trt__SetVideoSourceMode(
	struct soap *soap)
{
	struct __trt__SetVideoSourceMode *_p = ::soap_new___trt__SetVideoSourceMode(soap);
	if (_p)
	{	::soap_default___trt__SetVideoSourceMode(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoSourceMode * soap_new_set___trt__SetVideoSourceMode(
	struct soap *soap,
	_trt__SetVideoSourceMode *trt__SetVideoSourceMode)
{
	struct __trt__SetVideoSourceMode *_p = ::soap_new___trt__SetVideoSourceMode(soap);
	if (_p)
	{	::soap_default___trt__SetVideoSourceMode(soap, _p);
		_p->trt__SetVideoSourceMode = trt__SetVideoSourceMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoSourceMode(struct soap*, const struct __trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_write___trt__SetVideoSourceMode(struct soap *soap, struct __trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetVideoSourceMode(soap, p), 0) || ::soap_put___trt__SetVideoSourceMode(soap, p, "-trt:SetVideoSourceMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetVideoSourceMode(struct soap *soap, const char *URL, struct __trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceMode(soap, p), 0) || ::soap_put___trt__SetVideoSourceMode(soap, p, "-trt:SetVideoSourceMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetVideoSourceMode(struct soap *soap, const char *URL, struct __trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceMode(soap, p), 0) || ::soap_put___trt__SetVideoSourceMode(soap, p, "-trt:SetVideoSourceMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetVideoSourceMode(struct soap *soap, const char *URL, struct __trt__SetVideoSourceMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceMode(soap, p), 0) || ::soap_put___trt__SetVideoSourceMode(soap, p, "-trt:SetVideoSourceMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoSourceMode * SOAP_FMAC4 soap_get___trt__SetVideoSourceMode(struct soap*, struct __trt__SetVideoSourceMode *, const char*, const char*);

inline int soap_read___trt__SetVideoSourceMode(struct soap *soap, struct __trt__SetVideoSourceMode *p)
{
	if (p)
	{	::soap_default___trt__SetVideoSourceMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetVideoSourceMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetVideoSourceMode(struct soap *soap, const char *URL, struct __trt__SetVideoSourceMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetVideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetVideoSourceMode(struct soap *soap, struct __trt__SetVideoSourceMode *p)
{
	if (::soap_read___trt__SetVideoSourceMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceModes(struct soap*, struct __trt__GetVideoSourceModes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceModes(struct soap*, const struct __trt__GetVideoSourceModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceModes(struct soap*, const char*, int, const struct __trt__GetVideoSourceModes *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceModes * SOAP_FMAC4 soap_in___trt__GetVideoSourceModes(struct soap*, const char*, struct __trt__GetVideoSourceModes *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceModes * soap_new___trt__GetVideoSourceModes(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceModes(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceModes * soap_new_req___trt__GetVideoSourceModes(
	struct soap *soap)
{
	struct __trt__GetVideoSourceModes *_p = ::soap_new___trt__GetVideoSourceModes(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceModes(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceModes * soap_new_set___trt__GetVideoSourceModes(
	struct soap *soap,
	_trt__GetVideoSourceModes *trt__GetVideoSourceModes)
{
	struct __trt__GetVideoSourceModes *_p = ::soap_new___trt__GetVideoSourceModes(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceModes(soap, _p);
		_p->trt__GetVideoSourceModes = trt__GetVideoSourceModes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceModes(struct soap*, const struct __trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceModes(struct soap *soap, struct __trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoSourceModes(soap, p), 0) || ::soap_put___trt__GetVideoSourceModes(soap, p, "-trt:GetVideoSourceModes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoSourceModes(struct soap *soap, const char *URL, struct __trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceModes(soap, p), 0) || ::soap_put___trt__GetVideoSourceModes(soap, p, "-trt:GetVideoSourceModes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoSourceModes(struct soap *soap, const char *URL, struct __trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceModes(soap, p), 0) || ::soap_put___trt__GetVideoSourceModes(soap, p, "-trt:GetVideoSourceModes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoSourceModes(struct soap *soap, const char *URL, struct __trt__GetVideoSourceModes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceModes(soap, p), 0) || ::soap_put___trt__GetVideoSourceModes(soap, p, "-trt:GetVideoSourceModes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceModes * SOAP_FMAC4 soap_get___trt__GetVideoSourceModes(struct soap*, struct __trt__GetVideoSourceModes *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceModes(struct soap *soap, struct __trt__GetVideoSourceModes *p)
{
	if (p)
	{	::soap_default___trt__GetVideoSourceModes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoSourceModes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoSourceModes(struct soap *soap, const char *URL, struct __trt__GetVideoSourceModes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoSourceModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoSourceModes(struct soap *soap, struct __trt__GetVideoSourceModes *p)
{
	if (::soap_read___trt__GetVideoSourceModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE___trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetSnapshotUri(struct soap*, struct __trt__GetSnapshotUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetSnapshotUri(struct soap*, const struct __trt__GetSnapshotUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetSnapshotUri(struct soap*, const char*, int, const struct __trt__GetSnapshotUri *, const char*);
SOAP_FMAC3 struct __trt__GetSnapshotUri * SOAP_FMAC4 soap_in___trt__GetSnapshotUri(struct soap*, const char*, struct __trt__GetSnapshotUri *, const char*);
SOAP_FMAC1 struct __trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetSnapshotUri * soap_new___trt__GetSnapshotUri(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetSnapshotUri(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetSnapshotUri * soap_new_req___trt__GetSnapshotUri(
	struct soap *soap)
{
	struct __trt__GetSnapshotUri *_p = ::soap_new___trt__GetSnapshotUri(soap);
	if (_p)
	{	::soap_default___trt__GetSnapshotUri(soap, _p);
	}
	return _p;
}

inline struct __trt__GetSnapshotUri * soap_new_set___trt__GetSnapshotUri(
	struct soap *soap,
	_trt__GetSnapshotUri *trt__GetSnapshotUri)
{
	struct __trt__GetSnapshotUri *_p = ::soap_new___trt__GetSnapshotUri(soap);
	if (_p)
	{	::soap_default___trt__GetSnapshotUri(soap, _p);
		_p->trt__GetSnapshotUri = trt__GetSnapshotUri;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetSnapshotUri(struct soap*, const struct __trt__GetSnapshotUri *, const char*, const char*);

inline int soap_write___trt__GetSnapshotUri(struct soap *soap, struct __trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetSnapshotUri(soap, p), 0) || ::soap_put___trt__GetSnapshotUri(soap, p, "-trt:GetSnapshotUri", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetSnapshotUri(struct soap *soap, const char *URL, struct __trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetSnapshotUri(soap, p), 0) || ::soap_put___trt__GetSnapshotUri(soap, p, "-trt:GetSnapshotUri", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetSnapshotUri(struct soap *soap, const char *URL, struct __trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetSnapshotUri(soap, p), 0) || ::soap_put___trt__GetSnapshotUri(soap, p, "-trt:GetSnapshotUri", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetSnapshotUri(struct soap *soap, const char *URL, struct __trt__GetSnapshotUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetSnapshotUri(soap, p), 0) || ::soap_put___trt__GetSnapshotUri(soap, p, "-trt:GetSnapshotUri", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetSnapshotUri * SOAP_FMAC4 soap_get___trt__GetSnapshotUri(struct soap*, struct __trt__GetSnapshotUri *, const char*, const char*);

inline int soap_read___trt__GetSnapshotUri(struct soap *soap, struct __trt__GetSnapshotUri *p)
{
	if (p)
	{	::soap_default___trt__GetSnapshotUri(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetSnapshotUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetSnapshotUri(struct soap *soap, const char *URL, struct __trt__GetSnapshotUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetSnapshotUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetSnapshotUri(struct soap *soap, struct __trt__GetSnapshotUri *p)
{
	if (::soap_read___trt__GetSnapshotUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE___trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetSynchronizationPoint(struct soap*, struct __trt__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetSynchronizationPoint(struct soap*, const struct __trt__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetSynchronizationPoint(struct soap*, const char*, int, const struct __trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __trt__SetSynchronizationPoint * SOAP_FMAC4 soap_in___trt__SetSynchronizationPoint(struct soap*, const char*, struct __trt__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 struct __trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetSynchronizationPoint * soap_new___trt__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetSynchronizationPoint * soap_new_req___trt__SetSynchronizationPoint(
	struct soap *soap)
{
	struct __trt__SetSynchronizationPoint *_p = ::soap_new___trt__SetSynchronizationPoint(soap);
	if (_p)
	{	::soap_default___trt__SetSynchronizationPoint(soap, _p);
	}
	return _p;
}

inline struct __trt__SetSynchronizationPoint * soap_new_set___trt__SetSynchronizationPoint(
	struct soap *soap,
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint)
{
	struct __trt__SetSynchronizationPoint *_p = ::soap_new___trt__SetSynchronizationPoint(soap);
	if (_p)
	{	::soap_default___trt__SetSynchronizationPoint(soap, _p);
		_p->trt__SetSynchronizationPoint = trt__SetSynchronizationPoint;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetSynchronizationPoint(struct soap*, const struct __trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_write___trt__SetSynchronizationPoint(struct soap *soap, struct __trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetSynchronizationPoint(soap, p), 0) || ::soap_put___trt__SetSynchronizationPoint(soap, p, "-trt:SetSynchronizationPoint", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetSynchronizationPoint(soap, p), 0) || ::soap_put___trt__SetSynchronizationPoint(soap, p, "-trt:SetSynchronizationPoint", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetSynchronizationPoint(soap, p), 0) || ::soap_put___trt__SetSynchronizationPoint(soap, p, "-trt:SetSynchronizationPoint", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __trt__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetSynchronizationPoint(soap, p), 0) || ::soap_put___trt__SetSynchronizationPoint(soap, p, "-trt:SetSynchronizationPoint", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetSynchronizationPoint * SOAP_FMAC4 soap_get___trt__SetSynchronizationPoint(struct soap*, struct __trt__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read___trt__SetSynchronizationPoint(struct soap *soap, struct __trt__SetSynchronizationPoint *p)
{
	if (p)
	{	::soap_default___trt__SetSynchronizationPoint(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __trt__SetSynchronizationPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetSynchronizationPoint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetSynchronizationPoint(struct soap *soap, struct __trt__SetSynchronizationPoint *p)
{
	if (::soap_read___trt__SetSynchronizationPoint(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE___trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__StopMulticastStreaming(struct soap*, struct __trt__StopMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__StopMulticastStreaming(struct soap*, const struct __trt__StopMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__StopMulticastStreaming(struct soap*, const char*, int, const struct __trt__StopMulticastStreaming *, const char*);
SOAP_FMAC3 struct __trt__StopMulticastStreaming * SOAP_FMAC4 soap_in___trt__StopMulticastStreaming(struct soap*, const char*, struct __trt__StopMulticastStreaming *, const char*);
SOAP_FMAC1 struct __trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__StopMulticastStreaming * soap_new___trt__StopMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__StopMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline struct __trt__StopMulticastStreaming * soap_new_req___trt__StopMulticastStreaming(
	struct soap *soap)
{
	struct __trt__StopMulticastStreaming *_p = ::soap_new___trt__StopMulticastStreaming(soap);
	if (_p)
	{	::soap_default___trt__StopMulticastStreaming(soap, _p);
	}
	return _p;
}

inline struct __trt__StopMulticastStreaming * soap_new_set___trt__StopMulticastStreaming(
	struct soap *soap,
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming)
{
	struct __trt__StopMulticastStreaming *_p = ::soap_new___trt__StopMulticastStreaming(soap);
	if (_p)
	{	::soap_default___trt__StopMulticastStreaming(soap, _p);
		_p->trt__StopMulticastStreaming = trt__StopMulticastStreaming;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__StopMulticastStreaming(struct soap*, const struct __trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_write___trt__StopMulticastStreaming(struct soap *soap, struct __trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__StopMulticastStreaming(soap, p), 0) || ::soap_put___trt__StopMulticastStreaming(soap, p, "-trt:StopMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__StopMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StopMulticastStreaming(soap, p), 0) || ::soap_put___trt__StopMulticastStreaming(soap, p, "-trt:StopMulticastStreaming", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__StopMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StopMulticastStreaming(soap, p), 0) || ::soap_put___trt__StopMulticastStreaming(soap, p, "-trt:StopMulticastStreaming", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__StopMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StopMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StopMulticastStreaming(soap, p), 0) || ::soap_put___trt__StopMulticastStreaming(soap, p, "-trt:StopMulticastStreaming", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__StopMulticastStreaming * SOAP_FMAC4 soap_get___trt__StopMulticastStreaming(struct soap*, struct __trt__StopMulticastStreaming *, const char*, const char*);

inline int soap_read___trt__StopMulticastStreaming(struct soap *soap, struct __trt__StopMulticastStreaming *p)
{
	if (p)
	{	::soap_default___trt__StopMulticastStreaming(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__StopMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__StopMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StopMulticastStreaming *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__StopMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__StopMulticastStreaming(struct soap *soap, struct __trt__StopMulticastStreaming *p)
{
	if (::soap_read___trt__StopMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE___trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__StartMulticastStreaming(struct soap*, struct __trt__StartMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__StartMulticastStreaming(struct soap*, const struct __trt__StartMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__StartMulticastStreaming(struct soap*, const char*, int, const struct __trt__StartMulticastStreaming *, const char*);
SOAP_FMAC3 struct __trt__StartMulticastStreaming * SOAP_FMAC4 soap_in___trt__StartMulticastStreaming(struct soap*, const char*, struct __trt__StartMulticastStreaming *, const char*);
SOAP_FMAC1 struct __trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__StartMulticastStreaming * soap_new___trt__StartMulticastStreaming(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__StartMulticastStreaming(soap, n, NULL, NULL, NULL);
}

inline struct __trt__StartMulticastStreaming * soap_new_req___trt__StartMulticastStreaming(
	struct soap *soap)
{
	struct __trt__StartMulticastStreaming *_p = ::soap_new___trt__StartMulticastStreaming(soap);
	if (_p)
	{	::soap_default___trt__StartMulticastStreaming(soap, _p);
	}
	return _p;
}

inline struct __trt__StartMulticastStreaming * soap_new_set___trt__StartMulticastStreaming(
	struct soap *soap,
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming)
{
	struct __trt__StartMulticastStreaming *_p = ::soap_new___trt__StartMulticastStreaming(soap);
	if (_p)
	{	::soap_default___trt__StartMulticastStreaming(soap, _p);
		_p->trt__StartMulticastStreaming = trt__StartMulticastStreaming;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__StartMulticastStreaming(struct soap*, const struct __trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_write___trt__StartMulticastStreaming(struct soap *soap, struct __trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__StartMulticastStreaming(soap, p), 0) || ::soap_put___trt__StartMulticastStreaming(soap, p, "-trt:StartMulticastStreaming", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__StartMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StartMulticastStreaming(soap, p), 0) || ::soap_put___trt__StartMulticastStreaming(soap, p, "-trt:StartMulticastStreaming", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__StartMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StartMulticastStreaming(soap, p), 0) || ::soap_put___trt__StartMulticastStreaming(soap, p, "-trt:StartMulticastStreaming", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__StartMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StartMulticastStreaming const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__StartMulticastStreaming(soap, p), 0) || ::soap_put___trt__StartMulticastStreaming(soap, p, "-trt:StartMulticastStreaming", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__StartMulticastStreaming * SOAP_FMAC4 soap_get___trt__StartMulticastStreaming(struct soap*, struct __trt__StartMulticastStreaming *, const char*, const char*);

inline int soap_read___trt__StartMulticastStreaming(struct soap *soap, struct __trt__StartMulticastStreaming *p)
{
	if (p)
	{	::soap_default___trt__StartMulticastStreaming(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__StartMulticastStreaming(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__StartMulticastStreaming(struct soap *soap, const char *URL, struct __trt__StartMulticastStreaming *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__StartMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__StartMulticastStreaming(struct soap *soap, struct __trt__StartMulticastStreaming *p)
{
	if (::soap_read___trt__StartMulticastStreaming(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri_DEFINED
#define SOAP_TYPE___trt__GetStreamUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetStreamUri(struct soap*, struct __trt__GetStreamUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetStreamUri(struct soap*, const struct __trt__GetStreamUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetStreamUri(struct soap*, const char*, int, const struct __trt__GetStreamUri *, const char*);
SOAP_FMAC3 struct __trt__GetStreamUri * SOAP_FMAC4 soap_in___trt__GetStreamUri(struct soap*, const char*, struct __trt__GetStreamUri *, const char*);
SOAP_FMAC1 struct __trt__GetStreamUri * SOAP_FMAC2 soap_instantiate___trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetStreamUri * soap_new___trt__GetStreamUri(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetStreamUri(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetStreamUri * soap_new_req___trt__GetStreamUri(
	struct soap *soap)
{
	struct __trt__GetStreamUri *_p = ::soap_new___trt__GetStreamUri(soap);
	if (_p)
	{	::soap_default___trt__GetStreamUri(soap, _p);
	}
	return _p;
}

inline struct __trt__GetStreamUri * soap_new_set___trt__GetStreamUri(
	struct soap *soap,
	_trt__GetStreamUri *trt__GetStreamUri)
{
	struct __trt__GetStreamUri *_p = ::soap_new___trt__GetStreamUri(soap);
	if (_p)
	{	::soap_default___trt__GetStreamUri(soap, _p);
		_p->trt__GetStreamUri = trt__GetStreamUri;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetStreamUri(struct soap*, const struct __trt__GetStreamUri *, const char*, const char*);

inline int soap_write___trt__GetStreamUri(struct soap *soap, struct __trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetStreamUri(soap, p), 0) || ::soap_put___trt__GetStreamUri(soap, p, "-trt:GetStreamUri", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetStreamUri(struct soap *soap, const char *URL, struct __trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetStreamUri(soap, p), 0) || ::soap_put___trt__GetStreamUri(soap, p, "-trt:GetStreamUri", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetStreamUri(struct soap *soap, const char *URL, struct __trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetStreamUri(soap, p), 0) || ::soap_put___trt__GetStreamUri(soap, p, "-trt:GetStreamUri", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetStreamUri(struct soap *soap, const char *URL, struct __trt__GetStreamUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetStreamUri(soap, p), 0) || ::soap_put___trt__GetStreamUri(soap, p, "-trt:GetStreamUri", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetStreamUri * SOAP_FMAC4 soap_get___trt__GetStreamUri(struct soap*, struct __trt__GetStreamUri *, const char*, const char*);

inline int soap_read___trt__GetStreamUri(struct soap *soap, struct __trt__GetStreamUri *p)
{
	if (p)
	{	::soap_default___trt__GetStreamUri(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetStreamUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetStreamUri(struct soap *soap, const char *URL, struct __trt__GetStreamUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetStreamUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetStreamUri(struct soap *soap, struct __trt__GetStreamUri *p)
{
	if (::soap_read___trt__GetStreamUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, int, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC3 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_in___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*);
SOAP_FMAC1 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_req___trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap)
{
	struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = ::soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	::soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p);
	}
	return _p;
}

inline struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * soap_new_set___trt__GetGuaranteedNumberOfVideoEncoderInstances(
	struct soap *soap,
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances)
{
	struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *_p = ::soap_new___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap);
	if (_p)
	{	::soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, _p);
		_p->trt__GetGuaranteedNumberOfVideoEncoderInstances = trt__GetGuaranteedNumberOfVideoEncoderInstances;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_write___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p), 0) || ::soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, "-trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p), 0) || ::soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, "-trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p), 0) || ::soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, "-trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p), 0) || ::soap_put___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, "-trt:GetGuaranteedNumberOfVideoEncoderInstances", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC4 soap_get___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *, const char*, const char*);

inline int soap_read___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (p)
	{	::soap_default___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, const char *URL, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, struct __trt__GetGuaranteedNumberOfVideoEncoderInstances *p)
{
	if (::soap_read___trt__GetGuaranteedNumberOfVideoEncoderInstances(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfigurationOptions(struct soap*, struct __trt__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfigurationOptions(struct soap*, const struct __trt__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new_req___trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfigurationOptions *_p = ::soap_new___trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfigurationOptions * soap_new_set___trt__GetAudioDecoderConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions)
{
	struct __trt__GetAudioDecoderConfigurationOptions *_p = ::soap_new___trt__GetAudioDecoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfigurationOptions(soap, _p);
		_p->trt__GetAudioDecoderConfigurationOptions = trt__GetAudioDecoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfigurationOptions(struct soap*, const struct __trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioDecoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurationOptions(soap, p, "-trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurationOptions(soap, p, "-trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurationOptions(soap, p, "-trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurationOptions(soap, p, "-trt:GetAudioDecoderConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfigurationOptions(struct soap*, struct __trt__GetAudioDecoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioDecoderConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetAudioDecoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioDecoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioDecoderConfigurationOptions *p)
{
	if (::soap_read___trt__GetAudioDecoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfigurationOptions(struct soap*, struct __trt__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfigurationOptions(struct soap*, const struct __trt__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new___trt__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new_req___trt__GetAudioOutputConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfigurationOptions *_p = ::soap_new___trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfigurationOptions * soap_new_set___trt__GetAudioOutputConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions)
{
	struct __trt__GetAudioOutputConfigurationOptions *_p = ::soap_new___trt__GetAudioOutputConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfigurationOptions(soap, _p);
		_p->trt__GetAudioOutputConfigurationOptions = trt__GetAudioOutputConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfigurationOptions(struct soap*, const struct __trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfigurationOptions(struct soap *soap, struct __trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioOutputConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurationOptions(soap, p, "-trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurationOptions(soap, p, "-trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurationOptions(soap, p, "-trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurationOptions(soap, p, "-trt:GetAudioOutputConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfigurationOptions(struct soap*, struct __trt__GetAudioOutputConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfigurationOptions(struct soap *soap, struct __trt__GetAudioOutputConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetAudioOutputConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioOutputConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioOutputConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioOutputConfigurationOptions(struct soap *soap, struct __trt__GetAudioOutputConfigurationOptions *p)
{
	if (::soap_read___trt__GetAudioOutputConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfigurationOptions(struct soap*, struct __trt__GetMetadataConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfigurationOptions(struct soap*, const struct __trt__GetMetadataConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetMetadataConfigurationOptions(struct soap*, const char*, struct __trt__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfigurationOptions * soap_new___trt__GetMetadataConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfigurationOptions * soap_new_req___trt__GetMetadataConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetMetadataConfigurationOptions *_p = ::soap_new___trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfigurationOptions * soap_new_set___trt__GetMetadataConfigurationOptions(
	struct soap *soap,
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions)
{
	struct __trt__GetMetadataConfigurationOptions *_p = ::soap_new___trt__GetMetadataConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfigurationOptions(soap, _p);
		_p->trt__GetMetadataConfigurationOptions = trt__GetMetadataConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfigurationOptions(struct soap*, const struct __trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfigurationOptions(struct soap *soap, struct __trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetMetadataConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurationOptions(soap, p, "-trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurationOptions(soap, p, "-trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurationOptions(soap, p, "-trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurationOptions(soap, p, "-trt:GetMetadataConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetMetadataConfigurationOptions(struct soap*, struct __trt__GetMetadataConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfigurationOptions(struct soap *soap, struct __trt__GetMetadataConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetMetadataConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetMetadataConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetMetadataConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetMetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetMetadataConfigurationOptions(struct soap *soap, struct __trt__GetMetadataConfigurationOptions *p)
{
	if (::soap_read___trt__GetMetadataConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfigurationOptions(struct soap*, struct __trt__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfigurationOptions(struct soap*, const struct __trt__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new_req___trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfigurationOptions *_p = ::soap_new___trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfigurationOptions * soap_new_set___trt__GetAudioEncoderConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions)
{
	struct __trt__GetAudioEncoderConfigurationOptions *_p = ::soap_new___trt__GetAudioEncoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfigurationOptions(soap, _p);
		_p->trt__GetAudioEncoderConfigurationOptions = trt__GetAudioEncoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfigurationOptions(struct soap*, const struct __trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurationOptions(soap, p, "-trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurationOptions(soap, p, "-trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurationOptions(soap, p, "-trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurationOptions(soap, p, "-trt:GetAudioEncoderConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfigurationOptions(struct soap*, struct __trt__GetAudioEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioEncoderConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetAudioEncoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __trt__GetAudioEncoderConfigurationOptions *p)
{
	if (::soap_read___trt__GetAudioEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfigurationOptions(struct soap*, struct __trt__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfigurationOptions(struct soap*, const struct __trt__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, struct __trt__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new___trt__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new_req___trt__GetAudioSourceConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfigurationOptions *_p = ::soap_new___trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfigurationOptions * soap_new_set___trt__GetAudioSourceConfigurationOptions(
	struct soap *soap,
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions)
{
	struct __trt__GetAudioSourceConfigurationOptions *_p = ::soap_new___trt__GetAudioSourceConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfigurationOptions(soap, _p);
		_p->trt__GetAudioSourceConfigurationOptions = trt__GetAudioSourceConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfigurationOptions(struct soap*, const struct __trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfigurationOptions(struct soap *soap, struct __trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurationOptions(soap, p, "-trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurationOptions(soap, p, "-trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurationOptions(soap, p, "-trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurationOptions(soap, p, "-trt:GetAudioSourceConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfigurationOptions(struct soap*, struct __trt__GetAudioSourceConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfigurationOptions(struct soap *soap, struct __trt__GetAudioSourceConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetAudioSourceConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioSourceConfigurationOptions(struct soap *soap, struct __trt__GetAudioSourceConfigurationOptions *p)
{
	if (::soap_read___trt__GetAudioSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfigurationOptions(struct soap*, struct __trt__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfigurationOptions(struct soap*, const struct __trt__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, struct __trt__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new_req___trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfigurationOptions *_p = ::soap_new___trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfigurationOptions * soap_new_set___trt__GetVideoEncoderConfigurationOptions(
	struct soap *soap,
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions)
{
	struct __trt__GetVideoEncoderConfigurationOptions *_p = ::soap_new___trt__GetVideoEncoderConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfigurationOptions(soap, _p);
		_p->trt__GetVideoEncoderConfigurationOptions = trt__GetVideoEncoderConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfigurationOptions(struct soap*, const struct __trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurationOptions(soap, p, "-trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurationOptions(soap, p, "-trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurationOptions(soap, p, "-trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurationOptions(soap, p, "-trt:GetVideoEncoderConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfigurationOptions(struct soap*, struct __trt__GetVideoEncoderConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __trt__GetVideoEncoderConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetVideoEncoderConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoEncoderConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __trt__GetVideoEncoderConfigurationOptions *p)
{
	if (::soap_read___trt__GetVideoEncoderConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfigurationOptions(struct soap*, struct __trt__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfigurationOptions(struct soap*, const struct __trt__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, struct __trt__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new___trt__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new_req___trt__GetVideoSourceConfigurationOptions(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfigurationOptions *_p = ::soap_new___trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfigurationOptions * soap_new_set___trt__GetVideoSourceConfigurationOptions(
	struct soap *soap,
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions)
{
	struct __trt__GetVideoSourceConfigurationOptions *_p = ::soap_new___trt__GetVideoSourceConfigurationOptions(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfigurationOptions(soap, _p);
		_p->trt__GetVideoSourceConfigurationOptions = trt__GetVideoSourceConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfigurationOptions(struct soap*, const struct __trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfigurationOptions(struct soap *soap, struct __trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurationOptions(soap, p, "-trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurationOptions(soap, p, "-trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurationOptions(soap, p, "-trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurationOptions(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurationOptions(soap, p, "-trt:GetVideoSourceConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfigurationOptions(struct soap*, struct __trt__GetVideoSourceConfigurationOptions *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfigurationOptions(struct soap *soap, struct __trt__GetVideoSourceConfigurationOptions *p)
{
	if (p)
	{	::soap_default___trt__GetVideoSourceConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoSourceConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoSourceConfigurationOptions(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoSourceConfigurationOptions(struct soap *soap, struct __trt__GetVideoSourceConfigurationOptions *p)
{
	if (::soap_read___trt__GetVideoSourceConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioDecoderConfiguration(struct soap*, struct __trt__SetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioDecoderConfiguration(struct soap*, const struct __trt__SetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioDecoderConfiguration(struct soap*, const char*, struct __trt__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioDecoderConfiguration * soap_new___trt__SetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioDecoderConfiguration * soap_new_req___trt__SetAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioDecoderConfiguration *_p = ::soap_new___trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioDecoderConfiguration * soap_new_set___trt__SetAudioDecoderConfiguration(
	struct soap *soap,
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration)
{
	struct __trt__SetAudioDecoderConfiguration *_p = ::soap_new___trt__SetAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioDecoderConfiguration(soap, _p);
		_p->trt__SetAudioDecoderConfiguration = trt__SetAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioDecoderConfiguration(struct soap*, const struct __trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioDecoderConfiguration(struct soap *soap, struct __trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioDecoderConfiguration(soap, p, "-trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioDecoderConfiguration(soap, p, "-trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioDecoderConfiguration(soap, p, "-trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioDecoderConfiguration(soap, p, "-trt:SetAudioDecoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioDecoderConfiguration(struct soap*, struct __trt__SetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioDecoderConfiguration(struct soap *soap, struct __trt__SetAudioDecoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetAudioDecoderConfiguration(struct soap *soap, struct __trt__SetAudioDecoderConfiguration *p)
{
	if (::soap_read___trt__SetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioOutputConfiguration(struct soap*, struct __trt__SetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioOutputConfiguration(struct soap*, const struct __trt__SetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioOutputConfiguration(struct soap*, const char*, struct __trt__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioOutputConfiguration * soap_new___trt__SetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioOutputConfiguration * soap_new_req___trt__SetAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioOutputConfiguration *_p = ::soap_new___trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioOutputConfiguration * soap_new_set___trt__SetAudioOutputConfiguration(
	struct soap *soap,
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration)
{
	struct __trt__SetAudioOutputConfiguration *_p = ::soap_new___trt__SetAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioOutputConfiguration(soap, _p);
		_p->trt__SetAudioOutputConfiguration = trt__SetAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioOutputConfiguration(struct soap*, const struct __trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioOutputConfiguration(struct soap *soap, struct __trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioOutputConfiguration(soap, p, "-trt:SetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioOutputConfiguration(soap, p, "-trt:SetAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioOutputConfiguration(soap, p, "-trt:SetAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioOutputConfiguration(soap, p, "-trt:SetAudioOutputConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioOutputConfiguration(struct soap*, struct __trt__SetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioOutputConfiguration(struct soap *soap, struct __trt__SetAudioOutputConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetAudioOutputConfiguration(struct soap *soap, struct __trt__SetAudioOutputConfiguration *p)
{
	if (::soap_read___trt__SetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetMetadataConfiguration(struct soap*, struct __trt__SetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetMetadataConfiguration(struct soap*, const struct __trt__SetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetMetadataConfiguration(struct soap*, const char*, int, const struct __trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetMetadataConfiguration * SOAP_FMAC4 soap_in___trt__SetMetadataConfiguration(struct soap*, const char*, struct __trt__SetMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetMetadataConfiguration * soap_new___trt__SetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetMetadataConfiguration * soap_new_req___trt__SetMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__SetMetadataConfiguration *_p = ::soap_new___trt__SetMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetMetadataConfiguration * soap_new_set___trt__SetMetadataConfiguration(
	struct soap *soap,
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration)
{
	struct __trt__SetMetadataConfiguration *_p = ::soap_new___trt__SetMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetMetadataConfiguration(soap, _p);
		_p->trt__SetMetadataConfiguration = trt__SetMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetMetadataConfiguration(struct soap*, const struct __trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__SetMetadataConfiguration(struct soap *soap, struct __trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__SetMetadataConfiguration(soap, p, "-trt:SetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__SetMetadataConfiguration(soap, p, "-trt:SetMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__SetMetadataConfiguration(soap, p, "-trt:SetMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__SetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__SetMetadataConfiguration(soap, p, "-trt:SetMetadataConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetMetadataConfiguration * SOAP_FMAC4 soap_get___trt__SetMetadataConfiguration(struct soap*, struct __trt__SetMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__SetMetadataConfiguration(struct soap *soap, struct __trt__SetMetadataConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__SetMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetMetadataConfiguration(struct soap *soap, struct __trt__SetMetadataConfiguration *p)
{
	if (::soap_read___trt__SetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoAnalyticsConfiguration(struct soap*, struct __trt__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoAnalyticsConfiguration(struct soap*, const struct __trt__SetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__SetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new___trt__SetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new_req___trt__SetVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoAnalyticsConfiguration *_p = ::soap_new___trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoAnalyticsConfiguration * soap_new_set___trt__SetVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration)
{
	struct __trt__SetVideoAnalyticsConfiguration *_p = ::soap_new___trt__SetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoAnalyticsConfiguration(soap, _p);
		_p->trt__SetVideoAnalyticsConfiguration = trt__SetVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoAnalyticsConfiguration(struct soap*, const struct __trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoAnalyticsConfiguration(soap, p, "-trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoAnalyticsConfiguration(soap, p, "-trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoAnalyticsConfiguration(soap, p, "-trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoAnalyticsConfiguration(soap, p, "-trt:SetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoAnalyticsConfiguration(struct soap*, struct __trt__SetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__SetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__SetVideoAnalyticsConfiguration *p)
{
	if (::soap_read___trt__SetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioEncoderConfiguration(struct soap*, struct __trt__SetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioEncoderConfiguration(struct soap*, const struct __trt__SetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioEncoderConfiguration(struct soap*, const char*, struct __trt__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioEncoderConfiguration * soap_new___trt__SetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioEncoderConfiguration * soap_new_req___trt__SetAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioEncoderConfiguration *_p = ::soap_new___trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioEncoderConfiguration * soap_new_set___trt__SetAudioEncoderConfiguration(
	struct soap *soap,
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration)
{
	struct __trt__SetAudioEncoderConfiguration *_p = ::soap_new___trt__SetAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioEncoderConfiguration(soap, _p);
		_p->trt__SetAudioEncoderConfiguration = trt__SetAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioEncoderConfiguration(struct soap*, const struct __trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioEncoderConfiguration(struct soap *soap, struct __trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioEncoderConfiguration(soap, p, "-trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioEncoderConfiguration(soap, p, "-trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioEncoderConfiguration(soap, p, "-trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioEncoderConfiguration(soap, p, "-trt:SetAudioEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioEncoderConfiguration(struct soap*, struct __trt__SetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioEncoderConfiguration(struct soap *soap, struct __trt__SetAudioEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetAudioEncoderConfiguration(struct soap *soap, struct __trt__SetAudioEncoderConfiguration *p)
{
	if (::soap_read___trt__SetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetAudioSourceConfiguration(struct soap*, struct __trt__SetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetAudioSourceConfiguration(struct soap*, const struct __trt__SetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__SetAudioSourceConfiguration(struct soap*, const char*, struct __trt__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetAudioSourceConfiguration * soap_new___trt__SetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetAudioSourceConfiguration * soap_new_req___trt__SetAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__SetAudioSourceConfiguration *_p = ::soap_new___trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetAudioSourceConfiguration * soap_new_set___trt__SetAudioSourceConfiguration(
	struct soap *soap,
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration)
{
	struct __trt__SetAudioSourceConfiguration *_p = ::soap_new___trt__SetAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetAudioSourceConfiguration(soap, _p);
		_p->trt__SetAudioSourceConfiguration = trt__SetAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetAudioSourceConfiguration(struct soap*, const struct __trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__SetAudioSourceConfiguration(struct soap *soap, struct __trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioSourceConfiguration(soap, p, "-trt:SetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioSourceConfiguration(soap, p, "-trt:SetAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioSourceConfiguration(soap, p, "-trt:SetAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetAudioSourceConfiguration(soap, p, "-trt:SetAudioSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__SetAudioSourceConfiguration(struct soap*, struct __trt__SetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__SetAudioSourceConfiguration(struct soap *soap, struct __trt__SetAudioSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetAudioSourceConfiguration(struct soap *soap, struct __trt__SetAudioSourceConfiguration *p)
{
	if (::soap_read___trt__SetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoEncoderConfiguration(struct soap*, struct __trt__SetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoEncoderConfiguration(struct soap*, const struct __trt__SetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoEncoderConfiguration(struct soap*, const char*, struct __trt__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoEncoderConfiguration * soap_new___trt__SetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoEncoderConfiguration * soap_new_req___trt__SetVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoEncoderConfiguration *_p = ::soap_new___trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoEncoderConfiguration * soap_new_set___trt__SetVideoEncoderConfiguration(
	struct soap *soap,
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration)
{
	struct __trt__SetVideoEncoderConfiguration *_p = ::soap_new___trt__SetVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoEncoderConfiguration(soap, _p);
		_p->trt__SetVideoEncoderConfiguration = trt__SetVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoEncoderConfiguration(struct soap*, const struct __trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoEncoderConfiguration(struct soap *soap, struct __trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoEncoderConfiguration(soap, p, "-trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoEncoderConfiguration(soap, p, "-trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoEncoderConfiguration(soap, p, "-trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoEncoderConfiguration(soap, p, "-trt:SetVideoEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoEncoderConfiguration(struct soap*, struct __trt__SetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoEncoderConfiguration(struct soap *soap, struct __trt__SetVideoEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetVideoEncoderConfiguration(struct soap *soap, struct __trt__SetVideoEncoderConfiguration *p)
{
	if (::soap_read___trt__SetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__SetVideoSourceConfiguration(struct soap*, struct __trt__SetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__SetVideoSourceConfiguration(struct soap*, const struct __trt__SetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__SetVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__SetVideoSourceConfiguration(struct soap*, const char*, struct __trt__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__SetVideoSourceConfiguration * soap_new___trt__SetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__SetVideoSourceConfiguration * soap_new_req___trt__SetVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__SetVideoSourceConfiguration *_p = ::soap_new___trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__SetVideoSourceConfiguration * soap_new_set___trt__SetVideoSourceConfiguration(
	struct soap *soap,
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration)
{
	struct __trt__SetVideoSourceConfiguration *_p = ::soap_new___trt__SetVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__SetVideoSourceConfiguration(soap, _p);
		_p->trt__SetVideoSourceConfiguration = trt__SetVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__SetVideoSourceConfiguration(struct soap*, const struct __trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__SetVideoSourceConfiguration(struct soap *soap, struct __trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__SetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoSourceConfiguration(soap, p, "-trt:SetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoSourceConfiguration(soap, p, "-trt:SetVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoSourceConfiguration(soap, p, "-trt:SetVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__SetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__SetVideoSourceConfiguration(soap, p, "-trt:SetVideoSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__SetVideoSourceConfiguration(struct soap*, struct __trt__SetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__SetVideoSourceConfiguration(struct soap *soap, struct __trt__SetVideoSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__SetVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__SetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__SetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__SetVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__SetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__SetVideoSourceConfiguration(struct soap *soap, struct __trt__SetVideoSourceConfiguration *p)
{
	if (::soap_read___trt__SetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new_req___trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioDecoderConfigurations *_p = ::soap_new___trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioDecoderConfigurations * soap_new_set___trt__GetCompatibleAudioDecoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations)
{
	struct __trt__GetCompatibleAudioDecoderConfigurations *_p = ::soap_new___trt__GetCompatibleAudioDecoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioDecoderConfigurations = trt__GetCompatibleAudioDecoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioDecoderConfigurations(soap, p, "-trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioDecoderConfigurations(soap, p, "-trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioDecoderConfigurations(soap, p, "-trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioDecoderConfigurations(soap, p, "-trt:GetCompatibleAudioDecoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleAudioDecoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioDecoderConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioOutputConfigurations(struct soap*, struct __trt__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __trt__GetCompatibleAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioOutputConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new_req___trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioOutputConfigurations *_p = ::soap_new___trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioOutputConfigurations * soap_new_set___trt__GetCompatibleAudioOutputConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations)
{
	struct __trt__GetCompatibleAudioOutputConfigurations *_p = ::soap_new___trt__GetCompatibleAudioOutputConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioOutputConfigurations = trt__GetCompatibleAudioOutputConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioOutputConfigurations(struct soap*, const struct __trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioOutputConfigurations(soap, p, "-trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioOutputConfigurations(soap, p, "-trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioOutputConfigurations(soap, p, "-trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioOutputConfigurations(soap, p, "-trt:GetCompatibleAudioOutputConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioOutputConfigurations(struct soap*, struct __trt__GetCompatibleAudioOutputConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleAudioOutputConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioOutputConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleMetadataConfigurations(struct soap*, struct __trt__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleMetadataConfigurations(struct soap*, const struct __trt__GetCompatibleMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, struct __trt__GetCompatibleMetadataConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new___trt__GetCompatibleMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new_req___trt__GetCompatibleMetadataConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleMetadataConfigurations *_p = ::soap_new___trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleMetadataConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleMetadataConfigurations * soap_new_set___trt__GetCompatibleMetadataConfigurations(
	struct soap *soap,
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations)
{
	struct __trt__GetCompatibleMetadataConfigurations *_p = ::soap_new___trt__GetCompatibleMetadataConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleMetadataConfigurations(soap, _p);
		_p->trt__GetCompatibleMetadataConfigurations = trt__GetCompatibleMetadataConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleMetadataConfigurations(struct soap*, const struct __trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleMetadataConfigurations(struct soap *soap, struct __trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleMetadataConfigurations(soap, p, "-trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleMetadataConfigurations(soap, p, "-trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleMetadataConfigurations(soap, p, "-trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleMetadataConfigurations(soap, p, "-trt:GetCompatibleMetadataConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleMetadataConfigurations(struct soap*, struct __trt__GetCompatibleMetadataConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleMetadataConfigurations(struct soap *soap, struct __trt__GetCompatibleMetadataConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleMetadataConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleMetadataConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleMetadataConfigurations(struct soap *soap, struct __trt__GetCompatibleMetadataConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_req___trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoAnalyticsConfigurations *_p = ::soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoAnalyticsConfigurations * soap_new_set___trt__GetCompatibleVideoAnalyticsConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations)
{
	struct __trt__GetCompatibleVideoAnalyticsConfigurations *_p = ::soap_new___trt__GetCompatibleVideoAnalyticsConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoAnalyticsConfigurations = trt__GetCompatibleVideoAnalyticsConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, "-trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, "-trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, "-trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, "-trt:GetCompatibleVideoAnalyticsConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, struct __trt__GetCompatibleVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoAnalyticsConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioSourceConfigurations(struct soap*, struct __trt__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __trt__GetCompatibleAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new_req___trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioSourceConfigurations *_p = ::soap_new___trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioSourceConfigurations * soap_new_set___trt__GetCompatibleAudioSourceConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations)
{
	struct __trt__GetCompatibleAudioSourceConfigurations *_p = ::soap_new___trt__GetCompatibleAudioSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioSourceConfigurations = trt__GetCompatibleAudioSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioSourceConfigurations(struct soap*, const struct __trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioSourceConfigurations(soap, p, "-trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioSourceConfigurations(soap, p, "-trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioSourceConfigurations(soap, p, "-trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioSourceConfigurations(soap, p, "-trt:GetCompatibleAudioSourceConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioSourceConfigurations(struct soap*, struct __trt__GetCompatibleAudioSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleAudioSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioSourceConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new_req___trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleAudioEncoderConfigurations *_p = ::soap_new___trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleAudioEncoderConfigurations * soap_new_set___trt__GetCompatibleAudioEncoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations)
{
	struct __trt__GetCompatibleAudioEncoderConfigurations *_p = ::soap_new___trt__GetCompatibleAudioEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, _p);
		_p->trt__GetCompatibleAudioEncoderConfigurations = trt__GetCompatibleAudioEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioEncoderConfigurations(soap, p, "-trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioEncoderConfigurations(soap, p, "-trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioEncoderConfigurations(soap, p, "-trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleAudioEncoderConfigurations(soap, p, "-trt:GetCompatibleAudioEncoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, struct __trt__GetCompatibleAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleAudioEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleAudioEncoderConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoSourceConfigurations(struct soap*, struct __trt__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __trt__GetCompatibleVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new_req___trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoSourceConfigurations *_p = ::soap_new___trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoSourceConfigurations * soap_new_set___trt__GetCompatibleVideoSourceConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations)
{
	struct __trt__GetCompatibleVideoSourceConfigurations *_p = ::soap_new___trt__GetCompatibleVideoSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoSourceConfigurations = trt__GetCompatibleVideoSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoSourceConfigurations(struct soap*, const struct __trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoSourceConfigurations(soap, p, "-trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoSourceConfigurations(soap, p, "-trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoSourceConfigurations(soap, p, "-trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoSourceConfigurations(soap, p, "-trt:GetCompatibleVideoSourceConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoSourceConfigurations(struct soap*, struct __trt__GetCompatibleVideoSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleVideoSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoSourceConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __trt__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new_req___trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetCompatibleVideoEncoderConfigurations *_p = ::soap_new___trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetCompatibleVideoEncoderConfigurations * soap_new_set___trt__GetCompatibleVideoEncoderConfigurations(
	struct soap *soap,
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations)
{
	struct __trt__GetCompatibleVideoEncoderConfigurations *_p = ::soap_new___trt__GetCompatibleVideoEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, _p);
		_p->trt__GetCompatibleVideoEncoderConfigurations = trt__GetCompatibleVideoEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoEncoderConfigurations(soap, p, "-trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoEncoderConfigurations(soap, p, "-trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoEncoderConfigurations(soap, p, "-trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetCompatibleVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetCompatibleVideoEncoderConfigurations(soap, p, "-trt:GetCompatibleVideoEncoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, struct __trt__GetCompatibleVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetCompatibleVideoEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetCompatibleVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetCompatibleVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, struct __trt__GetCompatibleVideoEncoderConfigurations *p)
{
	if (::soap_read___trt__GetCompatibleVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfiguration(struct soap*, struct __trt__GetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfiguration(struct soap*, const struct __trt__GetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfiguration(struct soap*, const char*, struct __trt__GetAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfiguration * soap_new___trt__GetAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfiguration * soap_new_req___trt__GetAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfiguration *_p = ::soap_new___trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfiguration * soap_new_set___trt__GetAudioDecoderConfiguration(
	struct soap *soap,
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration)
{
	struct __trt__GetAudioDecoderConfiguration *_p = ::soap_new___trt__GetAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfiguration(soap, _p);
		_p->trt__GetAudioDecoderConfiguration = trt__GetAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfiguration(struct soap*, const struct __trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfiguration(struct soap *soap, struct __trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfiguration(soap, p, "-trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfiguration(soap, p, "-trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfiguration(soap, p, "-trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfiguration(soap, p, "-trt:GetAudioDecoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfiguration(struct soap*, struct __trt__GetAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfiguration(struct soap *soap, struct __trt__GetAudioDecoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioDecoderConfiguration(struct soap *soap, struct __trt__GetAudioDecoderConfiguration *p)
{
	if (::soap_read___trt__GetAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfiguration(struct soap*, struct __trt__GetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfiguration(struct soap*, const struct __trt__GetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfiguration(struct soap*, const char*, struct __trt__GetAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfiguration * soap_new___trt__GetAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfiguration * soap_new_req___trt__GetAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfiguration *_p = ::soap_new___trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfiguration * soap_new_set___trt__GetAudioOutputConfiguration(
	struct soap *soap,
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration)
{
	struct __trt__GetAudioOutputConfiguration *_p = ::soap_new___trt__GetAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfiguration(soap, _p);
		_p->trt__GetAudioOutputConfiguration = trt__GetAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfiguration(struct soap*, const struct __trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfiguration(struct soap *soap, struct __trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfiguration(soap, p, "-trt:GetAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfiguration(soap, p, "-trt:GetAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfiguration(soap, p, "-trt:GetAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfiguration(soap, p, "-trt:GetAudioOutputConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfiguration(struct soap*, struct __trt__GetAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfiguration(struct soap *soap, struct __trt__GetAudioOutputConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioOutputConfiguration(struct soap *soap, struct __trt__GetAudioOutputConfiguration *p)
{
	if (::soap_read___trt__GetAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfiguration(struct soap*, struct __trt__GetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfiguration(struct soap*, const struct __trt__GetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfiguration(struct soap*, const char*, int, const struct __trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfiguration * SOAP_FMAC4 soap_in___trt__GetMetadataConfiguration(struct soap*, const char*, struct __trt__GetMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfiguration * soap_new___trt__GetMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfiguration * soap_new_req___trt__GetMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__GetMetadataConfiguration *_p = ::soap_new___trt__GetMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfiguration * soap_new_set___trt__GetMetadataConfiguration(
	struct soap *soap,
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration)
{
	struct __trt__GetMetadataConfiguration *_p = ::soap_new___trt__GetMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfiguration(soap, _p);
		_p->trt__GetMetadataConfiguration = trt__GetMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfiguration(struct soap*, const struct __trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfiguration(struct soap *soap, struct __trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__GetMetadataConfiguration(soap, p, "-trt:GetMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__GetMetadataConfiguration(soap, p, "-trt:GetMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__GetMetadataConfiguration(soap, p, "-trt:GetMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__GetMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfiguration(soap, p), 0) || ::soap_put___trt__GetMetadataConfiguration(soap, p, "-trt:GetMetadataConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfiguration * SOAP_FMAC4 soap_get___trt__GetMetadataConfiguration(struct soap*, struct __trt__GetMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfiguration(struct soap *soap, struct __trt__GetMetadataConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__GetMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetMetadataConfiguration(struct soap *soap, struct __trt__GetMetadataConfiguration *p)
{
	if (::soap_read___trt__GetMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoAnalyticsConfiguration(struct soap*, struct __trt__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoAnalyticsConfiguration(struct soap*, const struct __trt__GetVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__GetVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new___trt__GetVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new_req___trt__GetVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoAnalyticsConfiguration *_p = ::soap_new___trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoAnalyticsConfiguration * soap_new_set___trt__GetVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration)
{
	struct __trt__GetVideoAnalyticsConfiguration *_p = ::soap_new___trt__GetVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoAnalyticsConfiguration(soap, _p);
		_p->trt__GetVideoAnalyticsConfiguration = trt__GetVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoAnalyticsConfiguration(struct soap*, const struct __trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfiguration(soap, p, "-trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfiguration(soap, p, "-trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfiguration(soap, p, "-trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfiguration(soap, p, "-trt:GetVideoAnalyticsConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoAnalyticsConfiguration(struct soap*, struct __trt__GetVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__GetVideoAnalyticsConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoAnalyticsConfiguration(struct soap *soap, struct __trt__GetVideoAnalyticsConfiguration *p)
{
	if (::soap_read___trt__GetVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfiguration(struct soap*, struct __trt__GetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfiguration(struct soap*, const struct __trt__GetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfiguration(struct soap*, const char*, struct __trt__GetAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfiguration * soap_new___trt__GetAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfiguration * soap_new_req___trt__GetAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfiguration *_p = ::soap_new___trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfiguration * soap_new_set___trt__GetAudioEncoderConfiguration(
	struct soap *soap,
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration)
{
	struct __trt__GetAudioEncoderConfiguration *_p = ::soap_new___trt__GetAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfiguration(soap, _p);
		_p->trt__GetAudioEncoderConfiguration = trt__GetAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfiguration(struct soap*, const struct __trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfiguration(struct soap *soap, struct __trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfiguration(soap, p, "-trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfiguration(soap, p, "-trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfiguration(soap, p, "-trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfiguration(soap, p, "-trt:GetAudioEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfiguration(struct soap*, struct __trt__GetAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfiguration(struct soap *soap, struct __trt__GetAudioEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioEncoderConfiguration(struct soap *soap, struct __trt__GetAudioEncoderConfiguration *p)
{
	if (::soap_read___trt__GetAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfiguration(struct soap*, struct __trt__GetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfiguration(struct soap*, const struct __trt__GetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfiguration(struct soap*, const char*, struct __trt__GetAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfiguration * soap_new___trt__GetAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfiguration * soap_new_req___trt__GetAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfiguration *_p = ::soap_new___trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfiguration * soap_new_set___trt__GetAudioSourceConfiguration(
	struct soap *soap,
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration)
{
	struct __trt__GetAudioSourceConfiguration *_p = ::soap_new___trt__GetAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfiguration(soap, _p);
		_p->trt__GetAudioSourceConfiguration = trt__GetAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfiguration(struct soap*, const struct __trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfiguration(struct soap *soap, struct __trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfiguration(soap, p, "-trt:GetAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfiguration(soap, p, "-trt:GetAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfiguration(soap, p, "-trt:GetAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfiguration(soap, p, "-trt:GetAudioSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfiguration(struct soap*, struct __trt__GetAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfiguration(struct soap *soap, struct __trt__GetAudioSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioSourceConfiguration(struct soap *soap, struct __trt__GetAudioSourceConfiguration *p)
{
	if (::soap_read___trt__GetAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfiguration(struct soap*, struct __trt__GetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfiguration(struct soap*, const struct __trt__GetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfiguration(struct soap*, const char*, struct __trt__GetVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfiguration * soap_new___trt__GetVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfiguration * soap_new_req___trt__GetVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfiguration *_p = ::soap_new___trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfiguration * soap_new_set___trt__GetVideoEncoderConfiguration(
	struct soap *soap,
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration)
{
	struct __trt__GetVideoEncoderConfiguration *_p = ::soap_new___trt__GetVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfiguration(soap, _p);
		_p->trt__GetVideoEncoderConfiguration = trt__GetVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfiguration(struct soap*, const struct __trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfiguration(struct soap *soap, struct __trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfiguration(soap, p, "-trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfiguration(soap, p, "-trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfiguration(soap, p, "-trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfiguration(soap, p, "-trt:GetVideoEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfiguration(struct soap*, struct __trt__GetVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfiguration(struct soap *soap, struct __trt__GetVideoEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoEncoderConfiguration(struct soap *soap, struct __trt__GetVideoEncoderConfiguration *p)
{
	if (::soap_read___trt__GetVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfiguration(struct soap*, struct __trt__GetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfiguration(struct soap*, const struct __trt__GetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfiguration(struct soap*, const char*, struct __trt__GetVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfiguration * soap_new___trt__GetVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfiguration * soap_new_req___trt__GetVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfiguration *_p = ::soap_new___trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfiguration * soap_new_set___trt__GetVideoSourceConfiguration(
	struct soap *soap,
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration)
{
	struct __trt__GetVideoSourceConfiguration *_p = ::soap_new___trt__GetVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfiguration(soap, _p);
		_p->trt__GetVideoSourceConfiguration = trt__GetVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfiguration(struct soap*, const struct __trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfiguration(struct soap *soap, struct __trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfiguration(soap, p, "-trt:GetVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfiguration(soap, p, "-trt:GetVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfiguration(soap, p, "-trt:GetVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfiguration(soap, p, "-trt:GetVideoSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfiguration(struct soap*, struct __trt__GetVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfiguration(struct soap *soap, struct __trt__GetVideoSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__GetVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoSourceConfiguration(struct soap *soap, struct __trt__GetVideoSourceConfiguration *p)
{
	if (::soap_read___trt__GetVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioDecoderConfigurations(struct soap*, struct __trt__GetAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioDecoderConfigurations(struct soap*, const struct __trt__GetAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioDecoderConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioDecoderConfigurations(struct soap*, const char*, struct __trt__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioDecoderConfigurations * soap_new___trt__GetAudioDecoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioDecoderConfigurations * soap_new_req___trt__GetAudioDecoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioDecoderConfigurations *_p = ::soap_new___trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioDecoderConfigurations * soap_new_set___trt__GetAudioDecoderConfigurations(
	struct soap *soap,
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations)
{
	struct __trt__GetAudioDecoderConfigurations *_p = ::soap_new___trt__GetAudioDecoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioDecoderConfigurations(soap, _p);
		_p->trt__GetAudioDecoderConfigurations = trt__GetAudioDecoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioDecoderConfigurations(struct soap*, const struct __trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioDecoderConfigurations(struct soap *soap, struct __trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurations(soap, p, "-trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurations(soap, p, "-trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurations(soap, p, "-trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioDecoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioDecoderConfigurations(soap, p, "-trt:GetAudioDecoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioDecoderConfigurations(struct soap*, struct __trt__GetAudioDecoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioDecoderConfigurations(struct soap *soap, struct __trt__GetAudioDecoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetAudioDecoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioDecoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioDecoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioDecoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioDecoderConfigurations(struct soap *soap, struct __trt__GetAudioDecoderConfigurations *p)
{
	if (::soap_read___trt__GetAudioDecoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputConfigurations(struct soap*, struct __trt__GetAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputConfigurations(struct soap*, const struct __trt__GetAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioOutputConfigurations(struct soap*, const char*, struct __trt__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputConfigurations * soap_new___trt__GetAudioOutputConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputConfigurations * soap_new_req___trt__GetAudioOutputConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioOutputConfigurations *_p = ::soap_new___trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputConfigurations * soap_new_set___trt__GetAudioOutputConfigurations(
	struct soap *soap,
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations)
{
	struct __trt__GetAudioOutputConfigurations *_p = ::soap_new___trt__GetAudioOutputConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputConfigurations(soap, _p);
		_p->trt__GetAudioOutputConfigurations = trt__GetAudioOutputConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputConfigurations(struct soap*, const struct __trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputConfigurations(struct soap *soap, struct __trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurations(soap, p, "-trt:GetAudioOutputConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurations(soap, p, "-trt:GetAudioOutputConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurations(soap, p, "-trt:GetAudioOutputConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioOutputConfigurations(soap, p, "-trt:GetAudioOutputConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioOutputConfigurations(struct soap*, struct __trt__GetAudioOutputConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputConfigurations(struct soap *soap, struct __trt__GetAudioOutputConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetAudioOutputConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioOutputConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioOutputConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioOutputConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioOutputConfigurations(struct soap *soap, struct __trt__GetAudioOutputConfigurations *p)
{
	if (::soap_read___trt__GetAudioOutputConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE___trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetMetadataConfigurations(struct soap*, struct __trt__GetMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetMetadataConfigurations(struct soap*, const struct __trt__GetMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetMetadataConfigurations(struct soap*, const char*, int, const struct __trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetMetadataConfigurations * SOAP_FMAC4 soap_in___trt__GetMetadataConfigurations(struct soap*, const char*, struct __trt__GetMetadataConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetMetadataConfigurations * soap_new___trt__GetMetadataConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetMetadataConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetMetadataConfigurations * soap_new_req___trt__GetMetadataConfigurations(
	struct soap *soap)
{
	struct __trt__GetMetadataConfigurations *_p = ::soap_new___trt__GetMetadataConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetMetadataConfigurations * soap_new_set___trt__GetMetadataConfigurations(
	struct soap *soap,
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations)
{
	struct __trt__GetMetadataConfigurations *_p = ::soap_new___trt__GetMetadataConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetMetadataConfigurations(soap, _p);
		_p->trt__GetMetadataConfigurations = trt__GetMetadataConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetMetadataConfigurations(struct soap*, const struct __trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_write___trt__GetMetadataConfigurations(struct soap *soap, struct __trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurations(soap, p, "-trt:GetMetadataConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurations(soap, p, "-trt:GetMetadataConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurations(soap, p, "-trt:GetMetadataConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetMetadataConfigurations(soap, p), 0) || ::soap_put___trt__GetMetadataConfigurations(soap, p, "-trt:GetMetadataConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetMetadataConfigurations * SOAP_FMAC4 soap_get___trt__GetMetadataConfigurations(struct soap*, struct __trt__GetMetadataConfigurations *, const char*, const char*);

inline int soap_read___trt__GetMetadataConfigurations(struct soap *soap, struct __trt__GetMetadataConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetMetadataConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetMetadataConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetMetadataConfigurations(struct soap *soap, const char *URL, struct __trt__GetMetadataConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetMetadataConfigurations(struct soap *soap, struct __trt__GetMetadataConfigurations *p)
{
	if (::soap_read___trt__GetMetadataConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoAnalyticsConfigurations(struct soap*, struct __trt__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetVideoAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, struct __trt__GetVideoAnalyticsConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new___trt__GetVideoAnalyticsConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoAnalyticsConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new_req___trt__GetVideoAnalyticsConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoAnalyticsConfigurations *_p = ::soap_new___trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoAnalyticsConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoAnalyticsConfigurations * soap_new_set___trt__GetVideoAnalyticsConfigurations(
	struct soap *soap,
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations)
{
	struct __trt__GetVideoAnalyticsConfigurations *_p = ::soap_new___trt__GetVideoAnalyticsConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoAnalyticsConfigurations(soap, _p);
		_p->trt__GetVideoAnalyticsConfigurations = trt__GetVideoAnalyticsConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoAnalyticsConfigurations(struct soap*, const struct __trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfigurations(soap, p, "-trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfigurations(soap, p, "-trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfigurations(soap, p, "-trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoAnalyticsConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoAnalyticsConfigurations(soap, p, "-trt:GetVideoAnalyticsConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoAnalyticsConfigurations(struct soap*, struct __trt__GetVideoAnalyticsConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetVideoAnalyticsConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetVideoAnalyticsConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoAnalyticsConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoAnalyticsConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoAnalyticsConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoAnalyticsConfigurations(struct soap *soap, struct __trt__GetVideoAnalyticsConfigurations *p)
{
	if (::soap_read___trt__GetVideoAnalyticsConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioEncoderConfigurations(struct soap*, struct __trt__GetAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioEncoderConfigurations(struct soap*, const struct __trt__GetAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioEncoderConfigurations(struct soap*, const char*, struct __trt__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioEncoderConfigurations * soap_new___trt__GetAudioEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioEncoderConfigurations * soap_new_req___trt__GetAudioEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioEncoderConfigurations *_p = ::soap_new___trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioEncoderConfigurations * soap_new_set___trt__GetAudioEncoderConfigurations(
	struct soap *soap,
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations)
{
	struct __trt__GetAudioEncoderConfigurations *_p = ::soap_new___trt__GetAudioEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioEncoderConfigurations(soap, _p);
		_p->trt__GetAudioEncoderConfigurations = trt__GetAudioEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioEncoderConfigurations(struct soap*, const struct __trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioEncoderConfigurations(struct soap *soap, struct __trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurations(soap, p, "-trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurations(soap, p, "-trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurations(soap, p, "-trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioEncoderConfigurations(soap, p, "-trt:GetAudioEncoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioEncoderConfigurations(struct soap*, struct __trt__GetAudioEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioEncoderConfigurations(struct soap *soap, struct __trt__GetAudioEncoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetAudioEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioEncoderConfigurations(struct soap *soap, struct __trt__GetAudioEncoderConfigurations *p)
{
	if (::soap_read___trt__GetAudioEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSourceConfigurations(struct soap*, struct __trt__GetAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSourceConfigurations(struct soap*, const struct __trt__GetAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetAudioSourceConfigurations(struct soap*, const char*, struct __trt__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSourceConfigurations * soap_new___trt__GetAudioSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSourceConfigurations * soap_new_req___trt__GetAudioSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetAudioSourceConfigurations *_p = ::soap_new___trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSourceConfigurations * soap_new_set___trt__GetAudioSourceConfigurations(
	struct soap *soap,
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations)
{
	struct __trt__GetAudioSourceConfigurations *_p = ::soap_new___trt__GetAudioSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSourceConfigurations(soap, _p);
		_p->trt__GetAudioSourceConfigurations = trt__GetAudioSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSourceConfigurations(struct soap*, const struct __trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetAudioSourceConfigurations(struct soap *soap, struct __trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurations(soap, p, "-trt:GetAudioSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurations(soap, p, "-trt:GetAudioSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurations(soap, p, "-trt:GetAudioSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetAudioSourceConfigurations(soap, p, "-trt:GetAudioSourceConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetAudioSourceConfigurations(struct soap*, struct __trt__GetAudioSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetAudioSourceConfigurations(struct soap *soap, struct __trt__GetAudioSourceConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetAudioSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetAudioSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioSourceConfigurations(struct soap *soap, struct __trt__GetAudioSourceConfigurations *p)
{
	if (::soap_read___trt__GetAudioSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoEncoderConfigurations(struct soap*, struct __trt__GetVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoEncoderConfigurations(struct soap*, const struct __trt__GetVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoEncoderConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoEncoderConfigurations(struct soap*, const char*, struct __trt__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoEncoderConfigurations * soap_new___trt__GetVideoEncoderConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoEncoderConfigurations * soap_new_req___trt__GetVideoEncoderConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoEncoderConfigurations *_p = ::soap_new___trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoEncoderConfigurations * soap_new_set___trt__GetVideoEncoderConfigurations(
	struct soap *soap,
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations)
{
	struct __trt__GetVideoEncoderConfigurations *_p = ::soap_new___trt__GetVideoEncoderConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoEncoderConfigurations(soap, _p);
		_p->trt__GetVideoEncoderConfigurations = trt__GetVideoEncoderConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoEncoderConfigurations(struct soap*, const struct __trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoEncoderConfigurations(struct soap *soap, struct __trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurations(soap, p, "-trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurations(soap, p, "-trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurations(soap, p, "-trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoEncoderConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoEncoderConfigurations(soap, p, "-trt:GetVideoEncoderConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoEncoderConfigurations(struct soap*, struct __trt__GetVideoEncoderConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoEncoderConfigurations(struct soap *soap, struct __trt__GetVideoEncoderConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetVideoEncoderConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoEncoderConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoEncoderConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoEncoderConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoEncoderConfigurations(struct soap *soap, struct __trt__GetVideoEncoderConfigurations *p)
{
	if (::soap_read___trt__GetVideoEncoderConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE___trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSourceConfigurations(struct soap*, struct __trt__GetVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSourceConfigurations(struct soap*, const struct __trt__GetVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSourceConfigurations(struct soap*, const char*, int, const struct __trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in___trt__GetVideoSourceConfigurations(struct soap*, const char*, struct __trt__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSourceConfigurations * soap_new___trt__GetVideoSourceConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSourceConfigurations * soap_new_req___trt__GetVideoSourceConfigurations(
	struct soap *soap)
{
	struct __trt__GetVideoSourceConfigurations *_p = ::soap_new___trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfigurations(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSourceConfigurations * soap_new_set___trt__GetVideoSourceConfigurations(
	struct soap *soap,
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations)
{
	struct __trt__GetVideoSourceConfigurations *_p = ::soap_new___trt__GetVideoSourceConfigurations(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSourceConfigurations(soap, _p);
		_p->trt__GetVideoSourceConfigurations = trt__GetVideoSourceConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSourceConfigurations(struct soap*, const struct __trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_write___trt__GetVideoSourceConfigurations(struct soap *soap, struct __trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurations(soap, p, "-trt:GetVideoSourceConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurations(soap, p, "-trt:GetVideoSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurations(soap, p, "-trt:GetVideoSourceConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSourceConfigurations(soap, p), 0) || ::soap_put___trt__GetVideoSourceConfigurations(soap, p, "-trt:GetVideoSourceConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get___trt__GetVideoSourceConfigurations(struct soap*, struct __trt__GetVideoSourceConfigurations *, const char*, const char*);

inline int soap_read___trt__GetVideoSourceConfigurations(struct soap *soap, struct __trt__GetVideoSourceConfigurations *p)
{
	if (p)
	{	::soap_default___trt__GetVideoSourceConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoSourceConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoSourceConfigurations(struct soap *soap, const char *URL, struct __trt__GetVideoSourceConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoSourceConfigurations(struct soap *soap, struct __trt__GetVideoSourceConfigurations *p)
{
	if (::soap_read___trt__GetVideoSourceConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile_DEFINED
#define SOAP_TYPE___trt__DeleteProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__DeleteProfile(struct soap*, struct __trt__DeleteProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__DeleteProfile(struct soap*, const struct __trt__DeleteProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__DeleteProfile(struct soap*, const char*, int, const struct __trt__DeleteProfile *, const char*);
SOAP_FMAC3 struct __trt__DeleteProfile * SOAP_FMAC4 soap_in___trt__DeleteProfile(struct soap*, const char*, struct __trt__DeleteProfile *, const char*);
SOAP_FMAC1 struct __trt__DeleteProfile * SOAP_FMAC2 soap_instantiate___trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__DeleteProfile * soap_new___trt__DeleteProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__DeleteProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__DeleteProfile * soap_new_req___trt__DeleteProfile(
	struct soap *soap)
{
	struct __trt__DeleteProfile *_p = ::soap_new___trt__DeleteProfile(soap);
	if (_p)
	{	::soap_default___trt__DeleteProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__DeleteProfile * soap_new_set___trt__DeleteProfile(
	struct soap *soap,
	_trt__DeleteProfile *trt__DeleteProfile)
{
	struct __trt__DeleteProfile *_p = ::soap_new___trt__DeleteProfile(soap);
	if (_p)
	{	::soap_default___trt__DeleteProfile(soap, _p);
		_p->trt__DeleteProfile = trt__DeleteProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__DeleteProfile(struct soap*, const struct __trt__DeleteProfile *, const char*, const char*);

inline int soap_write___trt__DeleteProfile(struct soap *soap, struct __trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__DeleteProfile(soap, p), 0) || ::soap_put___trt__DeleteProfile(soap, p, "-trt:DeleteProfile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__DeleteProfile(struct soap *soap, const char *URL, struct __trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteProfile(soap, p), 0) || ::soap_put___trt__DeleteProfile(soap, p, "-trt:DeleteProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__DeleteProfile(struct soap *soap, const char *URL, struct __trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteProfile(soap, p), 0) || ::soap_put___trt__DeleteProfile(soap, p, "-trt:DeleteProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__DeleteProfile(struct soap *soap, const char *URL, struct __trt__DeleteProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__DeleteProfile(soap, p), 0) || ::soap_put___trt__DeleteProfile(soap, p, "-trt:DeleteProfile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__DeleteProfile * SOAP_FMAC4 soap_get___trt__DeleteProfile(struct soap*, struct __trt__DeleteProfile *, const char*, const char*);

inline int soap_read___trt__DeleteProfile(struct soap *soap, struct __trt__DeleteProfile *p)
{
	if (p)
	{	::soap_default___trt__DeleteProfile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__DeleteProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__DeleteProfile(struct soap *soap, const char *URL, struct __trt__DeleteProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__DeleteProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__DeleteProfile(struct soap *soap, struct __trt__DeleteProfile *p)
{
	if (::soap_read___trt__DeleteProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioDecoderConfiguration(struct soap*, struct __trt__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioDecoderConfiguration(struct soap*, const struct __trt__RemoveAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, struct __trt__RemoveAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new___trt__RemoveAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new_req___trt__RemoveAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioDecoderConfiguration *_p = ::soap_new___trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioDecoderConfiguration * soap_new_set___trt__RemoveAudioDecoderConfiguration(
	struct soap *soap,
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration)
{
	struct __trt__RemoveAudioDecoderConfiguration *_p = ::soap_new___trt__RemoveAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioDecoderConfiguration(soap, _p);
		_p->trt__RemoveAudioDecoderConfiguration = trt__RemoveAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioDecoderConfiguration(struct soap*, const struct __trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioDecoderConfiguration(struct soap *soap, struct __trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioDecoderConfiguration(soap, p, "-trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioDecoderConfiguration(soap, p, "-trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioDecoderConfiguration(soap, p, "-trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioDecoderConfiguration(soap, p, "-trt:RemoveAudioDecoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioDecoderConfiguration(struct soap*, struct __trt__RemoveAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioDecoderConfiguration(struct soap *soap, struct __trt__RemoveAudioDecoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveAudioDecoderConfiguration(struct soap *soap, struct __trt__RemoveAudioDecoderConfiguration *p)
{
	if (::soap_read___trt__RemoveAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioOutputConfiguration(struct soap*, struct __trt__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioOutputConfiguration(struct soap*, const struct __trt__RemoveAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioOutputConfiguration(struct soap*, const char*, struct __trt__RemoveAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioOutputConfiguration * soap_new___trt__RemoveAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioOutputConfiguration * soap_new_req___trt__RemoveAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioOutputConfiguration *_p = ::soap_new___trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioOutputConfiguration * soap_new_set___trt__RemoveAudioOutputConfiguration(
	struct soap *soap,
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration)
{
	struct __trt__RemoveAudioOutputConfiguration *_p = ::soap_new___trt__RemoveAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioOutputConfiguration(soap, _p);
		_p->trt__RemoveAudioOutputConfiguration = trt__RemoveAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioOutputConfiguration(struct soap*, const struct __trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioOutputConfiguration(struct soap *soap, struct __trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioOutputConfiguration(soap, p, "-trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioOutputConfiguration(soap, p, "-trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioOutputConfiguration(soap, p, "-trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioOutputConfiguration(soap, p, "-trt:RemoveAudioOutputConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioOutputConfiguration(struct soap*, struct __trt__RemoveAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioOutputConfiguration(struct soap *soap, struct __trt__RemoveAudioOutputConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveAudioOutputConfiguration(struct soap *soap, struct __trt__RemoveAudioOutputConfiguration *p)
{
	if (::soap_read___trt__RemoveAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveMetadataConfiguration(struct soap*, struct __trt__RemoveMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveMetadataConfiguration(struct soap*, const struct __trt__RemoveMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveMetadataConfiguration(struct soap*, const char*, int, const struct __trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_in___trt__RemoveMetadataConfiguration(struct soap*, const char*, struct __trt__RemoveMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveMetadataConfiguration * soap_new___trt__RemoveMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveMetadataConfiguration * soap_new_req___trt__RemoveMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveMetadataConfiguration *_p = ::soap_new___trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveMetadataConfiguration * soap_new_set___trt__RemoveMetadataConfiguration(
	struct soap *soap,
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration)
{
	struct __trt__RemoveMetadataConfiguration *_p = ::soap_new___trt__RemoveMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveMetadataConfiguration(soap, _p);
		_p->trt__RemoveMetadataConfiguration = trt__RemoveMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveMetadataConfiguration(struct soap*, const struct __trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveMetadataConfiguration(struct soap *soap, struct __trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveMetadataConfiguration(soap, p), 0) || ::soap_put___trt__RemoveMetadataConfiguration(soap, p, "-trt:RemoveMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveMetadataConfiguration(soap, p), 0) || ::soap_put___trt__RemoveMetadataConfiguration(soap, p, "-trt:RemoveMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveMetadataConfiguration(soap, p), 0) || ::soap_put___trt__RemoveMetadataConfiguration(soap, p, "-trt:RemoveMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveMetadataConfiguration(soap, p), 0) || ::soap_put___trt__RemoveMetadataConfiguration(soap, p, "-trt:RemoveMetadataConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveMetadataConfiguration * SOAP_FMAC4 soap_get___trt__RemoveMetadataConfiguration(struct soap*, struct __trt__RemoveMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveMetadataConfiguration(struct soap *soap, struct __trt__RemoveMetadataConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveMetadataConfiguration(struct soap *soap, struct __trt__RemoveMetadataConfiguration *p)
{
	if (::soap_read___trt__RemoveMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoAnalyticsConfiguration(struct soap*, struct __trt__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __trt__RemoveVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__RemoveVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new_req___trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoAnalyticsConfiguration *_p = ::soap_new___trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoAnalyticsConfiguration * soap_new_set___trt__RemoveVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration)
{
	struct __trt__RemoveVideoAnalyticsConfiguration *_p = ::soap_new___trt__RemoveVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, _p);
		_p->trt__RemoveVideoAnalyticsConfiguration = trt__RemoveVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoAnalyticsConfiguration(struct soap*, const struct __trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoAnalyticsConfiguration(soap, p, "-trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoAnalyticsConfiguration(soap, p, "-trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoAnalyticsConfiguration(soap, p, "-trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoAnalyticsConfiguration(soap, p, "-trt:RemoveVideoAnalyticsConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoAnalyticsConfiguration(struct soap*, struct __trt__RemoveVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, struct __trt__RemoveVideoAnalyticsConfiguration *p)
{
	if (::soap_read___trt__RemoveVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE___trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemovePTZConfiguration(struct soap*, struct __trt__RemovePTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemovePTZConfiguration(struct soap*, const struct __trt__RemovePTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemovePTZConfiguration(struct soap*, const char*, int, const struct __trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemovePTZConfiguration * SOAP_FMAC4 soap_in___trt__RemovePTZConfiguration(struct soap*, const char*, struct __trt__RemovePTZConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemovePTZConfiguration * soap_new___trt__RemovePTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemovePTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemovePTZConfiguration * soap_new_req___trt__RemovePTZConfiguration(
	struct soap *soap)
{
	struct __trt__RemovePTZConfiguration *_p = ::soap_new___trt__RemovePTZConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemovePTZConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemovePTZConfiguration * soap_new_set___trt__RemovePTZConfiguration(
	struct soap *soap,
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration)
{
	struct __trt__RemovePTZConfiguration *_p = ::soap_new___trt__RemovePTZConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemovePTZConfiguration(soap, _p);
		_p->trt__RemovePTZConfiguration = trt__RemovePTZConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemovePTZConfiguration(struct soap*, const struct __trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_write___trt__RemovePTZConfiguration(struct soap *soap, struct __trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemovePTZConfiguration(soap, p), 0) || ::soap_put___trt__RemovePTZConfiguration(soap, p, "-trt:RemovePTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemovePTZConfiguration(struct soap *soap, const char *URL, struct __trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemovePTZConfiguration(soap, p), 0) || ::soap_put___trt__RemovePTZConfiguration(soap, p, "-trt:RemovePTZConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemovePTZConfiguration(struct soap *soap, const char *URL, struct __trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemovePTZConfiguration(soap, p), 0) || ::soap_put___trt__RemovePTZConfiguration(soap, p, "-trt:RemovePTZConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemovePTZConfiguration(struct soap *soap, const char *URL, struct __trt__RemovePTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemovePTZConfiguration(soap, p), 0) || ::soap_put___trt__RemovePTZConfiguration(soap, p, "-trt:RemovePTZConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemovePTZConfiguration * SOAP_FMAC4 soap_get___trt__RemovePTZConfiguration(struct soap*, struct __trt__RemovePTZConfiguration *, const char*, const char*);

inline int soap_read___trt__RemovePTZConfiguration(struct soap *soap, struct __trt__RemovePTZConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemovePTZConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemovePTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemovePTZConfiguration(struct soap *soap, const char *URL, struct __trt__RemovePTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemovePTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemovePTZConfiguration(struct soap *soap, struct __trt__RemovePTZConfiguration *p)
{
	if (::soap_read___trt__RemovePTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioSourceConfiguration(struct soap*, struct __trt__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioSourceConfiguration(struct soap*, const struct __trt__RemoveAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioSourceConfiguration(struct soap*, const char*, struct __trt__RemoveAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioSourceConfiguration * soap_new___trt__RemoveAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioSourceConfiguration * soap_new_req___trt__RemoveAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioSourceConfiguration *_p = ::soap_new___trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioSourceConfiguration * soap_new_set___trt__RemoveAudioSourceConfiguration(
	struct soap *soap,
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration)
{
	struct __trt__RemoveAudioSourceConfiguration *_p = ::soap_new___trt__RemoveAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioSourceConfiguration(soap, _p);
		_p->trt__RemoveAudioSourceConfiguration = trt__RemoveAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioSourceConfiguration(struct soap*, const struct __trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioSourceConfiguration(struct soap *soap, struct __trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioSourceConfiguration(soap, p, "-trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioSourceConfiguration(soap, p, "-trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioSourceConfiguration(soap, p, "-trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioSourceConfiguration(soap, p, "-trt:RemoveAudioSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioSourceConfiguration(struct soap*, struct __trt__RemoveAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioSourceConfiguration(struct soap *soap, struct __trt__RemoveAudioSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveAudioSourceConfiguration(struct soap *soap, struct __trt__RemoveAudioSourceConfiguration *p)
{
	if (::soap_read___trt__RemoveAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveAudioEncoderConfiguration(struct soap*, struct __trt__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveAudioEncoderConfiguration(struct soap*, const struct __trt__RemoveAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, struct __trt__RemoveAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new___trt__RemoveAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new_req___trt__RemoveAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveAudioEncoderConfiguration *_p = ::soap_new___trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveAudioEncoderConfiguration * soap_new_set___trt__RemoveAudioEncoderConfiguration(
	struct soap *soap,
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration)
{
	struct __trt__RemoveAudioEncoderConfiguration *_p = ::soap_new___trt__RemoveAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveAudioEncoderConfiguration(soap, _p);
		_p->trt__RemoveAudioEncoderConfiguration = trt__RemoveAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveAudioEncoderConfiguration(struct soap*, const struct __trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveAudioEncoderConfiguration(struct soap *soap, struct __trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioEncoderConfiguration(soap, p, "-trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioEncoderConfiguration(soap, p, "-trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioEncoderConfiguration(soap, p, "-trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveAudioEncoderConfiguration(soap, p, "-trt:RemoveAudioEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveAudioEncoderConfiguration(struct soap*, struct __trt__RemoveAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveAudioEncoderConfiguration(struct soap *soap, struct __trt__RemoveAudioEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveAudioEncoderConfiguration(struct soap *soap, struct __trt__RemoveAudioEncoderConfiguration *p)
{
	if (::soap_read___trt__RemoveAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoSourceConfiguration(struct soap*, struct __trt__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoSourceConfiguration(struct soap*, const struct __trt__RemoveVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoSourceConfiguration(struct soap*, const char*, struct __trt__RemoveVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoSourceConfiguration * soap_new___trt__RemoveVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoSourceConfiguration * soap_new_req___trt__RemoveVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoSourceConfiguration *_p = ::soap_new___trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoSourceConfiguration * soap_new_set___trt__RemoveVideoSourceConfiguration(
	struct soap *soap,
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration)
{
	struct __trt__RemoveVideoSourceConfiguration *_p = ::soap_new___trt__RemoveVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoSourceConfiguration(soap, _p);
		_p->trt__RemoveVideoSourceConfiguration = trt__RemoveVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoSourceConfiguration(struct soap*, const struct __trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoSourceConfiguration(struct soap *soap, struct __trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoSourceConfiguration(soap, p, "-trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoSourceConfiguration(soap, p, "-trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoSourceConfiguration(soap, p, "-trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoSourceConfiguration(soap, p, "-trt:RemoveVideoSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoSourceConfiguration(struct soap*, struct __trt__RemoveVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoSourceConfiguration(struct soap *soap, struct __trt__RemoveVideoSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveVideoSourceConfiguration(struct soap *soap, struct __trt__RemoveVideoSourceConfiguration *p)
{
	if (::soap_read___trt__RemoveVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__RemoveVideoEncoderConfiguration(struct soap*, struct __trt__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__RemoveVideoEncoderConfiguration(struct soap*, const struct __trt__RemoveVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, struct __trt__RemoveVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new___trt__RemoveVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__RemoveVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new_req___trt__RemoveVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__RemoveVideoEncoderConfiguration *_p = ::soap_new___trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__RemoveVideoEncoderConfiguration * soap_new_set___trt__RemoveVideoEncoderConfiguration(
	struct soap *soap,
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration)
{
	struct __trt__RemoveVideoEncoderConfiguration *_p = ::soap_new___trt__RemoveVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__RemoveVideoEncoderConfiguration(soap, _p);
		_p->trt__RemoveVideoEncoderConfiguration = trt__RemoveVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__RemoveVideoEncoderConfiguration(struct soap*, const struct __trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__RemoveVideoEncoderConfiguration(struct soap *soap, struct __trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__RemoveVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoEncoderConfiguration(soap, p, "-trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoEncoderConfiguration(soap, p, "-trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoEncoderConfiguration(soap, p, "-trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__RemoveVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__RemoveVideoEncoderConfiguration(soap, p, "-trt:RemoveVideoEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__RemoveVideoEncoderConfiguration(struct soap*, struct __trt__RemoveVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__RemoveVideoEncoderConfiguration(struct soap *soap, struct __trt__RemoveVideoEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__RemoveVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__RemoveVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__RemoveVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__RemoveVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__RemoveVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__RemoveVideoEncoderConfiguration(struct soap *soap, struct __trt__RemoveVideoEncoderConfiguration *p)
{
	if (::soap_read___trt__RemoveVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioDecoderConfiguration(struct soap*, struct __trt__AddAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioDecoderConfiguration(struct soap*, const struct __trt__AddAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioDecoderConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioDecoderConfiguration(struct soap*, const char*, struct __trt__AddAudioDecoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioDecoderConfiguration * soap_new___trt__AddAudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioDecoderConfiguration * soap_new_req___trt__AddAudioDecoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioDecoderConfiguration *_p = ::soap_new___trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioDecoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioDecoderConfiguration * soap_new_set___trt__AddAudioDecoderConfiguration(
	struct soap *soap,
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration)
{
	struct __trt__AddAudioDecoderConfiguration *_p = ::soap_new___trt__AddAudioDecoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioDecoderConfiguration(soap, _p);
		_p->trt__AddAudioDecoderConfiguration = trt__AddAudioDecoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioDecoderConfiguration(struct soap*, const struct __trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioDecoderConfiguration(struct soap *soap, struct __trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioDecoderConfiguration(soap, p, "-trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioDecoderConfiguration(soap, p, "-trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioDecoderConfiguration(soap, p, "-trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioDecoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioDecoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioDecoderConfiguration(soap, p, "-trt:AddAudioDecoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioDecoderConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioDecoderConfiguration(struct soap*, struct __trt__AddAudioDecoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioDecoderConfiguration(struct soap *soap, struct __trt__AddAudioDecoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddAudioDecoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddAudioDecoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddAudioDecoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioDecoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddAudioDecoderConfiguration(struct soap *soap, struct __trt__AddAudioDecoderConfiguration *p)
{
	if (::soap_read___trt__AddAudioDecoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioOutputConfiguration(struct soap*, struct __trt__AddAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioOutputConfiguration(struct soap*, const struct __trt__AddAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioOutputConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioOutputConfiguration(struct soap*, const char*, struct __trt__AddAudioOutputConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioOutputConfiguration * soap_new___trt__AddAudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioOutputConfiguration * soap_new_req___trt__AddAudioOutputConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioOutputConfiguration *_p = ::soap_new___trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioOutputConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioOutputConfiguration * soap_new_set___trt__AddAudioOutputConfiguration(
	struct soap *soap,
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration)
{
	struct __trt__AddAudioOutputConfiguration *_p = ::soap_new___trt__AddAudioOutputConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioOutputConfiguration(soap, _p);
		_p->trt__AddAudioOutputConfiguration = trt__AddAudioOutputConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioOutputConfiguration(struct soap*, const struct __trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioOutputConfiguration(struct soap *soap, struct __trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioOutputConfiguration(soap, p, "-trt:AddAudioOutputConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioOutputConfiguration(soap, p, "-trt:AddAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioOutputConfiguration(soap, p, "-trt:AddAudioOutputConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioOutputConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioOutputConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioOutputConfiguration(soap, p, "-trt:AddAudioOutputConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioOutputConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioOutputConfiguration(struct soap*, struct __trt__AddAudioOutputConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioOutputConfiguration(struct soap *soap, struct __trt__AddAudioOutputConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddAudioOutputConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddAudioOutputConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddAudioOutputConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioOutputConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddAudioOutputConfiguration(struct soap *soap, struct __trt__AddAudioOutputConfiguration *p)
{
	if (::soap_read___trt__AddAudioOutputConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE___trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddMetadataConfiguration(struct soap*, struct __trt__AddMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddMetadataConfiguration(struct soap*, const struct __trt__AddMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddMetadataConfiguration(struct soap*, const char*, int, const struct __trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddMetadataConfiguration * SOAP_FMAC4 soap_in___trt__AddMetadataConfiguration(struct soap*, const char*, struct __trt__AddMetadataConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddMetadataConfiguration * soap_new___trt__AddMetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddMetadataConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddMetadataConfiguration * soap_new_req___trt__AddMetadataConfiguration(
	struct soap *soap)
{
	struct __trt__AddMetadataConfiguration *_p = ::soap_new___trt__AddMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddMetadataConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddMetadataConfiguration * soap_new_set___trt__AddMetadataConfiguration(
	struct soap *soap,
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration)
{
	struct __trt__AddMetadataConfiguration *_p = ::soap_new___trt__AddMetadataConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddMetadataConfiguration(soap, _p);
		_p->trt__AddMetadataConfiguration = trt__AddMetadataConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddMetadataConfiguration(struct soap*, const struct __trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_write___trt__AddMetadataConfiguration(struct soap *soap, struct __trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddMetadataConfiguration(soap, p), 0) || ::soap_put___trt__AddMetadataConfiguration(soap, p, "-trt:AddMetadataConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddMetadataConfiguration(soap, p), 0) || ::soap_put___trt__AddMetadataConfiguration(soap, p, "-trt:AddMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddMetadataConfiguration(soap, p), 0) || ::soap_put___trt__AddMetadataConfiguration(soap, p, "-trt:AddMetadataConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__AddMetadataConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddMetadataConfiguration(soap, p), 0) || ::soap_put___trt__AddMetadataConfiguration(soap, p, "-trt:AddMetadataConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddMetadataConfiguration * SOAP_FMAC4 soap_get___trt__AddMetadataConfiguration(struct soap*, struct __trt__AddMetadataConfiguration *, const char*, const char*);

inline int soap_read___trt__AddMetadataConfiguration(struct soap *soap, struct __trt__AddMetadataConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddMetadataConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddMetadataConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddMetadataConfiguration(struct soap *soap, const char *URL, struct __trt__AddMetadataConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddMetadataConfiguration(struct soap *soap, struct __trt__AddMetadataConfiguration *p)
{
	if (::soap_read___trt__AddMetadataConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoAnalyticsConfiguration(struct soap*, struct __trt__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoAnalyticsConfiguration(struct soap*, const struct __trt__AddVideoAnalyticsConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, struct __trt__AddVideoAnalyticsConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new___trt__AddVideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new_req___trt__AddVideoAnalyticsConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoAnalyticsConfiguration *_p = ::soap_new___trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoAnalyticsConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoAnalyticsConfiguration * soap_new_set___trt__AddVideoAnalyticsConfiguration(
	struct soap *soap,
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration)
{
	struct __trt__AddVideoAnalyticsConfiguration *_p = ::soap_new___trt__AddVideoAnalyticsConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoAnalyticsConfiguration(soap, _p);
		_p->trt__AddVideoAnalyticsConfiguration = trt__AddVideoAnalyticsConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoAnalyticsConfiguration(struct soap*, const struct __trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoAnalyticsConfiguration(struct soap *soap, struct __trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoAnalyticsConfiguration(soap, p, "-trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoAnalyticsConfiguration(soap, p, "-trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoAnalyticsConfiguration(soap, p, "-trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoAnalyticsConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoAnalyticsConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoAnalyticsConfiguration(soap, p, "-trt:AddVideoAnalyticsConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoAnalyticsConfiguration(struct soap*, struct __trt__AddVideoAnalyticsConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoAnalyticsConfiguration(struct soap *soap, struct __trt__AddVideoAnalyticsConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddVideoAnalyticsConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddVideoAnalyticsConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddVideoAnalyticsConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoAnalyticsConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddVideoAnalyticsConfiguration(struct soap *soap, struct __trt__AddVideoAnalyticsConfiguration *p)
{
	if (::soap_read___trt__AddVideoAnalyticsConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE___trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddPTZConfiguration(struct soap*, struct __trt__AddPTZConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddPTZConfiguration(struct soap*, const struct __trt__AddPTZConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddPTZConfiguration(struct soap*, const char*, int, const struct __trt__AddPTZConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddPTZConfiguration * SOAP_FMAC4 soap_in___trt__AddPTZConfiguration(struct soap*, const char*, struct __trt__AddPTZConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddPTZConfiguration * soap_new___trt__AddPTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddPTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddPTZConfiguration * soap_new_req___trt__AddPTZConfiguration(
	struct soap *soap)
{
	struct __trt__AddPTZConfiguration *_p = ::soap_new___trt__AddPTZConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddPTZConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddPTZConfiguration * soap_new_set___trt__AddPTZConfiguration(
	struct soap *soap,
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration)
{
	struct __trt__AddPTZConfiguration *_p = ::soap_new___trt__AddPTZConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddPTZConfiguration(soap, _p);
		_p->trt__AddPTZConfiguration = trt__AddPTZConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddPTZConfiguration(struct soap*, const struct __trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_write___trt__AddPTZConfiguration(struct soap *soap, struct __trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddPTZConfiguration(soap, p), 0) || ::soap_put___trt__AddPTZConfiguration(soap, p, "-trt:AddPTZConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddPTZConfiguration(struct soap *soap, const char *URL, struct __trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddPTZConfiguration(soap, p), 0) || ::soap_put___trt__AddPTZConfiguration(soap, p, "-trt:AddPTZConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddPTZConfiguration(struct soap *soap, const char *URL, struct __trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddPTZConfiguration(soap, p), 0) || ::soap_put___trt__AddPTZConfiguration(soap, p, "-trt:AddPTZConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddPTZConfiguration(struct soap *soap, const char *URL, struct __trt__AddPTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddPTZConfiguration(soap, p), 0) || ::soap_put___trt__AddPTZConfiguration(soap, p, "-trt:AddPTZConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddPTZConfiguration * SOAP_FMAC4 soap_get___trt__AddPTZConfiguration(struct soap*, struct __trt__AddPTZConfiguration *, const char*, const char*);

inline int soap_read___trt__AddPTZConfiguration(struct soap *soap, struct __trt__AddPTZConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddPTZConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddPTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddPTZConfiguration(struct soap *soap, const char *URL, struct __trt__AddPTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddPTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddPTZConfiguration(struct soap *soap, struct __trt__AddPTZConfiguration *p)
{
	if (::soap_read___trt__AddPTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioSourceConfiguration(struct soap*, struct __trt__AddAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioSourceConfiguration(struct soap*, const struct __trt__AddAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioSourceConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioSourceConfiguration(struct soap*, const char*, struct __trt__AddAudioSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioSourceConfiguration * soap_new___trt__AddAudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioSourceConfiguration * soap_new_req___trt__AddAudioSourceConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioSourceConfiguration *_p = ::soap_new___trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioSourceConfiguration * soap_new_set___trt__AddAudioSourceConfiguration(
	struct soap *soap,
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration)
{
	struct __trt__AddAudioSourceConfiguration *_p = ::soap_new___trt__AddAudioSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioSourceConfiguration(soap, _p);
		_p->trt__AddAudioSourceConfiguration = trt__AddAudioSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioSourceConfiguration(struct soap*, const struct __trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioSourceConfiguration(struct soap *soap, struct __trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioSourceConfiguration(soap, p, "-trt:AddAudioSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioSourceConfiguration(soap, p, "-trt:AddAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioSourceConfiguration(soap, p, "-trt:AddAudioSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioSourceConfiguration(soap, p, "-trt:AddAudioSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioSourceConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioSourceConfiguration(struct soap*, struct __trt__AddAudioSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioSourceConfiguration(struct soap *soap, struct __trt__AddAudioSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddAudioSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddAudioSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddAudioSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddAudioSourceConfiguration(struct soap *soap, struct __trt__AddAudioSourceConfiguration *p)
{
	if (::soap_read___trt__AddAudioSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddAudioEncoderConfiguration(struct soap*, struct __trt__AddAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddAudioEncoderConfiguration(struct soap*, const struct __trt__AddAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddAudioEncoderConfiguration(struct soap*, const char*, int, const struct __trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_in___trt__AddAudioEncoderConfiguration(struct soap*, const char*, struct __trt__AddAudioEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddAudioEncoderConfiguration * soap_new___trt__AddAudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddAudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddAudioEncoderConfiguration * soap_new_req___trt__AddAudioEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddAudioEncoderConfiguration *_p = ::soap_new___trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddAudioEncoderConfiguration * soap_new_set___trt__AddAudioEncoderConfiguration(
	struct soap *soap,
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration)
{
	struct __trt__AddAudioEncoderConfiguration *_p = ::soap_new___trt__AddAudioEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddAudioEncoderConfiguration(soap, _p);
		_p->trt__AddAudioEncoderConfiguration = trt__AddAudioEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddAudioEncoderConfiguration(struct soap*, const struct __trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddAudioEncoderConfiguration(struct soap *soap, struct __trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioEncoderConfiguration(soap, p, "-trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioEncoderConfiguration(soap, p, "-trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioEncoderConfiguration(soap, p, "-trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddAudioEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddAudioEncoderConfiguration(soap, p, "-trt:AddAudioEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddAudioEncoderConfiguration * SOAP_FMAC4 soap_get___trt__AddAudioEncoderConfiguration(struct soap*, struct __trt__AddAudioEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddAudioEncoderConfiguration(struct soap *soap, struct __trt__AddAudioEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddAudioEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddAudioEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddAudioEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddAudioEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddAudioEncoderConfiguration(struct soap *soap, struct __trt__AddAudioEncoderConfiguration *p)
{
	if (::soap_read___trt__AddAudioEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoSourceConfiguration(struct soap*, struct __trt__AddVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoSourceConfiguration(struct soap*, const struct __trt__AddVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoSourceConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoSourceConfiguration(struct soap*, const char*, struct __trt__AddVideoSourceConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoSourceConfiguration * soap_new___trt__AddVideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoSourceConfiguration * soap_new_req___trt__AddVideoSourceConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoSourceConfiguration *_p = ::soap_new___trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoSourceConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoSourceConfiguration * soap_new_set___trt__AddVideoSourceConfiguration(
	struct soap *soap,
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration)
{
	struct __trt__AddVideoSourceConfiguration *_p = ::soap_new___trt__AddVideoSourceConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoSourceConfiguration(soap, _p);
		_p->trt__AddVideoSourceConfiguration = trt__AddVideoSourceConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoSourceConfiguration(struct soap*, const struct __trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoSourceConfiguration(struct soap *soap, struct __trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoSourceConfiguration(soap, p, "-trt:AddVideoSourceConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoSourceConfiguration(soap, p, "-trt:AddVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoSourceConfiguration(soap, p, "-trt:AddVideoSourceConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoSourceConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoSourceConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoSourceConfiguration(soap, p, "-trt:AddVideoSourceConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoSourceConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoSourceConfiguration(struct soap*, struct __trt__AddVideoSourceConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoSourceConfiguration(struct soap *soap, struct __trt__AddVideoSourceConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddVideoSourceConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddVideoSourceConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddVideoSourceConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoSourceConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddVideoSourceConfiguration(struct soap *soap, struct __trt__AddVideoSourceConfiguration *p)
{
	if (::soap_read___trt__AddVideoSourceConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__AddVideoEncoderConfiguration(struct soap*, struct __trt__AddVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__AddVideoEncoderConfiguration(struct soap*, const struct __trt__AddVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__AddVideoEncoderConfiguration(struct soap*, const char*, int, const struct __trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_in___trt__AddVideoEncoderConfiguration(struct soap*, const char*, struct __trt__AddVideoEncoderConfiguration *, const char*);
SOAP_FMAC1 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__AddVideoEncoderConfiguration * soap_new___trt__AddVideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__AddVideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __trt__AddVideoEncoderConfiguration * soap_new_req___trt__AddVideoEncoderConfiguration(
	struct soap *soap)
{
	struct __trt__AddVideoEncoderConfiguration *_p = ::soap_new___trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoEncoderConfiguration(soap, _p);
	}
	return _p;
}

inline struct __trt__AddVideoEncoderConfiguration * soap_new_set___trt__AddVideoEncoderConfiguration(
	struct soap *soap,
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration)
{
	struct __trt__AddVideoEncoderConfiguration *_p = ::soap_new___trt__AddVideoEncoderConfiguration(soap);
	if (_p)
	{	::soap_default___trt__AddVideoEncoderConfiguration(soap, _p);
		_p->trt__AddVideoEncoderConfiguration = trt__AddVideoEncoderConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__AddVideoEncoderConfiguration(struct soap*, const struct __trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_write___trt__AddVideoEncoderConfiguration(struct soap *soap, struct __trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__AddVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoEncoderConfiguration(soap, p, "-trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoEncoderConfiguration(soap, p, "-trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoEncoderConfiguration(soap, p, "-trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoEncoderConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__AddVideoEncoderConfiguration(soap, p), 0) || ::soap_put___trt__AddVideoEncoderConfiguration(soap, p, "-trt:AddVideoEncoderConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__AddVideoEncoderConfiguration * SOAP_FMAC4 soap_get___trt__AddVideoEncoderConfiguration(struct soap*, struct __trt__AddVideoEncoderConfiguration *, const char*, const char*);

inline int soap_read___trt__AddVideoEncoderConfiguration(struct soap *soap, struct __trt__AddVideoEncoderConfiguration *p)
{
	if (p)
	{	::soap_default___trt__AddVideoEncoderConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__AddVideoEncoderConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__AddVideoEncoderConfiguration(struct soap *soap, const char *URL, struct __trt__AddVideoEncoderConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__AddVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__AddVideoEncoderConfiguration(struct soap *soap, struct __trt__AddVideoEncoderConfiguration *p)
{
	if (::soap_read___trt__AddVideoEncoderConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetProfiles_DEFINED
#define SOAP_TYPE___trt__GetProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetProfiles(struct soap*, struct __trt__GetProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetProfiles(struct soap*, const struct __trt__GetProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetProfiles(struct soap*, const char*, int, const struct __trt__GetProfiles *, const char*);
SOAP_FMAC3 struct __trt__GetProfiles * SOAP_FMAC4 soap_in___trt__GetProfiles(struct soap*, const char*, struct __trt__GetProfiles *, const char*);
SOAP_FMAC1 struct __trt__GetProfiles * SOAP_FMAC2 soap_instantiate___trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetProfiles * soap_new___trt__GetProfiles(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetProfiles(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetProfiles * soap_new_req___trt__GetProfiles(
	struct soap *soap)
{
	struct __trt__GetProfiles *_p = ::soap_new___trt__GetProfiles(soap);
	if (_p)
	{	::soap_default___trt__GetProfiles(soap, _p);
	}
	return _p;
}

inline struct __trt__GetProfiles * soap_new_set___trt__GetProfiles(
	struct soap *soap,
	_trt__GetProfiles *trt__GetProfiles)
{
	struct __trt__GetProfiles *_p = ::soap_new___trt__GetProfiles(soap);
	if (_p)
	{	::soap_default___trt__GetProfiles(soap, _p);
		_p->trt__GetProfiles = trt__GetProfiles;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetProfiles(struct soap*, const struct __trt__GetProfiles *, const char*, const char*);

inline int soap_write___trt__GetProfiles(struct soap *soap, struct __trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetProfiles(soap, p), 0) || ::soap_put___trt__GetProfiles(soap, p, "-trt:GetProfiles", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetProfiles(struct soap *soap, const char *URL, struct __trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfiles(soap, p), 0) || ::soap_put___trt__GetProfiles(soap, p, "-trt:GetProfiles", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetProfiles(struct soap *soap, const char *URL, struct __trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfiles(soap, p), 0) || ::soap_put___trt__GetProfiles(soap, p, "-trt:GetProfiles", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetProfiles(struct soap *soap, const char *URL, struct __trt__GetProfiles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfiles(soap, p), 0) || ::soap_put___trt__GetProfiles(soap, p, "-trt:GetProfiles", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetProfiles * SOAP_FMAC4 soap_get___trt__GetProfiles(struct soap*, struct __trt__GetProfiles *, const char*, const char*);

inline int soap_read___trt__GetProfiles(struct soap *soap, struct __trt__GetProfiles *p)
{
	if (p)
	{	::soap_default___trt__GetProfiles(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetProfiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetProfiles(struct soap *soap, const char *URL, struct __trt__GetProfiles *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetProfiles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetProfiles(struct soap *soap, struct __trt__GetProfiles *p)
{
	if (::soap_read___trt__GetProfiles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetProfile_DEFINED
#define SOAP_TYPE___trt__GetProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetProfile(struct soap*, struct __trt__GetProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetProfile(struct soap*, const struct __trt__GetProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetProfile(struct soap*, const char*, int, const struct __trt__GetProfile *, const char*);
SOAP_FMAC3 struct __trt__GetProfile * SOAP_FMAC4 soap_in___trt__GetProfile(struct soap*, const char*, struct __trt__GetProfile *, const char*);
SOAP_FMAC1 struct __trt__GetProfile * SOAP_FMAC2 soap_instantiate___trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetProfile * soap_new___trt__GetProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetProfile * soap_new_req___trt__GetProfile(
	struct soap *soap)
{
	struct __trt__GetProfile *_p = ::soap_new___trt__GetProfile(soap);
	if (_p)
	{	::soap_default___trt__GetProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__GetProfile * soap_new_set___trt__GetProfile(
	struct soap *soap,
	_trt__GetProfile *trt__GetProfile)
{
	struct __trt__GetProfile *_p = ::soap_new___trt__GetProfile(soap);
	if (_p)
	{	::soap_default___trt__GetProfile(soap, _p);
		_p->trt__GetProfile = trt__GetProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetProfile(struct soap*, const struct __trt__GetProfile *, const char*, const char*);

inline int soap_write___trt__GetProfile(struct soap *soap, struct __trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetProfile(soap, p), 0) || ::soap_put___trt__GetProfile(soap, p, "-trt:GetProfile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetProfile(struct soap *soap, const char *URL, struct __trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfile(soap, p), 0) || ::soap_put___trt__GetProfile(soap, p, "-trt:GetProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetProfile(struct soap *soap, const char *URL, struct __trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfile(soap, p), 0) || ::soap_put___trt__GetProfile(soap, p, "-trt:GetProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetProfile(struct soap *soap, const char *URL, struct __trt__GetProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetProfile(soap, p), 0) || ::soap_put___trt__GetProfile(soap, p, "-trt:GetProfile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetProfile * SOAP_FMAC4 soap_get___trt__GetProfile(struct soap*, struct __trt__GetProfile *, const char*, const char*);

inline int soap_read___trt__GetProfile(struct soap *soap, struct __trt__GetProfile *p)
{
	if (p)
	{	::soap_default___trt__GetProfile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetProfile(struct soap *soap, const char *URL, struct __trt__GetProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetProfile(struct soap *soap, struct __trt__GetProfile *p)
{
	if (::soap_read___trt__GetProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__CreateProfile_DEFINED
#define SOAP_TYPE___trt__CreateProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__CreateProfile(struct soap*, struct __trt__CreateProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__CreateProfile(struct soap*, const struct __trt__CreateProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__CreateProfile(struct soap*, const char*, int, const struct __trt__CreateProfile *, const char*);
SOAP_FMAC3 struct __trt__CreateProfile * SOAP_FMAC4 soap_in___trt__CreateProfile(struct soap*, const char*, struct __trt__CreateProfile *, const char*);
SOAP_FMAC1 struct __trt__CreateProfile * SOAP_FMAC2 soap_instantiate___trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__CreateProfile * soap_new___trt__CreateProfile(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__CreateProfile(soap, n, NULL, NULL, NULL);
}

inline struct __trt__CreateProfile * soap_new_req___trt__CreateProfile(
	struct soap *soap)
{
	struct __trt__CreateProfile *_p = ::soap_new___trt__CreateProfile(soap);
	if (_p)
	{	::soap_default___trt__CreateProfile(soap, _p);
	}
	return _p;
}

inline struct __trt__CreateProfile * soap_new_set___trt__CreateProfile(
	struct soap *soap,
	_trt__CreateProfile *trt__CreateProfile)
{
	struct __trt__CreateProfile *_p = ::soap_new___trt__CreateProfile(soap);
	if (_p)
	{	::soap_default___trt__CreateProfile(soap, _p);
		_p->trt__CreateProfile = trt__CreateProfile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__CreateProfile(struct soap*, const struct __trt__CreateProfile *, const char*, const char*);

inline int soap_write___trt__CreateProfile(struct soap *soap, struct __trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__CreateProfile(soap, p), 0) || ::soap_put___trt__CreateProfile(soap, p, "-trt:CreateProfile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__CreateProfile(struct soap *soap, const char *URL, struct __trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateProfile(soap, p), 0) || ::soap_put___trt__CreateProfile(soap, p, "-trt:CreateProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__CreateProfile(struct soap *soap, const char *URL, struct __trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateProfile(soap, p), 0) || ::soap_put___trt__CreateProfile(soap, p, "-trt:CreateProfile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__CreateProfile(struct soap *soap, const char *URL, struct __trt__CreateProfile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__CreateProfile(soap, p), 0) || ::soap_put___trt__CreateProfile(soap, p, "-trt:CreateProfile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__CreateProfile * SOAP_FMAC4 soap_get___trt__CreateProfile(struct soap*, struct __trt__CreateProfile *, const char*, const char*);

inline int soap_read___trt__CreateProfile(struct soap *soap, struct __trt__CreateProfile *p)
{
	if (p)
	{	::soap_default___trt__CreateProfile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__CreateProfile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__CreateProfile(struct soap *soap, const char *URL, struct __trt__CreateProfile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__CreateProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__CreateProfile(struct soap *soap, struct __trt__CreateProfile *p)
{
	if (::soap_read___trt__CreateProfile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE___trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioOutputs(struct soap*, struct __trt__GetAudioOutputs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioOutputs(struct soap*, const struct __trt__GetAudioOutputs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioOutputs(struct soap*, const char*, int, const struct __trt__GetAudioOutputs *, const char*);
SOAP_FMAC3 struct __trt__GetAudioOutputs * SOAP_FMAC4 soap_in___trt__GetAudioOutputs(struct soap*, const char*, struct __trt__GetAudioOutputs *, const char*);
SOAP_FMAC1 struct __trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioOutputs * soap_new___trt__GetAudioOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioOutputs(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioOutputs * soap_new_req___trt__GetAudioOutputs(
	struct soap *soap)
{
	struct __trt__GetAudioOutputs *_p = ::soap_new___trt__GetAudioOutputs(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputs(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioOutputs * soap_new_set___trt__GetAudioOutputs(
	struct soap *soap,
	_trt__GetAudioOutputs *trt__GetAudioOutputs)
{
	struct __trt__GetAudioOutputs *_p = ::soap_new___trt__GetAudioOutputs(soap);
	if (_p)
	{	::soap_default___trt__GetAudioOutputs(soap, _p);
		_p->trt__GetAudioOutputs = trt__GetAudioOutputs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioOutputs(struct soap*, const struct __trt__GetAudioOutputs *, const char*, const char*);

inline int soap_write___trt__GetAudioOutputs(struct soap *soap, struct __trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioOutputs(soap, p), 0) || ::soap_put___trt__GetAudioOutputs(soap, p, "-trt:GetAudioOutputs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioOutputs(struct soap *soap, const char *URL, struct __trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputs(soap, p), 0) || ::soap_put___trt__GetAudioOutputs(soap, p, "-trt:GetAudioOutputs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioOutputs(struct soap *soap, const char *URL, struct __trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputs(soap, p), 0) || ::soap_put___trt__GetAudioOutputs(soap, p, "-trt:GetAudioOutputs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioOutputs(struct soap *soap, const char *URL, struct __trt__GetAudioOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioOutputs(soap, p), 0) || ::soap_put___trt__GetAudioOutputs(soap, p, "-trt:GetAudioOutputs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioOutputs * SOAP_FMAC4 soap_get___trt__GetAudioOutputs(struct soap*, struct __trt__GetAudioOutputs *, const char*, const char*);

inline int soap_read___trt__GetAudioOutputs(struct soap *soap, struct __trt__GetAudioOutputs *p)
{
	if (p)
	{	::soap_default___trt__GetAudioOutputs(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioOutputs(struct soap *soap, const char *URL, struct __trt__GetAudioOutputs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioOutputs(struct soap *soap, struct __trt__GetAudioOutputs *p)
{
	if (::soap_read___trt__GetAudioOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources_DEFINED
#define SOAP_TYPE___trt__GetAudioSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetAudioSources(struct soap*, struct __trt__GetAudioSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetAudioSources(struct soap*, const struct __trt__GetAudioSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetAudioSources(struct soap*, const char*, int, const struct __trt__GetAudioSources *, const char*);
SOAP_FMAC3 struct __trt__GetAudioSources * SOAP_FMAC4 soap_in___trt__GetAudioSources(struct soap*, const char*, struct __trt__GetAudioSources *, const char*);
SOAP_FMAC1 struct __trt__GetAudioSources * SOAP_FMAC2 soap_instantiate___trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetAudioSources * soap_new___trt__GetAudioSources(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetAudioSources(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetAudioSources * soap_new_req___trt__GetAudioSources(
	struct soap *soap)
{
	struct __trt__GetAudioSources *_p = ::soap_new___trt__GetAudioSources(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSources(soap, _p);
	}
	return _p;
}

inline struct __trt__GetAudioSources * soap_new_set___trt__GetAudioSources(
	struct soap *soap,
	_trt__GetAudioSources *trt__GetAudioSources)
{
	struct __trt__GetAudioSources *_p = ::soap_new___trt__GetAudioSources(soap);
	if (_p)
	{	::soap_default___trt__GetAudioSources(soap, _p);
		_p->trt__GetAudioSources = trt__GetAudioSources;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetAudioSources(struct soap*, const struct __trt__GetAudioSources *, const char*, const char*);

inline int soap_write___trt__GetAudioSources(struct soap *soap, struct __trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetAudioSources(soap, p), 0) || ::soap_put___trt__GetAudioSources(soap, p, "-trt:GetAudioSources", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetAudioSources(struct soap *soap, const char *URL, struct __trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSources(soap, p), 0) || ::soap_put___trt__GetAudioSources(soap, p, "-trt:GetAudioSources", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetAudioSources(struct soap *soap, const char *URL, struct __trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSources(soap, p), 0) || ::soap_put___trt__GetAudioSources(soap, p, "-trt:GetAudioSources", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetAudioSources(struct soap *soap, const char *URL, struct __trt__GetAudioSources const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetAudioSources(soap, p), 0) || ::soap_put___trt__GetAudioSources(soap, p, "-trt:GetAudioSources", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetAudioSources * SOAP_FMAC4 soap_get___trt__GetAudioSources(struct soap*, struct __trt__GetAudioSources *, const char*, const char*);

inline int soap_read___trt__GetAudioSources(struct soap *soap, struct __trt__GetAudioSources *p)
{
	if (p)
	{	::soap_default___trt__GetAudioSources(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetAudioSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetAudioSources(struct soap *soap, const char *URL, struct __trt__GetAudioSources *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetAudioSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetAudioSources(struct soap *soap, struct __trt__GetAudioSources *p)
{
	if (::soap_read___trt__GetAudioSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources_DEFINED
#define SOAP_TYPE___trt__GetVideoSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetVideoSources(struct soap*, struct __trt__GetVideoSources *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetVideoSources(struct soap*, const struct __trt__GetVideoSources *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetVideoSources(struct soap*, const char*, int, const struct __trt__GetVideoSources *, const char*);
SOAP_FMAC3 struct __trt__GetVideoSources * SOAP_FMAC4 soap_in___trt__GetVideoSources(struct soap*, const char*, struct __trt__GetVideoSources *, const char*);
SOAP_FMAC1 struct __trt__GetVideoSources * SOAP_FMAC2 soap_instantiate___trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetVideoSources * soap_new___trt__GetVideoSources(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetVideoSources(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetVideoSources * soap_new_req___trt__GetVideoSources(
	struct soap *soap)
{
	struct __trt__GetVideoSources *_p = ::soap_new___trt__GetVideoSources(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSources(soap, _p);
	}
	return _p;
}

inline struct __trt__GetVideoSources * soap_new_set___trt__GetVideoSources(
	struct soap *soap,
	_trt__GetVideoSources *trt__GetVideoSources)
{
	struct __trt__GetVideoSources *_p = ::soap_new___trt__GetVideoSources(soap);
	if (_p)
	{	::soap_default___trt__GetVideoSources(soap, _p);
		_p->trt__GetVideoSources = trt__GetVideoSources;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetVideoSources(struct soap*, const struct __trt__GetVideoSources *, const char*, const char*);

inline int soap_write___trt__GetVideoSources(struct soap *soap, struct __trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetVideoSources(soap, p), 0) || ::soap_put___trt__GetVideoSources(soap, p, "-trt:GetVideoSources", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetVideoSources(struct soap *soap, const char *URL, struct __trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSources(soap, p), 0) || ::soap_put___trt__GetVideoSources(soap, p, "-trt:GetVideoSources", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetVideoSources(struct soap *soap, const char *URL, struct __trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSources(soap, p), 0) || ::soap_put___trt__GetVideoSources(soap, p, "-trt:GetVideoSources", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetVideoSources(struct soap *soap, const char *URL, struct __trt__GetVideoSources const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetVideoSources(soap, p), 0) || ::soap_put___trt__GetVideoSources(soap, p, "-trt:GetVideoSources", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetVideoSources * SOAP_FMAC4 soap_get___trt__GetVideoSources(struct soap*, struct __trt__GetVideoSources *, const char*, const char*);

inline int soap_read___trt__GetVideoSources(struct soap *soap, struct __trt__GetVideoSources *p)
{
	if (p)
	{	::soap_default___trt__GetVideoSources(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetVideoSources(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetVideoSources(struct soap *soap, const char *URL, struct __trt__GetVideoSources *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetVideoSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetVideoSources(struct soap *soap, struct __trt__GetVideoSources *p)
{
	if (::soap_read___trt__GetVideoSources(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___trt__GetServiceCapabilities(struct soap*, struct __trt__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___trt__GetServiceCapabilities(struct soap*, const struct __trt__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___trt__GetServiceCapabilities(struct soap*, const char*, int, const struct __trt__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __trt__GetServiceCapabilities * SOAP_FMAC4 soap_in___trt__GetServiceCapabilities(struct soap*, const char*, struct __trt__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __trt__GetServiceCapabilities * soap_new___trt__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___trt__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __trt__GetServiceCapabilities * soap_new_req___trt__GetServiceCapabilities(
	struct soap *soap)
{
	struct __trt__GetServiceCapabilities *_p = ::soap_new___trt__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___trt__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __trt__GetServiceCapabilities * soap_new_set___trt__GetServiceCapabilities(
	struct soap *soap,
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities)
{
	struct __trt__GetServiceCapabilities *_p = ::soap_new___trt__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___trt__GetServiceCapabilities(soap, _p);
		_p->trt__GetServiceCapabilities = trt__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___trt__GetServiceCapabilities(struct soap*, const struct __trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___trt__GetServiceCapabilities(struct soap *soap, struct __trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___trt__GetServiceCapabilities(soap, p), 0) || ::soap_put___trt__GetServiceCapabilities(soap, p, "-trt:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___trt__GetServiceCapabilities(struct soap *soap, const char *URL, struct __trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetServiceCapabilities(soap, p), 0) || ::soap_put___trt__GetServiceCapabilities(soap, p, "-trt:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___trt__GetServiceCapabilities(struct soap *soap, const char *URL, struct __trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetServiceCapabilities(soap, p), 0) || ::soap_put___trt__GetServiceCapabilities(soap, p, "-trt:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___trt__GetServiceCapabilities(struct soap *soap, const char *URL, struct __trt__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___trt__GetServiceCapabilities(soap, p), 0) || ::soap_put___trt__GetServiceCapabilities(soap, p, "-trt:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __trt__GetServiceCapabilities * SOAP_FMAC4 soap_get___trt__GetServiceCapabilities(struct soap*, struct __trt__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___trt__GetServiceCapabilities(struct soap *soap, struct __trt__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___trt__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___trt__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___trt__GetServiceCapabilities(struct soap *soap, const char *URL, struct __trt__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___trt__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___trt__GetServiceCapabilities(struct soap *soap, struct __trt__GetServiceCapabilities *p)
{
	if (::soap_read___trt__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE___tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__MoveAndStartTracking(struct soap*, struct __tptz__MoveAndStartTracking *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__MoveAndStartTracking(struct soap*, const struct __tptz__MoveAndStartTracking *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__MoveAndStartTracking(struct soap*, const char*, int, const struct __tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC3 struct __tptz__MoveAndStartTracking * SOAP_FMAC4 soap_in___tptz__MoveAndStartTracking(struct soap*, const char*, struct __tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC1 struct __tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate___tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__MoveAndStartTracking * soap_new___tptz__MoveAndStartTracking(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__MoveAndStartTracking(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__MoveAndStartTracking * soap_new_req___tptz__MoveAndStartTracking(
	struct soap *soap)
{
	struct __tptz__MoveAndStartTracking *_p = ::soap_new___tptz__MoveAndStartTracking(soap);
	if (_p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, _p);
	}
	return _p;
}

inline struct __tptz__MoveAndStartTracking * soap_new_set___tptz__MoveAndStartTracking(
	struct soap *soap,
	_tptz__MoveAndStartTracking *tptz__MoveAndStartTracking)
{
	struct __tptz__MoveAndStartTracking *_p = ::soap_new___tptz__MoveAndStartTracking(soap);
	if (_p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, _p);
		_p->tptz__MoveAndStartTracking = tptz__MoveAndStartTracking;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__MoveAndStartTracking(struct soap*, const struct __tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_write___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__MoveAndStartTracking * SOAP_FMAC4 soap_get___tptz__MoveAndStartTracking(struct soap*, struct __tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_read___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking *p)
{
	if (p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__MoveAndStartTracking(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking *p)
{
	if (::soap_read___tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in___tptz__GetCompatibleConfigurations(struct soap*, const char*, struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetCompatibleConfigurations * soap_new___tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_req___tptz__GetCompatibleConfigurations(
	struct soap *soap)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_set___tptz__GetCompatibleConfigurations(
	struct soap *soap,
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
		_p->tptz__GetCompatibleConfigurations = tptz__GetCompatibleConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE___tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePresetTour(struct soap*, const char*, int, const struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_in___tptz__RemovePresetTour(struct soap*, const char*, struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate___tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePresetTour * soap_new___tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePresetTour * soap_new_req___tptz__RemovePresetTour(
	struct soap *soap)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePresetTour * soap_new_set___tptz__RemovePresetTour(
	struct soap *soap,
	_tptz__RemovePresetTour *tptz__RemovePresetTour)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
		_p->tptz__RemovePresetTour = tptz__RemovePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_write___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_get___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__RemovePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE___tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__OperatePresetTour(struct soap*, const char*, int, const struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_in___tptz__OperatePresetTour(struct soap*, const char*, struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__OperatePresetTour * soap_new___tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__OperatePresetTour * soap_new_req___tptz__OperatePresetTour(
	struct soap *soap)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__OperatePresetTour * soap_new_set___tptz__OperatePresetTour(
	struct soap *soap,
	_tptz__OperatePresetTour *tptz__OperatePresetTour)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
		_p->tptz__OperatePresetTour = tptz__OperatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_write___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_get___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__OperatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ModifyPresetTour(struct soap*, const char*, int, const struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_in___tptz__ModifyPresetTour(struct soap*, const char*, struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate___tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ModifyPresetTour * soap_new___tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ModifyPresetTour * soap_new_req___tptz__ModifyPresetTour(
	struct soap *soap)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__ModifyPresetTour * soap_new_set___tptz__ModifyPresetTour(
	struct soap *soap,
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
		_p->tptz__ModifyPresetTour = tptz__ModifyPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_write___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_get___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__ModifyPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE___tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__CreatePresetTour(struct soap*, const char*, int, const struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_in___tptz__CreatePresetTour(struct soap*, const char*, struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__CreatePresetTour * soap_new___tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__CreatePresetTour * soap_new_req___tptz__CreatePresetTour(
	struct soap *soap)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__CreatePresetTour * soap_new_set___tptz__CreatePresetTour(
	struct soap *soap,
	_tptz__CreatePresetTour *tptz__CreatePresetTour)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
		_p->tptz__CreatePresetTour = tptz__CreatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_write___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_get___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__CreatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTourOptions(struct soap*, const char*, int, const struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in___tptz__GetPresetTourOptions(struct soap*, const char*, struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTourOptions * soap_new___tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTourOptions * soap_new_req___tptz__GetPresetTourOptions(
	struct soap *soap)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTourOptions * soap_new_set___tptz__GetPresetTourOptions(
	struct soap *soap,
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
		_p->tptz__GetPresetTourOptions = tptz__GetPresetTourOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_write___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour_DEFINED
#define SOAP_TYPE___tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTour(struct soap*, const char*, int, const struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_in___tptz__GetPresetTour(struct soap*, const char*, struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTour * soap_new___tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTour * soap_new_req___tptz__GetPresetTour(
	struct soap *soap)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTour * soap_new_set___tptz__GetPresetTour(
	struct soap *soap,
	_tptz__GetPresetTour *tptz__GetPresetTour)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
		_p->tptz__GetPresetTour = tptz__GetPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_write___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_get___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_read___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours_DEFINED
#define SOAP_TYPE___tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTours(struct soap*, const char*, int, const struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_in___tptz__GetPresetTours(struct soap*, const char*, struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTours * soap_new___tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTours * soap_new_req___tptz__GetPresetTours(
	struct soap *soap)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTours * soap_new_set___tptz__GetPresetTours(
	struct soap *soap,
	_tptz__GetPresetTours *tptz__GetPresetTours)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
		_p->tptz__GetPresetTours = tptz__GetPresetTours;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_write___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_get___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_read___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTours(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__Stop_DEFINED
#define SOAP_TYPE___tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__Stop(struct soap*, struct __tptz__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__Stop(struct soap*, const struct __tptz__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__Stop(struct soap*, const char*, int, const struct __tptz__Stop *, const char*);
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_in___tptz__Stop(struct soap*, const char*, struct __tptz__Stop *, const char*);
SOAP_FMAC1 struct __tptz__Stop * SOAP_FMAC2 soap_instantiate___tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__Stop * soap_new___tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__Stop * soap_new_req___tptz__Stop(
	struct soap *soap)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
	}
	return _p;
}

inline struct __tptz__Stop * soap_new_set___tptz__Stop(
	struct soap *soap,
	_tptz__Stop *tptz__Stop)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
		_p->tptz__Stop = tptz__Stop;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__Stop(struct soap*, const struct __tptz__Stop *, const char*, const char*);

inline int soap_write___tptz__Stop(struct soap *soap, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_get___tptz__Stop(struct soap*, struct __tptz__Stop *, const char*, const char*);

inline int soap_read___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (p)
	{	::soap_default___tptz__Stop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GeoMove_DEFINED
#define SOAP_TYPE___tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GeoMove(struct soap*, const char*, int, const struct __tptz__GeoMove *, const char*);
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_in___tptz__GeoMove(struct soap*, const char*, struct __tptz__GeoMove *, const char*);
SOAP_FMAC1 struct __tptz__GeoMove * SOAP_FMAC2 soap_instantiate___tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GeoMove * soap_new___tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GeoMove * soap_new_req___tptz__GeoMove(
	struct soap *soap)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__GeoMove * soap_new_set___tptz__GeoMove(
	struct soap *soap,
	_tptz__GeoMove *tptz__GeoMove)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
		_p->tptz__GeoMove = tptz__GeoMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *, const char*, const char*);

inline int soap_write___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_get___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *, const char*, const char*);

inline int soap_read___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (p)
	{	::soap_default___tptz__GeoMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE___tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__AbsoluteMove(struct soap*, const char*, int, const struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_in___tptz__AbsoluteMove(struct soap*, const char*, struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 struct __tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate___tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__AbsoluteMove * soap_new___tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__AbsoluteMove * soap_new_req___tptz__AbsoluteMove(
	struct soap *soap)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__AbsoluteMove * soap_new_set___tptz__AbsoluteMove(
	struct soap *soap,
	_tptz__AbsoluteMove *tptz__AbsoluteMove)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
		_p->tptz__AbsoluteMove = tptz__AbsoluteMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_write___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_get___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (p)
	{	::soap_default___tptz__AbsoluteMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tptz__SendAuxiliaryCommand(struct soap*, const char*, struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SendAuxiliaryCommand * soap_new___tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_req___tptz__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_set___tptz__SendAuxiliaryCommand(
	struct soap *soap,
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
		_p->tptz__SendAuxiliaryCommand = tptz__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove_DEFINED
#define SOAP_TYPE___tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RelativeMove(struct soap*, const char*, int, const struct __tptz__RelativeMove *, const char*);
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_in___tptz__RelativeMove(struct soap*, const char*, struct __tptz__RelativeMove *, const char*);
SOAP_FMAC1 struct __tptz__RelativeMove * SOAP_FMAC2 soap_instantiate___tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RelativeMove * soap_new___tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RelativeMove * soap_new_req___tptz__RelativeMove(
	struct soap *soap)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__RelativeMove * soap_new_set___tptz__RelativeMove(
	struct soap *soap,
	_tptz__RelativeMove *tptz__RelativeMove)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
		_p->tptz__RelativeMove = tptz__RelativeMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_write___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_get___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_read___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (p)
	{	::soap_default___tptz__RelativeMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove_DEFINED
#define SOAP_TYPE___tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ContinuousMove(struct soap*, const char*, int, const struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_in___tptz__ContinuousMove(struct soap*, const char*, struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC1 struct __tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate___tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ContinuousMove * soap_new___tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ContinuousMove * soap_new_req___tptz__ContinuousMove(
	struct soap *soap)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__ContinuousMove * soap_new_set___tptz__ContinuousMove(
	struct soap *soap,
	_tptz__ContinuousMove *tptz__ContinuousMove)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
		_p->tptz__ContinuousMove = tptz__ContinuousMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_write___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_get___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_read___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (p)
	{	::soap_default___tptz__ContinuousMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition_DEFINED
#define SOAP_TYPE___tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetHomePosition(struct soap*, const char*, int, const struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_in___tptz__SetHomePosition(struct soap*, const char*, struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate___tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetHomePosition * soap_new___tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetHomePosition * soap_new_req___tptz__SetHomePosition(
	struct soap *soap)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetHomePosition * soap_new_set___tptz__SetHomePosition(
	struct soap *soap,
	_tptz__SetHomePosition *tptz__SetHomePosition)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
		_p->tptz__SetHomePosition = tptz__SetHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_write___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_get___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_read___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__SetHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE___tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoHomePosition(struct soap*, const char*, int, const struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_in___tptz__GotoHomePosition(struct soap*, const char*, struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate___tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoHomePosition * soap_new___tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoHomePosition * soap_new_req___tptz__GotoHomePosition(
	struct soap *soap)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoHomePosition * soap_new_set___tptz__GotoHomePosition(
	struct soap *soap,
	_tptz__GotoHomePosition *tptz__GotoHomePosition)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
		_p->tptz__GotoHomePosition = tptz__GotoHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_write___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_get___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__GotoHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurationOptions(struct soap*, const char*, int, const struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in___tptz__GetConfigurationOptions(struct soap*, const char*, struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurationOptions * soap_new___tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurationOptions * soap_new_req___tptz__GetConfigurationOptions(
	struct soap *soap)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurationOptions * soap_new_set___tptz__GetConfigurationOptions(
	struct soap *soap,
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
		_p->tptz__GetConfigurationOptions = tptz__GetConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_write___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration_DEFINED
#define SOAP_TYPE___tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfiguration(struct soap*, const char*, int, const struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_in___tptz__SetConfiguration(struct soap*, const char*, struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfiguration * soap_new___tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfiguration * soap_new_req___tptz__SetConfiguration(
	struct soap *soap)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfiguration * soap_new_set___tptz__SetConfiguration(
	struct soap *soap,
	_tptz__SetConfiguration *tptz__SetConfiguration)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
		_p->tptz__SetConfiguration = tptz__SetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_write___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_get___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_read___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__SetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNode_DEFINED
#define SOAP_TYPE___tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNode(struct soap*, struct __tptz__GetNode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNode(struct soap*, const struct __tptz__GetNode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNode(struct soap*, const char*, int, const struct __tptz__GetNode *, const char*);
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_in___tptz__GetNode(struct soap*, const char*, struct __tptz__GetNode *, const char*);
SOAP_FMAC1 struct __tptz__GetNode * SOAP_FMAC2 soap_instantiate___tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNode * soap_new___tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNode * soap_new_req___tptz__GetNode(
	struct soap *soap)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNode * soap_new_set___tptz__GetNode(
	struct soap *soap,
	_tptz__GetNode *tptz__GetNode)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
		_p->tptz__GetNode = tptz__GetNode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNode(struct soap*, const struct __tptz__GetNode *, const char*, const char*);

inline int soap_write___tptz__GetNode(struct soap *soap, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_get___tptz__GetNode(struct soap*, struct __tptz__GetNode *, const char*, const char*);

inline int soap_read___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (p)
	{	::soap_default___tptz__GetNode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNodes_DEFINED
#define SOAP_TYPE___tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNodes(struct soap*, const char*, int, const struct __tptz__GetNodes *, const char*);
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_in___tptz__GetNodes(struct soap*, const char*, struct __tptz__GetNodes *, const char*);
SOAP_FMAC1 struct __tptz__GetNodes * SOAP_FMAC2 soap_instantiate___tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNodes * soap_new___tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNodes * soap_new_req___tptz__GetNodes(
	struct soap *soap)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNodes * soap_new_set___tptz__GetNodes(
	struct soap *soap,
	_tptz__GetNodes *tptz__GetNodes)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
		_p->tptz__GetNodes = tptz__GetNodes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *, const char*, const char*);

inline int soap_write___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_get___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *, const char*, const char*);

inline int soap_read___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (p)
	{	::soap_default___tptz__GetNodes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration_DEFINED
#define SOAP_TYPE___tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfiguration(struct soap*, const char*, int, const struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_in___tptz__GetConfiguration(struct soap*, const char*, struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfiguration * soap_new___tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfiguration * soap_new_req___tptz__GetConfiguration(
	struct soap *soap)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfiguration * soap_new_set___tptz__GetConfiguration(
	struct soap *soap,
	_tptz__GetConfiguration *tptz__GetConfiguration)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
		_p->tptz__GetConfiguration = tptz__GetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_write___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_get___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_read___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__GetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetStatus_DEFINED
#define SOAP_TYPE___tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetStatus(struct soap*, const char*, int, const struct __tptz__GetStatus *, const char*);
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_in___tptz__GetStatus(struct soap*, const char*, struct __tptz__GetStatus *, const char*);
SOAP_FMAC1 struct __tptz__GetStatus * SOAP_FMAC2 soap_instantiate___tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetStatus * soap_new___tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetStatus * soap_new_req___tptz__GetStatus(
	struct soap *soap)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetStatus * soap_new_set___tptz__GetStatus(
	struct soap *soap,
	_tptz__GetStatus *tptz__GetStatus)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
		_p->tptz__GetStatus = tptz__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *, const char*, const char*);

inline int soap_write___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_get___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *, const char*, const char*);

inline int soap_read___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (p)
	{	::soap_default___tptz__GetStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset_DEFINED
#define SOAP_TYPE___tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoPreset(struct soap*, const char*, int, const struct __tptz__GotoPreset *, const char*);
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_in___tptz__GotoPreset(struct soap*, const char*, struct __tptz__GotoPreset *, const char*);
SOAP_FMAC1 struct __tptz__GotoPreset * SOAP_FMAC2 soap_instantiate___tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoPreset * soap_new___tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoPreset * soap_new_req___tptz__GotoPreset(
	struct soap *soap)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoPreset * soap_new_set___tptz__GotoPreset(
	struct soap *soap,
	_tptz__GotoPreset *tptz__GotoPreset)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
		_p->tptz__GotoPreset = tptz__GotoPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_write___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_get___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_read___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (p)
	{	::soap_default___tptz__GotoPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset_DEFINED
#define SOAP_TYPE___tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePreset(struct soap*, const char*, int, const struct __tptz__RemovePreset *, const char*);
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_in___tptz__RemovePreset(struct soap*, const char*, struct __tptz__RemovePreset *, const char*);
SOAP_FMAC1 struct __tptz__RemovePreset * SOAP_FMAC2 soap_instantiate___tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePreset * soap_new___tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePreset * soap_new_req___tptz__RemovePreset(
	struct soap *soap)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePreset * soap_new_set___tptz__RemovePreset(
	struct soap *soap,
	_tptz__RemovePreset *tptz__RemovePreset)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
		_p->tptz__RemovePreset = tptz__RemovePreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_write___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_get___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_read___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (p)
	{	::soap_default___tptz__RemovePreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetPreset_DEFINED
#define SOAP_TYPE___tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetPreset(struct soap*, const char*, int, const struct __tptz__SetPreset *, const char*);
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_in___tptz__SetPreset(struct soap*, const char*, struct __tptz__SetPreset *, const char*);
SOAP_FMAC1 struct __tptz__SetPreset * SOAP_FMAC2 soap_instantiate___tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetPreset * soap_new___tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetPreset * soap_new_req___tptz__SetPreset(
	struct soap *soap)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetPreset * soap_new_set___tptz__SetPreset(
	struct soap *soap,
	_tptz__SetPreset *tptz__SetPreset)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
		_p->tptz__SetPreset = tptz__SetPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *, const char*, const char*);

inline int soap_write___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_get___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *, const char*, const char*);

inline int soap_read___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (p)
	{	::soap_default___tptz__SetPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresets_DEFINED
#define SOAP_TYPE___tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresets(struct soap*, const char*, int, const struct __tptz__GetPresets *, const char*);
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_in___tptz__GetPresets(struct soap*, const char*, struct __tptz__GetPresets *, const char*);
SOAP_FMAC1 struct __tptz__GetPresets * SOAP_FMAC2 soap_instantiate___tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresets * soap_new___tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresets * soap_new_req___tptz__GetPresets(
	struct soap *soap)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresets * soap_new_set___tptz__GetPresets(
	struct soap *soap,
	_tptz__GetPresets *tptz__GetPresets)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
		_p->tptz__GetPresets = tptz__GetPresets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *, const char*, const char*);

inline int soap_write___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_get___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *, const char*, const char*);

inline int soap_read___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (p)
	{	::soap_default___tptz__GetPresets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurations(struct soap*, const char*, int, const struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_in___tptz__GetConfigurations(struct soap*, const char*, struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurations * soap_new___tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurations * soap_new_req___tptz__GetConfigurations(
	struct soap *soap)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurations * soap_new_set___tptz__GetConfigurations(
	struct soap *soap,
	_tptz__GetConfigurations *tptz__GetConfigurations)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
		_p->tptz__GetConfigurations = tptz__GetConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_get___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetServiceCapabilities(struct soap*, const char*, int, const struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in___tptz__GetServiceCapabilities(struct soap*, const char*, struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetServiceCapabilities * soap_new___tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetServiceCapabilities * soap_new_req___tptz__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetServiceCapabilities * soap_new_set___tptz__GetServiceCapabilities(
	struct soap *soap,
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
		_p->tptz__GetServiceCapabilities = tptz__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, int, const struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_in___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC1 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC2 soap_instantiate___tptz__SetConfigurationResponse_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfigurationResponse_sequence * soap_new___tptz__SetConfigurationResponse_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfigurationResponse_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_req___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_set___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_write___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_get___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_read___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfigurationResponse_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(
	struct soap *soap)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(
	struct soap *soap,
	struct SOAP_ENV__Header *SOAP_ENV__Header,
	char *SOAP_ENV__Body)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
		_p->SOAP_ENV__Header = SOAP_ENV__Header;
		_p->SOAP_ENV__Body = SOAP_ENV__Body;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_write_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_read_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Envelope(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xop__Include_DEFINED
#define SOAP_TYPE__xop__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, const struct _xop__Include *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__xop__Include2s(struct soap*, struct _xop__Include);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_xop__Include(struct soap*, const char*, struct _xop__Include *);
SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

inline struct _xop__Include * soap_new_req__xop__Include(
	struct soap *soap)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
	}
	return _p;
}

inline struct _xop__Include * soap_new_set__xop__Include(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
		_p->id = id;
		_p->type = type;
		_p->options = options;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

inline int soap_write__xop__Include(struct soap *soap, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

inline int soap_read__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (p)
	{	::soap_default__xop__Include(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xop__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xop__Include(struct soap *soap, const char *URL, struct _xop__Include *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__union_ColorOptions_DEFINED
#define SOAP_TYPE__tt__union_ColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 union _tt__union_ColorOptions * SOAP_FMAC4 soap_in__tt__union_ColorOptions(struct soap*, int*, union _tt__union_ColorOptions *);
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _tt__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__tt__union_PTZPresetTourPresetDetail(struct soap*, int*, union _tt__union_PTZPresetTourPresetDetail *);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__DeleteOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__DeleteOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__DeleteOSD(struct soap*, const char *, int, _trt__DeleteOSD *const*, const char *);
SOAP_FMAC3 _trt__DeleteOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__DeleteOSD(struct soap*, const char*, _trt__DeleteOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__DeleteOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__DeleteOSD(struct soap*, _trt__DeleteOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__CreateOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__CreateOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__CreateOSD(struct soap*, const char *, int, _trt__CreateOSD *const*, const char *);
SOAP_FMAC3 _trt__CreateOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__CreateOSD(struct soap*, const char*, _trt__CreateOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__CreateOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__CreateOSD(struct soap*, _trt__CreateOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetOSD(struct soap*, const char *, int, _trt__SetOSD *const*, const char *);
SOAP_FMAC3 _trt__SetOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__SetOSD(struct soap*, const char*, _trt__SetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__SetOSD(struct soap*, _trt__SetOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSDOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSDOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSDOptions(struct soap*, const char *, int, _trt__GetOSDOptions *const*, const char *);
SOAP_FMAC3 _trt__GetOSDOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSDOptions(struct soap*, const char*, _trt__GetOSDOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSDOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSDOptions(struct soap*, _trt__GetOSDOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSD_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSD(struct soap*, const char *, int, _trt__GetOSD *const*, const char *);
SOAP_FMAC3 _trt__GetOSD ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSD(struct soap*, const char*, _trt__GetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSD ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSD(struct soap*, _trt__GetOSD **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetOSDs_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetOSDs(struct soap*, const char *, int, _trt__GetOSDs *const*, const char *);
SOAP_FMAC3 _trt__GetOSDs ** SOAP_FMAC4 soap_in_PointerTo_trt__GetOSDs(struct soap*, const char*, _trt__GetOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetOSDs ** SOAP_FMAC4 soap_get_PointerTo_trt__GetOSDs(struct soap*, _trt__GetOSDs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceMode_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoSourceMode(struct soap*, const char *, int, _trt__SetVideoSourceMode *const*, const char *);
SOAP_FMAC3 _trt__SetVideoSourceMode ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoSourceMode(struct soap*, const char*, _trt__SetVideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoSourceMode ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoSourceMode(struct soap*, _trt__SetVideoSourceMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceModes_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceModes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceModes(struct soap*, const char *, int, _trt__GetVideoSourceModes *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceModes ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceModes(struct soap*, const char*, _trt__GetVideoSourceModes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceModes ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceModes(struct soap*, _trt__GetVideoSourceModes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetSnapshotUri_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetSnapshotUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetSnapshotUri(struct soap*, const char *, int, _trt__GetSnapshotUri *const*, const char *);
SOAP_FMAC3 _trt__GetSnapshotUri ** SOAP_FMAC4 soap_in_PointerTo_trt__GetSnapshotUri(struct soap*, const char*, _trt__GetSnapshotUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetSnapshotUri ** SOAP_FMAC4 soap_get_PointerTo_trt__GetSnapshotUri(struct soap*, _trt__GetSnapshotUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetSynchronizationPoint(struct soap*, const char *, int, _trt__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _trt__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_trt__SetSynchronizationPoint(struct soap*, const char*, _trt__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_trt__SetSynchronizationPoint(struct soap*, _trt__SetSynchronizationPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__StopMulticastStreaming_DEFINED
#define SOAP_TYPE_PointerTo_trt__StopMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__StopMulticastStreaming(struct soap*, const char *, int, _trt__StopMulticastStreaming *const*, const char *);
SOAP_FMAC3 _trt__StopMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_trt__StopMulticastStreaming(struct soap*, const char*, _trt__StopMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming *const*, const char*, const char*);
SOAP_FMAC3 _trt__StopMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_trt__StopMulticastStreaming(struct soap*, _trt__StopMulticastStreaming **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__StartMulticastStreaming_DEFINED
#define SOAP_TYPE_PointerTo_trt__StartMulticastStreaming_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__StartMulticastStreaming(struct soap*, const char *, int, _trt__StartMulticastStreaming *const*, const char *);
SOAP_FMAC3 _trt__StartMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTo_trt__StartMulticastStreaming(struct soap*, const char*, _trt__StartMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming *const*, const char*, const char*);
SOAP_FMAC3 _trt__StartMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTo_trt__StartMulticastStreaming(struct soap*, _trt__StartMulticastStreaming **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetStreamUri_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetStreamUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetStreamUri(struct soap*, const char *, int, _trt__GetStreamUri *const*, const char *);
SOAP_FMAC3 _trt__GetStreamUri ** SOAP_FMAC4 soap_in_PointerTo_trt__GetStreamUri(struct soap*, const char*, _trt__GetStreamUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetStreamUri ** SOAP_FMAC4 soap_get_PointerTo_trt__GetStreamUri(struct soap*, _trt__GetStreamUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char *, int, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char *);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_in_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, const char*, _trt__GetGuaranteedNumberOfVideoEncoderInstances **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetGuaranteedNumberOfVideoEncoderInstances ** SOAP_FMAC4 soap_get_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, _trt__GetGuaranteedNumberOfVideoEncoderInstances **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfigurationOptions(struct soap*, _trt__GetAudioDecoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, const char*, _trt__GetAudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfigurationOptions(struct soap*, _trt__GetAudioOutputConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, const char *, int, _trt__GetMetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, const char*, _trt__GetMetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfigurationOptions(struct soap*, _trt__GetMetadataConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, const char*, _trt__GetAudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfigurationOptions(struct soap*, _trt__GetAudioEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, const char *, int, _trt__GetAudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, const char*, _trt__GetAudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfigurationOptions(struct soap*, _trt__GetAudioSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, const char *, int, _trt__GetVideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, const char*, _trt__GetVideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfigurationOptions(struct soap*, _trt__GetVideoEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, const char *, int, _trt__GetVideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, const char*, _trt__GetVideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfigurationOptions(struct soap*, _trt__GetVideoSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, const char *, int, _trt__SetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, const char*, _trt__SetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioDecoderConfiguration(struct soap*, _trt__SetAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, const char *, int, _trt__SetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, const char*, _trt__SetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioOutputConfiguration(struct soap*, _trt__SetAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetMetadataConfiguration(struct soap*, const char *, int, _trt__SetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetMetadataConfiguration(struct soap*, const char*, _trt__SetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetMetadataConfiguration(struct soap*, _trt__SetMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__SetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__SetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoAnalyticsConfiguration(struct soap*, _trt__SetVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, const char *, int, _trt__SetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, const char*, _trt__SetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioEncoderConfiguration(struct soap*, _trt__SetAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, const char *, int, _trt__SetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, const char*, _trt__SetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetAudioSourceConfiguration(struct soap*, _trt__SetAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, const char *, int, _trt__SetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, const char*, _trt__SetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoEncoderConfiguration(struct soap*, _trt__SetVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, const char *, int, _trt__SetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, const char*, _trt__SetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__SetVideoSourceConfiguration(struct soap*, _trt__SetVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioDecoderConfigurations(struct soap*, _trt__GetCompatibleAudioDecoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioOutputConfigurations(struct soap*, _trt__GetCompatibleAudioOutputConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, const char *, int, _trt__GetCompatibleMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, const char*, _trt__GetCompatibleMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleMetadataConfigurations(struct soap*, _trt__GetCompatibleMetadataConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, _trt__GetCompatibleVideoAnalyticsConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioSourceConfigurations(struct soap*, _trt__GetCompatibleAudioSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleAudioEncoderConfigurations(struct soap*, _trt__GetCompatibleAudioEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoSourceConfigurations(struct soap*, _trt__GetCompatibleVideoSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char *, int, _trt__GetCompatibleVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, const char*, _trt__GetCompatibleVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetCompatibleVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetCompatibleVideoEncoderConfigurations(struct soap*, _trt__GetCompatibleVideoEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, const char *, int, _trt__GetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, const char*, _trt__GetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfiguration(struct soap*, _trt__GetAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, const char *, int, _trt__GetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, const char*, _trt__GetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfiguration(struct soap*, _trt__GetAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfiguration(struct soap*, const char *, int, _trt__GetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfiguration(struct soap*, const char*, _trt__GetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfiguration(struct soap*, _trt__GetMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__GetVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, const char*, _trt__GetVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoAnalyticsConfiguration(struct soap*, _trt__GetVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, const char *, int, _trt__GetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, const char*, _trt__GetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfiguration(struct soap*, _trt__GetAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, const char *, int, _trt__GetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, const char*, _trt__GetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfiguration(struct soap*, _trt__GetAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, const char *, int, _trt__GetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, const char*, _trt__GetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfiguration(struct soap*, _trt__GetVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, const char *, int, _trt__GetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, const char*, _trt__GetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfiguration(struct soap*, _trt__GetVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, const char *, int, _trt__GetAudioDecoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, const char*, _trt__GetAudioDecoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioDecoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioDecoderConfigurations(struct soap*, _trt__GetAudioDecoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, const char *, int, _trt__GetAudioOutputConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, const char*, _trt__GetAudioOutputConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputConfigurations(struct soap*, _trt__GetAudioOutputConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetMetadataConfigurations(struct soap*, const char *, int, _trt__GetMetadataConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetMetadataConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetMetadataConfigurations(struct soap*, const char*, _trt__GetMetadataConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetMetadataConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetMetadataConfigurations(struct soap*, _trt__GetMetadataConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, const char *, int, _trt__GetVideoAnalyticsConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, const char*, _trt__GetVideoAnalyticsConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoAnalyticsConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoAnalyticsConfigurations(struct soap*, _trt__GetVideoAnalyticsConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, const char *, int, _trt__GetAudioEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, const char*, _trt__GetAudioEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioEncoderConfigurations(struct soap*, _trt__GetAudioEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, const char *, int, _trt__GetAudioSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, const char*, _trt__GetAudioSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSourceConfigurations(struct soap*, _trt__GetAudioSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, const char *, int, _trt__GetVideoEncoderConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, const char*, _trt__GetVideoEncoderConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoEncoderConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoEncoderConfigurations(struct soap*, _trt__GetVideoEncoderConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, const char *, int, _trt__GetVideoSourceConfigurations *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, const char*, _trt__GetVideoSourceConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSourceConfigurations ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSourceConfigurations(struct soap*, _trt__GetVideoSourceConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__DeleteProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__DeleteProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__DeleteProfile(struct soap*, const char *, int, _trt__DeleteProfile *const*, const char *);
SOAP_FMAC3 _trt__DeleteProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__DeleteProfile(struct soap*, const char*, _trt__DeleteProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__DeleteProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__DeleteProfile(struct soap*, _trt__DeleteProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, const char *, int, _trt__RemoveAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, const char*, _trt__RemoveAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioDecoderConfiguration(struct soap*, _trt__RemoveAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, const char *, int, _trt__RemoveAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, const char*, _trt__RemoveAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioOutputConfiguration(struct soap*, _trt__RemoveAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, const char *, int, _trt__RemoveMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, const char*, _trt__RemoveMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveMetadataConfiguration(struct soap*, _trt__RemoveMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__RemoveVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, const char*, _trt__RemoveVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoAnalyticsConfiguration(struct soap*, _trt__RemoveVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemovePTZConfiguration(struct soap*, const char *, int, _trt__RemovePTZConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemovePTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemovePTZConfiguration(struct soap*, const char*, _trt__RemovePTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemovePTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemovePTZConfiguration(struct soap*, _trt__RemovePTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, const char *, int, _trt__RemoveAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, const char*, _trt__RemoveAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioSourceConfiguration(struct soap*, _trt__RemoveAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, const char *, int, _trt__RemoveAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, const char*, _trt__RemoveAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveAudioEncoderConfiguration(struct soap*, _trt__RemoveAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, const char *, int, _trt__RemoveVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, const char*, _trt__RemoveVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoSourceConfiguration(struct soap*, _trt__RemoveVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, const char *, int, _trt__RemoveVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, const char*, _trt__RemoveVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__RemoveVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__RemoveVideoEncoderConfiguration(struct soap*, _trt__RemoveVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, const char *, int, _trt__AddAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, const char*, _trt__AddAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioDecoderConfiguration(struct soap*, _trt__AddAudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, const char *, int, _trt__AddAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, const char*, _trt__AddAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioOutputConfiguration(struct soap*, _trt__AddAudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddMetadataConfiguration(struct soap*, const char *, int, _trt__AddMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddMetadataConfiguration(struct soap*, const char*, _trt__AddMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddMetadataConfiguration(struct soap*, _trt__AddMetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, const char *, int, _trt__AddVideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, const char*, _trt__AddVideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoAnalyticsConfiguration(struct soap*, _trt__AddVideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddPTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddPTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddPTZConfiguration(struct soap*, const char *, int, _trt__AddPTZConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddPTZConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddPTZConfiguration(struct soap*, const char*, _trt__AddPTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddPTZConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddPTZConfiguration(struct soap*, _trt__AddPTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, const char *, int, _trt__AddAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, const char*, _trt__AddAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioSourceConfiguration(struct soap*, _trt__AddAudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, const char *, int, _trt__AddAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, const char*, _trt__AddAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddAudioEncoderConfiguration(struct soap*, _trt__AddAudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, const char *, int, _trt__AddVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, const char*, _trt__AddVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoSourceConfiguration(struct soap*, _trt__AddVideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, const char *, int, _trt__AddVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, const char*, _trt__AddVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _trt__AddVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_trt__AddVideoEncoderConfiguration(struct soap*, _trt__AddVideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetProfiles_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetProfiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetProfiles(struct soap*, const char *, int, _trt__GetProfiles *const*, const char *);
SOAP_FMAC3 _trt__GetProfiles ** SOAP_FMAC4 soap_in_PointerTo_trt__GetProfiles(struct soap*, const char*, _trt__GetProfiles **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetProfiles ** SOAP_FMAC4 soap_get_PointerTo_trt__GetProfiles(struct soap*, _trt__GetProfiles **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetProfile(struct soap*, const char *, int, _trt__GetProfile *const*, const char *);
SOAP_FMAC3 _trt__GetProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__GetProfile(struct soap*, const char*, _trt__GetProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__GetProfile(struct soap*, _trt__GetProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__CreateProfile_DEFINED
#define SOAP_TYPE_PointerTo_trt__CreateProfile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__CreateProfile(struct soap*, const char *, int, _trt__CreateProfile *const*, const char *);
SOAP_FMAC3 _trt__CreateProfile ** SOAP_FMAC4 soap_in_PointerTo_trt__CreateProfile(struct soap*, const char*, _trt__CreateProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile *const*, const char*, const char*);
SOAP_FMAC3 _trt__CreateProfile ** SOAP_FMAC4 soap_get_PointerTo_trt__CreateProfile(struct soap*, _trt__CreateProfile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputs_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioOutputs(struct soap*, const char *, int, _trt__GetAudioOutputs *const*, const char *);
SOAP_FMAC3 _trt__GetAudioOutputs ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioOutputs(struct soap*, const char*, _trt__GetAudioOutputs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioOutputs ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioOutputs(struct soap*, _trt__GetAudioOutputs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSources_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetAudioSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetAudioSources(struct soap*, const char *, int, _trt__GetAudioSources *const*, const char *);
SOAP_FMAC3 _trt__GetAudioSources ** SOAP_FMAC4 soap_in_PointerTo_trt__GetAudioSources(struct soap*, const char*, _trt__GetAudioSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetAudioSources ** SOAP_FMAC4 soap_get_PointerTo_trt__GetAudioSources(struct soap*, _trt__GetAudioSources **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSources_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetVideoSources_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetVideoSources(struct soap*, const char *, int, _trt__GetVideoSources *const*, const char *);
SOAP_FMAC3 _trt__GetVideoSources ** SOAP_FMAC4 soap_in_PointerTo_trt__GetVideoSources(struct soap*, const char*, _trt__GetVideoSources **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetVideoSources ** SOAP_FMAC4 soap_get_PointerTo_trt__GetVideoSources(struct soap*, _trt__GetVideoSources **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_trt__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_trt__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_trt__GetServiceCapabilities(struct soap*, const char *, int, _trt__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _trt__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_trt__GetServiceCapabilities(struct soap*, const char*, _trt__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _trt__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_trt__GetServiceCapabilities(struct soap*, _trt__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__MoveAndStartTracking(struct soap*, const char *, int, _tptz__MoveAndStartTracking *const*, const char *);
SOAP_FMAC3 _tptz__MoveAndStartTracking ** SOAP_FMAC4 soap_in_PointerTo_tptz__MoveAndStartTracking(struct soap*, const char*, _tptz__MoveAndStartTracking **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *const*, const char*, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTracking ** SOAP_FMAC4 soap_get_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char *, int, _tptz__GetCompatibleConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePresetTour(struct soap*, const char *, int, _tptz__RemovePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__OperatePresetTour(struct soap*, const char *, int, _tptz__OperatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ModifyPresetTour(struct soap*, const char *, int, _tptz__ModifyPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__CreatePresetTour(struct soap*, const char *, int, _tptz__CreatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char *, int, _tptz__GetPresetTourOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTour(struct soap*, const char *, int, _tptz__GetPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTours(struct soap*, const char *, int, _tptz__GetPresetTours *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
#define SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__Stop(struct soap*, const char *, int, _tptz__Stop *const*, const char *);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_in_PointerTo_tptz__Stop(struct soap*, const char*, _tptz__Stop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*, const char*, const char*);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_get_PointerTo_tptz__Stop(struct soap*, _tptz__Stop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GeoMove(struct soap*, const char *, int, _tptz__GeoMove *const*, const char *);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__AbsoluteMove(struct soap*, const char *, int, _tptz__AbsoluteMove *const*, const char *);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char *, int, _tptz__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RelativeMove(struct soap*, const char *, int, _tptz__RelativeMove *const*, const char *);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ContinuousMove(struct soap*, const char *, int, _tptz__ContinuousMove *const*, const char *);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetHomePosition(struct soap*, const char *, int, _tptz__SetHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoHomePosition(struct soap*, const char *, int, _tptz__GotoHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char *, int, _tptz__GetConfigurationOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetConfiguration(struct soap*, const char *, int, _tptz__SetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNode(struct soap*, const char *, int, _tptz__GetNode *const*, const char *);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNode(struct soap*, const char*, _tptz__GetNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNodes(struct soap*, const char *, int, _tptz__GetNodes *const*, const char *);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfiguration(struct soap*, const char *, int, _tptz__GetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetStatus(struct soap*, const char *, int, _tptz__GetStatus *const*, const char *);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoPreset(struct soap*, const char *, int, _tptz__GotoPreset *const*, const char *);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePreset(struct soap*, const char *, int, _tptz__RemovePreset *const*, const char *);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetPreset(struct soap*, const char *, int, _tptz__SetPreset *const*, const char *);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresets(struct soap*, const char *, int, _tptz__GetPresets *const*, const char *);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurations(struct soap*, const char *, int, _tptz__GetConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char *, int, _tptz__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationExtension(struct soap*, const char *, int, tt__OSDConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfiguration(struct soap*, const char *, int, tt__OSDImgConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfiguration(struct soap*, const char *, int, tt__OSDTextConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDPosConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDPosConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfiguration(struct soap*, const char *, int, tt__OSDPosConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDReference_DEFINED
#define SOAP_TYPE_PointerTott__OSDReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDReference(struct soap*, const char *, int, tt__OSDReference *const*, const char *);
SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_in_PointerTott__OSDReference(struct soap*, const char*, tt__OSDReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_get_PointerTott__OSDReference(struct soap*, tt__OSDReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension(struct soap*, const char *, int, tt__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
#define SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ZoomLimits(struct soap*, const char *, int, tt__ZoomLimits *const*, const char *);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTott__ZoomLimits(struct soap*, const char*, tt__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
#define SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PanTiltLimits(struct soap*, const char *, int, tt__PanTiltLimits *const*, const char *);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTott__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension(struct soap*, const char *, int, tt__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationExtension(struct soap*, const char *, int, tt__MetadataConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventSubscription_DEFINED
#define SOAP_TYPE_PointerTott__EventSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventSubscription(struct soap*, const char *, int, tt__EventSubscription *const*, const char *);
SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_in_PointerTott__EventSubscription(struct soap*, const char*, tt__EventSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*, const char*, const char*);
SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_get_PointerTott__EventSubscription(struct soap*, tt__EventSubscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZFilter_DEFINED
#define SOAP_TYPE_PointerTott__PTZFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZFilter(struct soap*, const char *, int, tt__PTZFilter *const*, const char *);
SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_in_PointerTott__PTZFilter(struct soap*, const char*, tt__PTZFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_get_PointerTott__PTZFilter(struct soap*, tt__PTZFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RuleEngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__RuleEngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfiguration(struct soap*, const char *, int, tt__RuleEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char *, int, tt__AnalyticsEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MulticastConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__MulticastConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MulticastConfiguration(struct soap*, const char *, int, tt__MulticastConfiguration *const*, const char *);
SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Configuration_DEFINED
#define SOAP_TYPE_PointerTott__H264Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Configuration(struct soap*, const char *, int, tt__H264Configuration *const*, const char *);
SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_in_PointerTott__H264Configuration(struct soap*, const char*, tt__H264Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_get_PointerTott__H264Configuration(struct soap*, tt__H264Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Configuration(struct soap*, const char *, int, tt__Mpeg4Configuration *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoRateControl_DEFINED
#define SOAP_TYPE_PointerTott__VideoRateControl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoRateControl(struct soap*, const char *, int, tt__VideoRateControl *const*, const char *);
SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_in_PointerTott__VideoRateControl(struct soap*, const char*, tt__VideoRateControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_get_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRectangle_DEFINED
#define SOAP_TYPE_PointerTott__IntRectangle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangle(struct soap*, const char *, int, tt__IntRectangle *const*, const char *);
SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_in_PointerTott__IntRectangle(struct soap*, const char*, tt__IntRectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_get_PointerTott__IntRectangle(struct soap*, tt__IntRectangle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension(struct soap*, const char *, int, tt__VideoSourceExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettings_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings(struct soap*, const char *, int, tt__ImagingSettings *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings(struct soap*, const char*, tt__ImagingSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptions(struct soap*, const char *, int, tt__OSDConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfiguration(struct soap*, const char *, int, tt__OSDConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__VideoSourceMode_DEFINED
#define SOAP_TYPE_PointerTotrt__VideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__VideoSourceMode(struct soap*, const char *, int, trt__VideoSourceMode *const*, const char *);
SOAP_FMAC3 trt__VideoSourceMode ** SOAP_FMAC4 soap_in_PointerTotrt__VideoSourceMode(struct soap*, const char*, trt__VideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode *const*, const char*, const char*);
SOAP_FMAC3 trt__VideoSourceMode ** SOAP_FMAC4 soap_get_PointerTotrt__VideoSourceMode(struct soap*, trt__VideoSourceMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaUri_DEFINED
#define SOAP_TYPE_PointerTott__MediaUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaUri(struct soap*, tt__MediaUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaUri(struct soap*, const char *, int, tt__MediaUri *const*, const char *);
SOAP_FMAC3 tt__MediaUri ** SOAP_FMAC4 soap_in_PointerTott__MediaUri(struct soap*, const char*, tt__MediaUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaUri(struct soap*, tt__MediaUri *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaUri ** SOAP_FMAC4 soap_get_PointerTott__MediaUri(struct soap*, tt__MediaUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StreamSetup_DEFINED
#define SOAP_TYPE_PointerTott__StreamSetup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StreamSetup(struct soap*, const char *, int, tt__StreamSetup *const*, const char *);
SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_in_PointerTott__StreamSetup(struct soap*, const char*, tt__StreamSetup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*, const char*, const char*);
SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_get_PointerTott__StreamSetup(struct soap*, tt__StreamSetup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char *, int, tt__AudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptions(struct soap*, const char *, int, tt__MetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char *, int, tt__AudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char *, int, tt__AudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderConfigurationOptions(struct soap*, const char *, int, tt__VideoEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderConfigurationOptions(struct soap*, const char*, tt__VideoEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char *, int, tt__VideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Profile_DEFINED
#define SOAP_TYPE_PointerTott__Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Profile(struct soap*, tt__Profile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Profile(struct soap*, const char *, int, tt__Profile *const*, const char *);
SOAP_FMAC3 tt__Profile ** SOAP_FMAC4 soap_in_PointerTott__Profile(struct soap*, const char*, tt__Profile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Profile(struct soap*, tt__Profile *const*, const char*, const char*);
SOAP_FMAC3 tt__Profile ** SOAP_FMAC4 soap_get_PointerTott__Profile(struct soap*, tt__Profile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutput_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutput(struct soap*, tt__AudioOutput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutput(struct soap*, const char *, int, tt__AudioOutput *const*, const char *);
SOAP_FMAC3 tt__AudioOutput ** SOAP_FMAC4 soap_in_PointerTott__AudioOutput(struct soap*, const char*, tt__AudioOutput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutput(struct soap*, tt__AudioOutput *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutput ** SOAP_FMAC4 soap_get_PointerTott__AudioOutput(struct soap*, tt__AudioOutput **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSource_DEFINED
#define SOAP_TYPE_PointerTott__AudioSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSource(struct soap*, tt__AudioSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSource(struct soap*, const char *, int, tt__AudioSource *const*, const char *);
SOAP_FMAC3 tt__AudioSource ** SOAP_FMAC4 soap_in_PointerTott__AudioSource(struct soap*, const char*, tt__AudioSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSource(struct soap*, tt__AudioSource *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSource ** SOAP_FMAC4 soap_get_PointerTott__AudioSource(struct soap*, tt__AudioSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSource_DEFINED
#define SOAP_TYPE_PointerTott__VideoSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSource(struct soap*, tt__VideoSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSource(struct soap*, const char *, int, tt__VideoSource *const*, const char *);
SOAP_FMAC3 tt__VideoSource ** SOAP_FMAC4 soap_in_PointerTott__VideoSource(struct soap*, const char*, tt__VideoSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSource(struct soap*, tt__VideoSource *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSource ** SOAP_FMAC4 soap_get_PointerTott__VideoSource(struct soap*, tt__VideoSource **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__Capabilities(struct soap*, trt__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__Capabilities(struct soap*, const char *, int, trt__Capabilities *const*, const char *);
SOAP_FMAC3 trt__Capabilities ** SOAP_FMAC4 soap_in_PointerTotrt__Capabilities(struct soap*, const char*, trt__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__Capabilities(struct soap*, trt__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__Capabilities ** SOAP_FMAC4 soap_get_PointerTotrt__Capabilities(struct soap*, trt__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__VideoSourceModeExtension_DEFINED
#define SOAP_TYPE_PointerTotrt__VideoSourceModeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__VideoSourceModeExtension(struct soap*, const char *, int, trt__VideoSourceModeExtension *const*, const char *);
SOAP_FMAC3 trt__VideoSourceModeExtension ** SOAP_FMAC4 soap_in_PointerTotrt__VideoSourceModeExtension(struct soap*, const char*, trt__VideoSourceModeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension *const*, const char*, const char*);
SOAP_FMAC3 trt__VideoSourceModeExtension ** SOAP_FMAC4 soap_get_PointerTotrt__VideoSourceModeExtension(struct soap*, trt__VideoSourceModeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Description_DEFINED
#define SOAP_TYPE_PointerTott__Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Description(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Description(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Description(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Description(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Description(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__StreamingCapabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__StreamingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__StreamingCapabilities(struct soap*, const char *, int, trt__StreamingCapabilities *const*, const char *);
SOAP_FMAC3 trt__StreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTotrt__StreamingCapabilities(struct soap*, const char*, trt__StreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__StreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTotrt__StreamingCapabilities(struct soap*, trt__StreamingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotrt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_PointerTotrt__ProfileCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotrt__ProfileCapabilities(struct soap*, const char *, int, trt__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 trt__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTotrt__ProfileCapabilities(struct soap*, const char*, trt__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities *const*, const char*, const char*);
SOAP_FMAC3 trt__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTotrt__ProfileCapabilities(struct soap*, trt__ProfileCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__MoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MoveStatus(struct soap*, const char *, int, enum tt__MoveStatus *const*, const char *);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_in_PointerTott__MoveStatus(struct soap*, const char*, enum tt__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*, const char*, const char*);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_get_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZMoveStatus(struct soap*, const char *, int, tt__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char *, int, tt__OSDConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptions(struct soap*, const char *, int, tt__OSDImgOptions *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptions(struct soap*, const char *, int, tt__OSDTextOptions *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MaximumNumberOfOSDs_DEFINED
#define SOAP_TYPE_PointerTott__MaximumNumberOfOSDs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MaximumNumberOfOSDs(struct soap*, const char *, int, tt__MaximumNumberOfOSDs *const*, const char *);
SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_in_PointerTott__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*, const char*, const char*);
SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_get_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptionsExtension(struct soap*, const char *, int, tt__OSDImgOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptionsExtension(struct soap*, const char *, int, tt__OSDTextOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColorOptions_DEFINED
#define SOAP_TYPE_PointerTott__OSDColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptions(struct soap*, const char *, int, tt__OSDColorOptions *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColorOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDColorOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptionsExtension(struct soap*, const char *, int, tt__OSDColorOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorOptions_DEFINED
#define SOAP_TYPE_PointerTott__ColorOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorOptions(struct soap*, const char *, int, tt__ColorOptions *const*, const char *);
SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_in_PointerTott__ColorOptions(struct soap*, const char*, tt__ColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_get_PointerTott__ColorOptions(struct soap*, tt__ColorOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char *, int, std::vector<tt__ColorspaceRange *> *const*, const char *);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_PointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorspaceRange(struct soap*, const char *, int, tt__ColorspaceRange *const*, const char *);
SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_in_PointerTott__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*, const char*, const char*);
SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_get_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char *, int, std::vector<tt__Color *> *const*, const char *);
SOAP_FMAC3 std::vector<tt__Color *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<tt__Color *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDImgConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDImgConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfigurationExtension(struct soap*, const char *, int, tt__OSDImgConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDTextConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDTextConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfigurationExtension(struct soap*, const char *, int, tt__OSDTextConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDColor_DEFINED
#define SOAP_TYPE_PointerTott__OSDColor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColor(struct soap*, const char *, int, tt__OSDColor *const*, const char *);
SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_in_PointerTott__OSDColor(struct soap*, const char*, tt__OSDColor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_get_PointerTott__OSDColor(struct soap*, tt__OSDColor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Color_DEFINED
#define SOAP_TYPE_PointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Color(struct soap*, tt__Color *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Color(struct soap*, const char *, int, tt__Color *const*, const char *);
SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_in_PointerTott__Color(struct soap*, const char*, tt__Color **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Color(struct soap*, tt__Color *const*, const char*, const char*);
SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_get_PointerTott__Color(struct soap*, tt__Color **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OSDPosConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__OSDPosConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfigurationExtension(struct soap*, const char *, int, tt__OSDPosConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector_DEFINED
#define SOAP_TYPE_PointerTott__Vector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector(struct soap*, tt__Vector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector(struct soap*, const char *, int, tt__Vector *const*, const char *);
SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_in_PointerTott__Vector(struct soap*, const char*, tt__Vector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector(struct soap*, tt__Vector *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_get_PointerTott__Vector(struct soap*, tt__Vector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemList_DEFINED
#define SOAP_TYPE_PointerTott__ItemList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemList(struct soap*, tt__ItemList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemList(struct soap*, const char *, int, tt__ItemList *const*, const char *);
SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_in_PointerTott__ItemList(struct soap*, const char*, tt__ItemList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemList(struct soap*, tt__ItemList *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_get_PointerTott__ItemList(struct soap*, tt__ItemList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char *, int, tt__RuleEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char *, int, tt__AnalyticsEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Config_DEFINED
#define SOAP_TYPE_PointerTott__Config_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Config(struct soap*, tt__Config *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Config(struct soap*, const char *, int, tt__Config *const*, const char *);
SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_in_PointerTott__Config(struct soap*, const char*, tt__Config **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Config(struct soap*, tt__Config *const*, const char*, const char*);
SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_get_PointerTott__Config(struct soap*, tt__Config **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ItemListExtension_DEFINED
#define SOAP_TYPE_PointerTott__ItemListExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListExtension(struct soap*, const char *, int, tt__ItemListExtension *const*, const char *);
SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_in_PointerTott__ItemListExtension(struct soap*, const char*, tt__ItemListExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_get_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringAttrList_DEFINED
#define SOAP_TYPE_PointerTott__StringAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20Extension_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20Extension(struct soap*, const char *, int, tt__FocusConfiguration20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance20Extension_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance20Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20Extension(struct soap*, const char *, int, tt__WhiteBalance20Extension *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DefoggingExtension_DEFINED
#define SOAP_TYPE_PointerTott__DefoggingExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DefoggingExtension(struct soap*, const char *, int, tt__DefoggingExtension *const*, const char *);
SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_in_PointerTott__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_get_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ToneCompensationExtension_DEFINED
#define SOAP_TYPE_PointerTott__ToneCompensationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensationExtension(struct soap*, const char *, int, tt__ToneCompensationExtension *const*, const char *);
SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ExposurePriority_DEFINED
#define SOAP_TYPE_PointerTott__ExposurePriority_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposurePriority(struct soap*, const char *, int, enum tt__ExposurePriority *const*, const char *);
SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_in_PointerTott__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*, const char*, const char*);
SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_get_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentExtension *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilizationExtension_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilizationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationExtension(struct soap*, const char *, int, tt__ImageStabilizationExtension *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension204_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension204_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension204(struct soap*, const char *, int, tt__ImagingSettingsExtension204 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NoiseReduction_DEFINED
#define SOAP_TYPE_PointerTott__NoiseReduction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NoiseReduction(struct soap*, const char *, int, tt__NoiseReduction *const*, const char *);
SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_in_PointerTott__NoiseReduction(struct soap*, const char*, tt__NoiseReduction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*, const char*, const char*);
SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_get_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Defogging_DEFINED
#define SOAP_TYPE_PointerTott__Defogging_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Defogging(struct soap*, tt__Defogging *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Defogging(struct soap*, const char *, int, tt__Defogging *const*, const char *);
SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_in_PointerTott__Defogging(struct soap*, const char*, tt__Defogging **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Defogging(struct soap*, tt__Defogging *const*, const char*, const char*);
SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_get_PointerTott__Defogging(struct soap*, tt__Defogging **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ToneCompensation_DEFINED
#define SOAP_TYPE_PointerTott__ToneCompensation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensation(struct soap*, const char *, int, tt__ToneCompensation *const*, const char *);
SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensation(struct soap*, const char*, tt__ToneCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*, const char*, const char*);
SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension203_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension203_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension203(struct soap*, const char *, int, tt__ImagingSettingsExtension203 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustment *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*, const char*, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension202_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension202_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension202(struct soap*, const char *, int, tt__ImagingSettingsExtension202 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImageStabilization_DEFINED
#define SOAP_TYPE_PointerTott__ImageStabilization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilization(struct soap*, const char *, int, tt__ImageStabilization *const*, const char *);
SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilization(struct soap*, const char*, tt__ImageStabilization **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*, const char*, const char*);
SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension20_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension20(struct soap*, const char *, int, tt__ImagingSettingsExtension20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance20_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20(struct soap*, const char *, int, tt__WhiteBalance20 *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRange20_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRange20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange20(struct soap*, const char *, int, tt__WideDynamicRange20 *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20(struct soap*, const char *, int, tt__FocusConfiguration20 *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Exposure20_DEFINED
#define SOAP_TYPE_PointerTott__Exposure20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure20(struct soap*, const char *, int, tt__Exposure20 *const*, const char *);
SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_in_PointerTott__Exposure20(struct soap*, const char*, tt__Exposure20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*, const char*, const char*);
SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_get_PointerTott__Exposure20(struct soap*, tt__Exposure20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensation20_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensation20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation20(struct soap*, const char *, int, tt__BacklightCompensation20 *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Rectangle_DEFINED
#define SOAP_TYPE_PointerTott__Rectangle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rectangle(struct soap*, const char *, int, tt__Rectangle *const*, const char *);
SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_in_PointerTott__Rectangle(struct soap*, const char*, tt__Rectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*, const char*, const char*);
SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_get_PointerTott__Rectangle(struct soap*, tt__Rectangle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension(struct soap*, const char *, int, tt__ImagingSettingsExtension *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WhiteBalance_DEFINED
#define SOAP_TYPE_PointerTott__WhiteBalance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance(struct soap*, const char *, int, tt__WhiteBalance *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance(struct soap*, const char*, tt__WhiteBalance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*, const char*, const char*);
SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__WideDynamicRange_DEFINED
#define SOAP_TYPE_PointerTott__WideDynamicRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange(struct soap*, const char *, int, tt__WideDynamicRange *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*, const char*, const char*);
SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IrCutFilterMode_DEFINED
#define SOAP_TYPE_PointerTott__IrCutFilterMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterMode(struct soap*, const char *, int, enum tt__IrCutFilterMode *const*, const char *);
SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*, const char*, const char*);
SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FocusConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__FocusConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration(struct soap*, const char *, int, tt__FocusConfiguration *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Exposure_DEFINED
#define SOAP_TYPE_PointerTott__Exposure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure(struct soap*, tt__Exposure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure(struct soap*, const char *, int, tt__Exposure *const*, const char *);
SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_in_PointerTott__Exposure(struct soap*, const char*, tt__Exposure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure(struct soap*, tt__Exposure *const*, const char*, const char*);
SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_get_PointerTott__Exposure(struct soap*, tt__Exposure **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BacklightCompensation_DEFINED
#define SOAP_TYPE_PointerTott__BacklightCompensation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation(struct soap*, const char *, int, tt__BacklightCompensation *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*, const char*, const char*);
SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char *, int, tt__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourDirection(struct soap*, const char *, int, enum tt__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*, const char*, const char*);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char *, int, tt__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char *, int, tt__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char *, int, tt__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char *, int, tt__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourExtension(struct soap*, const char *, int, tt__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpot(struct soap*, const char *, int, tt__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char *, int, tt__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatus(struct soap*, const char *, int, tt__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Name_DEFINED
#define SOAP_TYPE_PointerTott__Name_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Name(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Name(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector1D_DEFINED
#define SOAP_TYPE_PointerTott__Vector1D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector1D(struct soap*, const char *, int, tt__Vector1D *const*, const char *);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_in_PointerTott__Vector1D(struct soap*, const char*, tt__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_get_PointerTott__Vector1D(struct soap*, tt__Vector1D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector2D_DEFINED
#define SOAP_TYPE_PointerTott__Vector2D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector2D(struct soap*, const char *, int, tt__Vector2D *const*, const char *);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_in_PointerTott__Vector2D(struct soap*, const char*, tt__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_get_PointerTott__Vector2D(struct soap*, tt__Vector2D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FloatRange_DEFINED
#define SOAP_TYPE_PointerTott__FloatRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatRange(struct soap*, const char *, int, tt__FloatRange *const*, const char *);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_in_PointerTott__FloatRange(struct soap*, const char*, tt__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*, const char*, const char*);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_get_PointerTott__FloatRange(struct soap*, tt__FloatRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpacesExtension(struct soap*, const char *, int, tt__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space1DDescription(struct soap*, const char *, int, tt__Space1DDescription *const*, const char *);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space1DDescription(struct soap*, const char*, tt__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space2DDescription(struct soap*, const char *, int, tt__Space2DDescription *const*, const char *);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space2DDescription(struct soap*, const char*, tt__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptionsExtension(struct soap*, const char *, int, tt__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptionsExtension(struct soap*, const char *, int, tt__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char *, int, tt__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptions(struct soap*, const char *, int, tt__ReverseOptions *const*, const char *);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptions(struct soap*, const char*, tt__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptions(struct soap*, const char *, int, tt__EFlipOptions *const*, const char *);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptions(struct soap*, const char*, tt__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntAttrList_DEFINED
#define SOAP_TYPE_PointerTott__IntAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions2(struct soap*, const char *, int, tt__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptions(struct soap*, const char *, int, tt__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DurationRange_DEFINED
#define SOAP_TYPE_PointerTott__DurationRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DurationRange(struct soap*, const char *, int, tt__DurationRange *const*, const char *);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_in_PointerTott__DurationRange(struct soap*, const char*, tt__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_get_PointerTott__DurationRange(struct soap*, tt__DurationRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpaces(struct soap*, const char *, int, tt__PTZSpaces *const*, const char *);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTott__PTZSpaces(struct soap*, const char*, tt__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionExtension(struct soap*, const char *, int, tt__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Reverse_DEFINED
#define SOAP_TYPE_PointerTott__Reverse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Reverse(struct soap*, tt__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Reverse(struct soap*, const char *, int, tt__Reverse *const*, const char *);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_in_PointerTott__Reverse(struct soap*, const char*, tt__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Reverse(struct soap*, tt__Reverse *const*, const char*, const char*);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_get_PointerTott__Reverse(struct soap*, tt__Reverse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlip_DEFINED
#define SOAP_TYPE_PointerTott__EFlip_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlip(struct soap*, tt__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlip(struct soap*, const char *, int, tt__EFlip *const*, const char *);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_in_PointerTott__EFlip(struct soap*, const char*, tt__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlip(struct soap*, tt__EFlip *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_get_PointerTott__EFlip(struct soap*, tt__EFlip **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension2(struct soap*, const char *, int, tt__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirection(struct soap*, const char *, int, tt__PTControlDirection *const*, const char *);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirection(struct soap*, const char*, tt__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char *, int, tt__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension2(struct soap*, const char *, int, tt__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupported(struct soap*, const char *, int, tt__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv6Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv6Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv4Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv4Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Transport_DEFINED
#define SOAP_TYPE_PointerTott__Transport_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Transport(struct soap*, tt__Transport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Transport(struct soap*, const char *, int, tt__Transport *const*, const char *);
SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_in_PointerTott__Transport(struct soap*, const char*, tt__Transport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Transport(struct soap*, tt__Transport *const*, const char*, const char*);
SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_get_PointerTott__Transport(struct soap*, tt__Transport **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddress_DEFINED
#define SOAP_TYPE_PointerTott__IPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddress(struct soap*, const char *, int, tt__IPAddress *const*, const char *);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_in_PointerTott__IPAddress(struct soap*, const char*, tt__IPAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_get_PointerTott__IPAddress(struct soap*, tt__IPAddress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__G726DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__G726DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G726DecOptions(struct soap*, const char *, int, tt__G726DecOptions *const*, const char *);
SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G726DecOptions(struct soap*, const char*, tt__G726DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__G711DecOptions_DEFINED
#define SOAP_TYPE_PointerTott__G711DecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G711DecOptions(struct soap*, const char *, int, tt__G711DecOptions *const*, const char *);
SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G711DecOptions(struct soap*, const char*, tt__G711DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AACDecOptions_DEFINED
#define SOAP_TYPE_PointerTott__AACDecOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AACDecOptions(struct soap*, const char *, int, tt__AACDecOptions *const*, const char *);
SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_in_PointerTott__AACDecOptions(struct soap*, const char*, tt__AACDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_get_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char *, int, tt__PTZStatusFilterOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptions(struct soap*, const char *, int, tt__PTZStatusFilterOptions *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char *, int, _tt__EventSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
#define SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap*, const char *, int, wsnt__FilterType *const*, const char *);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap*, const char*, wsnt__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char *, int, tt__AudioEncoderConfigurationOption *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceOptionsExtension(struct soap*, const char *, int, tt__AudioSourceOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoResolution_DEFINED
#define SOAP_TYPE_PointerTott__VideoResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoResolution(struct soap*, const char *, int, tt__VideoResolution *const*, const char *);
SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_in_PointerTott__VideoResolution(struct soap*, const char*, tt__VideoResolution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_get_PointerTott__VideoResolution(struct soap*, tt__VideoResolution **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Options2_DEFINED
#define SOAP_TYPE_PointerTott__H264Options2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options2(struct soap*, const char *, int, tt__H264Options2 *const*, const char *);
SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_in_PointerTott__H264Options2(struct soap*, const char*, tt__H264Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_get_PointerTott__H264Options2(struct soap*, tt__H264Options2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Options2_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Options2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options2(struct soap*, const char *, int, tt__Mpeg4Options2 *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__JpegOptions2_DEFINED
#define SOAP_TYPE_PointerTott__JpegOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions2(struct soap*, const char *, int, tt__JpegOptions2 *const*, const char *);
SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__H264Options_DEFINED
#define SOAP_TYPE_PointerTott__H264Options_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options(struct soap*, tt__H264Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options(struct soap*, const char *, int, tt__H264Options *const*, const char *);
SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_in_PointerTott__H264Options(struct soap*, const char*, tt__H264Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options(struct soap*, tt__H264Options *const*, const char*, const char*);
SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_get_PointerTott__H264Options(struct soap*, tt__H264Options **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Mpeg4Options_DEFINED
#define SOAP_TYPE_PointerTott__Mpeg4Options_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options(struct soap*, const char *, int, tt__Mpeg4Options *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*, const char*, const char*);
SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__JpegOptions_DEFINED
#define SOAP_TYPE_PointerTott__JpegOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions(struct soap*, const char *, int, tt__JpegOptions *const*, const char *);
SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions(struct soap*, const char*, tt__JpegOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions(struct soap*, tt__JpegOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__RotateOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptionsExtension(struct soap*, const char *, int, tt__RotateOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntItems_DEFINED
#define SOAP_TYPE_PointerTott__IntItems_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntItems(struct soap*, tt__IntItems *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntItems(struct soap*, const char *, int, tt__IntItems *const*, const char *);
SOAP_FMAC3 tt__IntItems ** SOAP_FMAC4 soap_in_PointerTott__IntItems(struct soap*, const char*, tt__IntItems **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntItems(struct soap*, tt__IntItems *const*, const char*, const char*);
SOAP_FMAC3 tt__IntItems ** SOAP_FMAC4 soap_get_PointerTott__IntItems(struct soap*, tt__IntItems **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateOptions_DEFINED
#define SOAP_TYPE_PointerTott__RotateOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptions(struct soap*, const char *, int, tt__RotateOptions *const*, const char *);
SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_in_PointerTott__RotateOptions(struct soap*, const char*, tt__RotateOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_get_PointerTott__RotateOptions(struct soap*, tt__RotateOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRectangleRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRectangleRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangleRange(struct soap*, const char *, int, tt__IntRectangleRange *const*, const char *);
SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_in_PointerTott__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_get_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensProjection_DEFINED
#define SOAP_TYPE_PointerTott__LensProjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensProjection(struct soap*, const char *, int, tt__LensProjection *const*, const char *);
SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_in_PointerTott__LensProjection(struct soap*, const char*, tt__LensProjection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*, const char*, const char*);
SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_get_PointerTott__LensProjection(struct soap*, tt__LensProjection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensOffset_DEFINED
#define SOAP_TYPE_PointerTott__LensOffset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensOffset(struct soap*, const char *, int, tt__LensOffset *const*, const char *);
SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_in_PointerTott__LensOffset(struct soap*, const char*, tt__LensOffset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*, const char*, const char*);
SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_get_PointerTott__LensOffset(struct soap*, tt__LensOffset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RotateExtension_DEFINED
#define SOAP_TYPE_PointerTott__RotateExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateExtension(struct soap*, const char *, int, tt__RotateExtension *const*, const char *);
SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateExtension(struct soap*, const char*, tt__RotateExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateExtension(struct soap*, tt__RotateExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SceneOrientation_DEFINED
#define SOAP_TYPE_PointerTott__SceneOrientation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SceneOrientation(struct soap*, const char *, int, tt__SceneOrientation *const*, const char *);
SOAP_FMAC3 tt__SceneOrientation ** SOAP_FMAC4 soap_in_PointerTott__SceneOrientation(struct soap*, const char*, tt__SceneOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation *const*, const char*, const char*);
SOAP_FMAC3 tt__SceneOrientation ** SOAP_FMAC4 soap_get_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LensDescription_DEFINED
#define SOAP_TYPE_PointerTott__LensDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensDescription(struct soap*, const char *, int, tt__LensDescription *const*, const char *);
SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_in_PointerTott__LensDescription(struct soap*, const char*, tt__LensDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_get_PointerTott__LensDescription(struct soap*, tt__LensDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Rotate_DEFINED
#define SOAP_TYPE_PointerTott__Rotate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rotate(struct soap*, tt__Rotate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rotate(struct soap*, const char *, int, tt__Rotate *const*, const char *);
SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_in_PointerTott__Rotate(struct soap*, const char*, tt__Rotate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rotate(struct soap*, tt__Rotate *const*, const char*, const char*);
SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_get_PointerTott__Rotate(struct soap*, tt__Rotate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileExtension2_DEFINED
#define SOAP_TYPE_PointerTott__ProfileExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension2(struct soap*, const char *, int, tt__ProfileExtension2 *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfiguration(struct soap*, const char *, int, tt__AudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfiguration(struct soap*, const char *, int, tt__AudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileExtension_DEFINED
#define SOAP_TYPE_PointerTott__ProfileExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension(struct soap*, const char *, int, tt__ProfileExtension *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension(struct soap*, const char*, tt__ProfileExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MetadataConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__MetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfiguration(struct soap*, const char *, int, tt__MetadataConfiguration *const*, const char *);
SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char *, int, tt__VideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfiguration(struct soap*, const char *, int, tt__AudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderConfiguration(struct soap*, const char *, int, tt__VideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfiguration(struct soap*, const char *, int, tt__AudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfiguration(struct soap*, const char *, int, tt__VideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension2_DEFINED
#define SOAP_TYPE_PointerTott__VideoSourceExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension2(struct soap*, const char *, int, tt__VideoSourceExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingSettings20_DEFINED
#define SOAP_TYPE_PointerTott__ImagingSettings20_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings20(struct soap*, const char *, int, tt__ImagingSettings20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourOptions(struct soap*, const char *, int, tt__PTZPresetTourOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PresetTour_DEFINED
#define SOAP_TYPE_PointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PresetTour(struct soap*, const char *, int, tt__PresetTour *const*, const char *);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_in_PointerTott__PresetTour(struct soap*, const char*, tt__PresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*, const char*, const char*);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_get_PointerTott__PresetTour(struct soap*, tt__PresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GeoLocation_DEFINED
#define SOAP_TYPE_PointerTott__GeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoLocation(struct soap*, const char *, int, tt__GeoLocation *const*, const char *);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_in_PointerTott__GeoLocation(struct soap*, const char*, tt__GeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*, const char*, const char*);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_get_PointerTott__GeoLocation(struct soap*, tt__GeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZVector_DEFINED
#define SOAP_TYPE_PointerTott__PTZVector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZVector(struct soap*, const char *, int, tt__PTZVector *const*, const char *);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_in_PointerTott__PTZVector(struct soap*, const char*, tt__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_get_PointerTott__PTZVector(struct soap*, tt__PTZVector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatus(struct soap*, const char *, int, tt__PTZStatus *const*, const char *);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZStatus(struct soap*, const char*, tt__PTZStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZStatus(struct soap*, tt__PTZStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpeed(struct soap*, const char *, int, tt__PTZSpeed *const*, const char *);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTott__PTZSpeed(struct soap*, const char*, tt__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
#define SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_PointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPreset(struct soap*, const char *, int, tt__PTZPreset *const*, const char *);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_in_PointerTott__PTZPreset(struct soap*, const char*, tt__PTZPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_get_PointerTott__PTZPreset(struct soap*, tt__PTZPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions(struct soap*, const char *, int, tt__PTZConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char *, int, struct __tptz__SetConfigurationResponse_sequence *const*, const char *);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_in_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_get_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfiguration(struct soap*, const char *, int, tt__PTZConfiguration *const*, const char *);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTott__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNode_DEFINED
#define SOAP_TYPE_PointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNode(struct soap*, const char *, int, tt__PTZNode *const*, const char *);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_in_PointerTott__PTZNode(struct soap*, const char*, tt__PTZNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_get_PointerTott__PTZNode(struct soap*, tt__PTZNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotptz__Capabilities(struct soap*, const char *, int, tptz__Capabilities *const*, const char *);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_in_PointerTotptz__Capabilities(struct soap*, const char*, tptz__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_get_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringList_DEFINED
#define SOAP_TYPE_PointerTott__StringList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, std::vector<tt__OSDConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const std::vector<tt__OSDConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, int, const std::vector<tt__OSDConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__OSDConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, std::vector<tt__OSDConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__OSDConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OSDConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, std::vector<trt__VideoSourceMode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const std::vector<trt__VideoSourceMode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const char*, int, const std::vector<trt__VideoSourceMode *> *, const char*);
SOAP_FMAC3 std::vector<trt__VideoSourceMode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, const char*, std::vector<trt__VideoSourceMode *> *, const char*);
SOAP_FMAC1 std::vector<trt__VideoSourceMode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<trt__VideoSourceMode *>  * soap_new_std__vectorTemplateOfPointerTotrt__VideoSourceMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotrt__VideoSourceMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, std::vector<tt__AudioDecoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const std::vector<tt__AudioDecoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioDecoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioDecoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, std::vector<tt__AudioDecoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioDecoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioDecoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, std::vector<tt__AudioOutputConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const std::vector<tt__AudioOutputConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioOutputConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioOutputConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, std::vector<tt__AudioOutputConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioOutputConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioOutputConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, std::vector<tt__MetadataConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const std::vector<tt__MetadataConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, int, const std::vector<tt__MetadataConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__MetadataConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, std::vector<tt__MetadataConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__MetadataConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__MetadataConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, std::vector<tt__VideoAnalyticsConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const std::vector<tt__VideoAnalyticsConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoAnalyticsConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoAnalyticsConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, std::vector<tt__VideoAnalyticsConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoAnalyticsConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoAnalyticsConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, std::vector<tt__AudioSourceConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const std::vector<tt__AudioSourceConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioSourceConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioSourceConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, std::vector<tt__AudioSourceConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioSourceConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioSourceConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, std::vector<tt__AudioEncoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const std::vector<tt__AudioEncoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioEncoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, const char*, std::vector<tt__AudioEncoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, std::vector<tt__VideoSourceConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const std::vector<tt__VideoSourceConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoSourceConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoSourceConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, std::vector<tt__VideoSourceConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoSourceConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoSourceConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, std::vector<tt__VideoEncoderConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const std::vector<tt__VideoEncoderConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoEncoderConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoEncoderConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, const char*, std::vector<tt__VideoEncoderConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoEncoderConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoEncoderConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Profile(struct soap*, std::vector<tt__Profile *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Profile(struct soap*, const std::vector<tt__Profile *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Profile(struct soap*, const char*, int, const std::vector<tt__Profile *> *, const char*);
SOAP_FMAC3 std::vector<tt__Profile *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Profile(struct soap*, const char*, std::vector<tt__Profile *> *, const char*);
SOAP_FMAC1 std::vector<tt__Profile *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Profile *>  * soap_new_std__vectorTemplateOfPointerTott__Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, std::vector<tt__AudioOutput *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const std::vector<tt__AudioOutput *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const char*, int, const std::vector<tt__AudioOutput *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioOutput *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, const char*, std::vector<tt__AudioOutput *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioOutput *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioOutput *>  * soap_new_std__vectorTemplateOfPointerTott__AudioOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutput(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, std::vector<tt__AudioSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const std::vector<tt__AudioSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const char*, int, const std::vector<tt__AudioSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, const char*, std::vector<tt__AudioSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioSource *>  * soap_new_std__vectorTemplateOfPointerTott__AudioSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, std::vector<tt__VideoSource *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const std::vector<tt__VideoSource *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const char*, int, const std::vector<tt__VideoSource *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoSource *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, const char*, std::vector<tt__VideoSource *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoSource *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoSource *>  * soap_new_std__vectorTemplateOfPointerTott__VideoSource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoSource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__OSDType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__OSDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__OSDType(struct soap*, std::vector<enum tt__OSDType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__OSDType(struct soap*, const std::vector<enum tt__OSDType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__OSDType(struct soap*, const char*, int, const std::vector<enum tt__OSDType> *, const char*);
SOAP_FMAC3 std::vector<enum tt__OSDType> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__OSDType(struct soap*, const char*, std::vector<enum tt__OSDType> *, const char*);
SOAP_FMAC1 std::vector<enum tt__OSDType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__OSDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__OSDType>  * soap_new_std__vectorTemplateOftt__OSDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__OSDType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const std::vector<tt__ColorspaceRange *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, int, const std::vector<tt__ColorspaceRange *> *, const char*);
SOAP_FMAC3 std::vector<tt__ColorspaceRange *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange *> *, const char*);
SOAP_FMAC1 std::vector<tt__ColorspaceRange *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ColorspaceRange *>  * soap_new_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Color_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Color_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Color(struct soap*, const std::vector<tt__Color *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, int, const std::vector<tt__Color *> *, const char*);
SOAP_FMAC3 std::vector<tt__Color *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color *> *, const char*);
SOAP_FMAC1 std::vector<tt__Color *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Color(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Color *>  * soap_new_std__vectorTemplateOfPointerTott__Color(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Color(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Config_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Config_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Config(struct soap*, std::vector<tt__Config *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Config(struct soap*, const std::vector<tt__Config *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, int, const std::vector<tt__Config *> *, const char*);
SOAP_FMAC3 std::vector<tt__Config *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, std::vector<tt__Config *> *, const char*);
SOAP_FMAC1 std::vector<tt__Config *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Config(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Config *>  * soap_new_std__vectorTemplateOfPointerTott__Config(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Config(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const std::vector<_tt__ItemList_ElementItem> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_ElementItem> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, std::vector<_tt__ItemList_ElementItem> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_ElementItem>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_ElementItem>  * soap_new_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const std::vector<_tt__ItemList_SimpleItem> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_SimpleItem> *, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, std::vector<_tt__ItemList_SimpleItem> *, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_SimpleItem>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_SimpleItem>  * soap_new_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, std::vector<tt__IrCutFilterAutoAdjustment *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const std::vector<tt__IrCutFilterAutoAdjustment *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const std::vector<tt__IrCutFilterAutoAdjustment *> *, const char*);
SOAP_FMAC3 std::vector<tt__IrCutFilterAutoAdjustment *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, std::vector<tt__IrCutFilterAutoAdjustment *> *, const char*);
SOAP_FMAC1 std::vector<tt__IrCutFilterAutoAdjustment *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IrCutFilterAutoAdjustment *>  * soap_new_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourDirection> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourDirection>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourDirection>  * soap_new_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPresetTourSpot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPresetTourSpot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPresetTourSpot *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, int, const std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space1DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space1DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space1DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, int, const std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space2DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space2DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space2DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReverseMode(struct soap*, std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReverseMode(struct soap*, const std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, int, const std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ReverseMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ReverseMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ReverseMode>  * soap_new_std__vectorTemplateOftt__ReverseMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__EFlipMode(struct soap*, std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__EFlipMode(struct soap*, const std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, int, const std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__EFlipMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__EFlipMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__EFlipMode>  * soap_new_std__vectorTemplateOftt__EFlipMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourOperation> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourOperation>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourOperation>  * soap_new_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, std::vector<tt__AudioEncoderConfigurationOption *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const std::vector<tt__AudioEncoderConfigurationOption *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, int, const std::vector<tt__AudioEncoderConfigurationOption *> *, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoderConfigurationOption *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, std::vector<tt__AudioEncoderConfigurationOption *> *, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoderConfigurationOption *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoderConfigurationOption *>  * soap_new_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__H264Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__H264Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__H264Profile(struct soap*, std::vector<enum tt__H264Profile> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__H264Profile(struct soap*, const std::vector<enum tt__H264Profile> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, int, const std::vector<enum tt__H264Profile> *, const char*);
SOAP_FMAC3 std::vector<enum tt__H264Profile> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, std::vector<enum tt__H264Profile> *, const char*);
SOAP_FMAC1 std::vector<enum tt__H264Profile>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__H264Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__H264Profile>  * soap_new_std__vectorTemplateOftt__H264Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__H264Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, std::vector<enum tt__Mpeg4Profile> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const std::vector<enum tt__Mpeg4Profile> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, int, const std::vector<enum tt__Mpeg4Profile> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Mpeg4Profile> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, std::vector<enum tt__Mpeg4Profile> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Mpeg4Profile>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Mpeg4Profile>  * soap_new_std__vectorTemplateOftt__Mpeg4Profile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, std::vector<tt__VideoResolution *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const std::vector<tt__VideoResolution *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, int, const std::vector<tt__VideoResolution *> *, const char*);
SOAP_FMAC3 std::vector<tt__VideoResolution *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, std::vector<tt__VideoResolution *> *, const char*);
SOAP_FMAC1 std::vector<tt__VideoResolution *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoResolution *>  * soap_new_std__vectorTemplateOfPointerTott__VideoResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__RotateMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__RotateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__RotateMode(struct soap*, std::vector<enum tt__RotateMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__RotateMode(struct soap*, const std::vector<enum tt__RotateMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, int, const std::vector<enum tt__RotateMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__RotateMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, std::vector<enum tt__RotateMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__RotateMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__RotateMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__RotateMode>  * soap_new_std__vectorTemplateOftt__RotateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__RotateMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, std::vector<enum tt__SceneOrientationMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const std::vector<enum tt__SceneOrientationMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const char*, int, const std::vector<enum tt__SceneOrientationMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__SceneOrientationMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const char*, std::vector<enum tt__SceneOrientationMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__SceneOrientationMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__SceneOrientationMode>  * soap_new_std__vectorTemplateOftt__SceneOrientationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__SceneOrientationMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, std::vector<tt__LensProjection *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const std::vector<tt__LensProjection *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, int, const std::vector<tt__LensProjection *> *, const char*);
SOAP_FMAC3 std::vector<tt__LensProjection *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, std::vector<tt__LensProjection *> *, const char*);
SOAP_FMAC1 std::vector<tt__LensProjection *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensProjection *>  * soap_new_std__vectorTemplateOfPointerTott__LensProjection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, std::vector<tt__LensDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const std::vector<tt__LensDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, int, const std::vector<tt__LensDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__LensDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, std::vector<tt__LensDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__LensDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensDescription *>  * soap_new_std__vectorTemplateOfPointerTott__LensDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, std::vector<tt__PresetTour *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const std::vector<tt__PresetTour *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, int, const std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC3 std::vector<tt__PresetTour *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC1 std::vector<tt__PresetTour *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PresetTour *>  * soap_new_std__vectorTemplateOfPointerTott__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, int, const std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPreset *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPreset *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPreset *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, int, const std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, std::vector<tt__PTZNode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const std::vector<tt__PTZNode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, int, const std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZNode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZNode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZNode *>  * soap_new_std__vectorTemplateOfPointerTott__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
