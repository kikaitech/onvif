/* soapH.h
   Generated by gSOAP 2.8.109 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MoveStatus_DEFINED
#define SOAP_TYPE_tt__MoveStatus_DEFINED

inline void soap_default_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__MoveStatus
	*a = SOAP_DEFAULT_tt__MoveStatus;
#else
	*a = (enum tt__MoveStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap*, const char*, int, const enum tt__MoveStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap*, enum tt__MoveStatus);
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *);

SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_new_tt__MoveStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap*, const enum tt__MoveStatus *, const char*, const char*);

inline int soap_write_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap*, enum tt__MoveStatus *, const char*, const char*);

inline int soap_read_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__MoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED

inline void soap_default_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourOperation
	*a = SOAP_DEFAULT_tt__PTZPresetTourOperation;
#else
	*a = (enum tt__PTZPresetTourOperation)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap*, const char*, int, const enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap*, enum tt__PTZPresetTourOperation);
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *);

SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_new_tt__PTZPresetTourOperation(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap*, const enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED

inline void soap_default_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourDirection
	*a = SOAP_DEFAULT_tt__PTZPresetTourDirection;
#else
	*a = (enum tt__PTZPresetTourDirection)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap*, const char*, int, const enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap*, enum tt__PTZPresetTourDirection);
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *);

SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_new_tt__PTZPresetTourDirection(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap*, const enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourState_DEFINED

inline void soap_default_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourState
	*a = SOAP_DEFAULT_tt__PTZPresetTourState;
#else
	*a = (enum tt__PTZPresetTourState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap*, const char*, int, const enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap*, enum tt__PTZPresetTourState);
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *);

SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_new_tt__PTZPresetTourState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap*, const enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseMode_DEFINED
#define SOAP_TYPE_tt__ReverseMode_DEFINED

inline void soap_default_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ReverseMode
	*a = SOAP_DEFAULT_tt__ReverseMode;
#else
	*a = (enum tt__ReverseMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap*, const char*, int, const enum tt__ReverseMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap*, enum tt__ReverseMode);
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *);

SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_new_tt__ReverseMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap*, const enum tt__ReverseMode *, const char*, const char*);

inline int soap_write_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap*, enum tt__ReverseMode *, const char*, const char*);

inline int soap_read_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReverseMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipMode_DEFINED
#define SOAP_TYPE_tt__EFlipMode_DEFINED

inline void soap_default_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__EFlipMode
	*a = SOAP_DEFAULT_tt__EFlipMode;
#else
	*a = (enum tt__EFlipMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap*, const char*, int, const enum tt__EFlipMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap*, enum tt__EFlipMode);
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *);

SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_new_tt__EFlipMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap*, const enum tt__EFlipMode *, const char*, const char*);

inline int soap_write_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap*, enum tt__EFlipMode *, const char*, const char*);

inline int soap_read_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__EFlipMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken_DEFINED
#define SOAP_TYPE_tt__ReferenceToken_DEFINED

inline void soap_default_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);

#define soap_tt__ReferenceToken2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceToken(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_new_tt__ReferenceToken soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceToken(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReferenceToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReferenceToken(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData_DEFINED
#define SOAP_TYPE_tt__AuxiliaryData_DEFINED

inline void soap_default_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);

#define soap_tt__AuxiliaryData2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AuxiliaryData(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 128, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_new_tt__AuxiliaryData soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AuxiliaryData(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Name_DEFINED
#define SOAP_TYPE_tt__Name_DEFINED

inline void soap_default_tt__Name(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);

#define soap_tt__Name2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Name(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_new_tt__Name soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Name(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Name(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Name(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Name(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StringList_DEFINED
#define SOAP_TYPE_tt__StringList_DEFINED

inline void soap_default_tt__StringList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringList(struct soap*, const std::string *);

#define soap_tt__StringList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringList soap_instantiate_std__string


#define soap_new_tt__StringList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StringList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StringList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StringList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntAttrList_DEFINED
#define SOAP_TYPE_tt__IntAttrList_DEFINED

inline void soap_default_tt__IntAttrList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntAttrList(struct soap*, const std::string *);

#define soap_tt__IntAttrList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__IntAttrList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__IntAttrList soap_instantiate_std__string


#define soap_new_tt__IntAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__IntAttrList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IntAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntAttrList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__GeoLocation_DEFINED
#define SOAP_TYPE_tt__GeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoLocation(struct soap*, const char*, int, const tt__GeoLocation *, const char*);
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_in_tt__GeoLocation(struct soap*, const char*, tt__GeoLocation *, const char*);
SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoLocation * soap_new_tt__GeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GeoLocation(soap, n, NULL, NULL, NULL);
}

inline tt__GeoLocation * soap_new_req_tt__GeoLocation(
	struct soap *soap)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GeoLocation * soap_new_set_tt__GeoLocation(
	struct soap *soap,
	double *lon,
	double *lat,
	float *elevation)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GeoLocation::lon = lon;
		_p->tt__GeoLocation::lat = lat;
		_p->tt__GeoLocation::elevation = elevation;
	}
	return _p;
}

inline int soap_write_tt__GeoLocation(struct soap *soap, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_get_tt__GeoLocation(struct soap*, tt__GeoLocation *, const char*, const char*);

inline int soap_read_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__GeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus_DEFINED
#define SOAP_TYPE_tt__PTZMoveStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZMoveStatus(struct soap*, const char*, int, const tt__PTZMoveStatus *, const char*);
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_in_tt__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus *, const char*);
SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZMoveStatus * soap_new_tt__PTZMoveStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZMoveStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZMoveStatus * soap_new_req_tt__PTZMoveStatus(
	struct soap *soap)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZMoveStatus * soap_new_set_tt__PTZMoveStatus(
	struct soap *soap,
	enum tt__MoveStatus *PanTilt,
	enum tt__MoveStatus *Zoom)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZMoveStatus::PanTilt = PanTilt;
		_p->tt__PTZMoveStatus::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_get_tt__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *, const char*, const char*);

inline int soap_read_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZMoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatus_DEFINED
#define SOAP_TYPE_tt__PTZStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatus(struct soap*, const char*, int, const tt__PTZStatus *, const char*);
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_in_tt__PTZStatus(struct soap*, const char*, tt__PTZStatus *, const char*);
SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatus * soap_new_tt__PTZStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatus * soap_new_req_tt__PTZStatus(
	struct soap *soap,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__PTZStatus * soap_new_set_tt__PTZStatus(
	struct soap *soap,
	tt__PTZVector *Position,
	tt__PTZMoveStatus *MoveStatus,
	std::string *Error,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::Position = Position;
		_p->tt__PTZStatus::MoveStatus = MoveStatus;
		_p->tt__PTZStatus::Error = Error;
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline int soap_write_tt__PTZStatus(struct soap *soap, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_get_tt__PTZStatus(struct soap*, tt__PTZStatus *, const char*, const char*);

inline int soap_read_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZVector_DEFINED
#define SOAP_TYPE_tt__PTZVector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZVector(struct soap*, const char*, int, const tt__PTZVector *, const char*);
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_in_tt__PTZVector(struct soap*, const char*, tt__PTZVector *, const char*);
SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZVector * soap_new_tt__PTZVector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZVector(soap, n, NULL, NULL, NULL);
}

inline tt__PTZVector * soap_new_req_tt__PTZVector(
	struct soap *soap)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZVector * soap_new_set_tt__PTZVector(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZVector::PanTilt = PanTilt;
		_p->tt__PTZVector::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZVector(struct soap *soap, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_get_tt__PTZVector(struct soap*, tt__PTZVector *, const char*, const char*);

inline int soap_read_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZVector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector1D_DEFINED
#define SOAP_TYPE_tt__Vector1D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector1D(struct soap*, const char*, int, const tt__Vector1D *, const char*);
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_in_tt__Vector1D(struct soap*, const char*, tt__Vector1D *, const char*);
SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector1D * soap_new_tt__Vector1D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector1D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector1D * soap_new_req_tt__Vector1D(
	struct soap *soap,
	float x)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
	}
	return _p;
}

inline tt__Vector1D * soap_new_set_tt__Vector1D(
	struct soap *soap,
	float x,
	std::string *space)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
		_p->tt__Vector1D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector1D(struct soap *soap, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_get_tt__Vector1D(struct soap*, tt__Vector1D *, const char*, const char*);

inline int soap_read_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector1D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector2D_DEFINED
#define SOAP_TYPE_tt__Vector2D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector2D(struct soap*, const char*, int, const tt__Vector2D *, const char*);
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_in_tt__Vector2D(struct soap*, const char*, tt__Vector2D *, const char*);
SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector2D * soap_new_tt__Vector2D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector2D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector2D * soap_new_req_tt__Vector2D(
	struct soap *soap,
	float x,
	float y)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
	}
	return _p;
}

inline tt__Vector2D * soap_new_set_tt__Vector2D(
	struct soap *soap,
	float x,
	float y,
	std::string *space)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
		_p->tt__Vector2D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector2D(struct soap *soap, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_get_tt__Vector2D(struct soap*, tt__Vector2D *, const char*, const char*);

inline int soap_read_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector2D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRange_DEFINED
#define SOAP_TYPE_tt__IntRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);
SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRange * soap_new_req_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline tt__IntRange * soap_new_set_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__IntRange(struct soap *soap, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

inline int soap_read_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptions * soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_req_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_set_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap,
	tt__IntRange *RecurringTime,
	tt__DurationRange *RecurringDuration,
	const std::vector<enum tt__PTZPresetTourDirection> & Direction,
	tt__PTZPresetTourStartingConditionOptionsExtension *Extension)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingConditionOptions::Direction = Direction;
		_p->tt__PTZPresetTourStartingConditionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptions * soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_req_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_set_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap,
	const std::vector<std::string> & PresetToken,
	bool *Home,
	tt__Space2DDescription *PanTiltPositionSpace,
	tt__Space1DDescription *ZoomPositionSpace,
	tt__PTZPresetTourPresetDetailOptionsExtension *Extension)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken;
		_p->tt__PTZPresetTourPresetDetailOptions::Home = Home;
		_p->tt__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotOptions(struct soap*, const char*, int, const tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotOptions * soap_new_tt__PTZPresetTourSpotOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotOptions * soap_new_req_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline tt__PTZPresetTourSpotOptions * soap_new_set_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOptions(struct soap*, const char*, int, const tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOptions * soap_new_tt__PTZPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourOptions * soap_new_req_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline tt__PTZPresetTourOptions * soap_new_set_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionExtension * soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_req_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_set_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingCondition(struct soap*, const char*, int, const tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingCondition * soap_new_tt__PTZPresetTourStartingCondition(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingCondition * soap_new_req_tt__PTZPresetTourStartingCondition(
	struct soap *soap)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingCondition * soap_new_set_tt__PTZPresetTourStartingCondition(
	struct soap *soap,
	int *RecurringTime,
	std::string *RecurringDuration,
	enum tt__PTZPresetTourDirection *Direction,
	tt__PTZPresetTourStartingConditionExtension *Extension,
	bool *RandomPresetOrder)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingCondition::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingCondition::Direction = Direction;
		_p->tt__PTZPresetTourStartingCondition::Extension = Extension;
		_p->tt__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingCondition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatusExtension(struct soap*, const char*, int, const tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatusExtension * soap_new_tt__PTZPresetTourStatusExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatusExtension * soap_new_req_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStatusExtension * soap_new_set_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatusExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatus(struct soap*, const char*, int, const tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatus * soap_new_tt__PTZPresetTourStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatus * soap_new_req_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
	}
	return _p;
}

inline tt__PTZPresetTourStatus * soap_new_set_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State,
	tt__PTZPresetTourSpot *CurrentTourSpot,
	tt__PTZPresetTourStatusExtension *Extension)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
		_p->tt__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot;
		_p->tt__PTZPresetTourStatus::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourTypeExtension(struct soap*, const char*, int, const tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourTypeExtension * soap_new_tt__PTZPresetTourTypeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourTypeExtension * soap_new_req_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourTypeExtension * soap_new_set_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourTypeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetail(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetail * soap_new_tt__PTZPresetTourPresetDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetail * soap_new_req_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetail * soap_new_set_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	int __union_PTZPresetTourPresetDetail,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotExtension(struct soap*, const char*, int, const tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotExtension * soap_new_tt__PTZPresetTourSpotExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotExtension * soap_new_req_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSpotExtension * soap_new_set_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpot(struct soap*, const char*, int, const tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpot * soap_new_tt__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpot * soap_new_req_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourSpot * soap_new_set_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail,
	tt__PTZSpeed *Speed,
	std::string *StayTime,
	tt__PTZPresetTourSpotExtension *Extension)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpot::Speed = Speed;
		_p->tt__PTZPresetTourSpot::StayTime = StayTime;
		_p->tt__PTZPresetTourSpot::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourExtension(struct soap*, const char*, int, const tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourExtension * soap_new_tt__PTZPresetTourExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourExtension * soap_new_req_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourExtension * soap_new_set_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PresetTour_DEFINED
#define SOAP_TYPE_tt__PresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PresetTour(struct soap*, const char*, int, const tt__PresetTour *, const char*);
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_in_tt__PresetTour(struct soap*, const char*, tt__PresetTour *, const char*);
SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline tt__PresetTour * soap_new_tt__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PresetTour(soap, n, NULL, NULL, NULL);
}

inline tt__PresetTour * soap_new_req_tt__PresetTour(
	struct soap *soap,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
	}
	return _p;
}

inline tt__PresetTour * soap_new_set_tt__PresetTour(
	struct soap *soap,
	std::string *Name,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition,
	const std::vector<tt__PTZPresetTourSpot *> & TourSpot,
	tt__PTZPresetTourExtension *Extension,
	std::string *token)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Name = Name;
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
		_p->tt__PresetTour::TourSpot = TourSpot;
		_p->tt__PresetTour::Extension = Extension;
		_p->tt__PresetTour::token = token;
	}
	return _p;
}

inline int soap_write_tt__PresetTour(struct soap *soap, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_get_tt__PresetTour(struct soap*, tt__PresetTour *, const char*, const char*);

inline int soap_read_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPreset_DEFINED
#define SOAP_TYPE_tt__PTZPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPreset(struct soap*, const char*, int, const tt__PTZPreset *, const char*);
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_in_tt__PTZPreset(struct soap*, const char*, tt__PTZPreset *, const char*);
SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPreset * soap_new_tt__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPreset(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPreset * soap_new_req_tt__PTZPreset(
	struct soap *soap)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPreset * soap_new_set_tt__PTZPreset(
	struct soap *soap,
	std::string *Name,
	tt__PTZVector *PTZPosition,
	std::string *token)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPreset::Name = Name;
		_p->tt__PTZPreset::PTZPosition = PTZPosition;
		_p->tt__PTZPreset::token = token;
	}
	return _p;
}

inline int soap_write_tt__PTZPreset(struct soap *soap, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_get_tt__PTZPreset(struct soap*, tt__PTZPreset *, const char*, const char*);

inline int soap_read_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed_DEFINED
#define SOAP_TYPE_tt__PTZSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpeed(struct soap*, const char*, int, const tt__PTZSpeed *, const char*);
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_in_tt__PTZSpeed(struct soap*, const char*, tt__PTZSpeed *, const char*);
SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpeed * soap_new_tt__PTZSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpeed(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpeed * soap_new_req_tt__PTZSpeed(
	struct soap *soap)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpeed * soap_new_set_tt__PTZSpeed(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpeed::PanTilt = PanTilt;
		_p->tt__PTZSpeed::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_get_tt__PTZSpeed(struct soap*, tt__PTZSpeed *, const char*, const char*);

inline int soap_read_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription_DEFINED
#define SOAP_TYPE_tt__Space1DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space1DDescription(struct soap*, const char*, int, const tt__Space1DDescription *, const char*);
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_in_tt__Space1DDescription(struct soap*, const char*, tt__Space1DDescription *, const char*);
SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space1DDescription * soap_new_tt__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space1DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space1DDescription * soap_new_req_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline tt__Space1DDescription * soap_new_set_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline int soap_write_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_get_tt__Space1DDescription(struct soap*, tt__Space1DDescription *, const char*, const char*);

inline int soap_read_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space1DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription_DEFINED
#define SOAP_TYPE_tt__Space2DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space2DDescription(struct soap*, const char*, int, const tt__Space2DDescription *, const char*);
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_in_tt__Space2DDescription(struct soap*, const char*, tt__Space2DDescription *, const char*);
SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space2DDescription * soap_new_tt__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space2DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space2DDescription * soap_new_req_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline tt__Space2DDescription * soap_new_set_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline int soap_write_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_get_tt__Space2DDescription(struct soap*, tt__Space2DDescription *, const char*, const char*);

inline int soap_read_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space2DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpacesExtension(struct soap*, const char*, int, const tt__PTZSpacesExtension *, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_in_tt__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension *, const char*);
SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpacesExtension * soap_new_tt__PTZSpacesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpacesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpacesExtension * soap_new_req_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpacesExtension * soap_new_set_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_get_tt__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *, const char*, const char*);

inline int soap_read_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpacesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces_DEFINED
#define SOAP_TYPE_tt__PTZSpaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpaces(struct soap*, const char*, int, const tt__PTZSpaces *, const char*);
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_in_tt__PTZSpaces(struct soap*, const char*, tt__PTZSpaces *, const char*);
SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpaces * soap_new_tt__PTZSpaces(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpaces(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpaces * soap_new_req_tt__PTZSpaces(
	struct soap *soap)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpaces * soap_new_set_tt__PTZSpaces(
	struct soap *soap,
	const std::vector<tt__Space2DDescription *> & AbsolutePanTiltPositionSpace,
	const std::vector<tt__Space1DDescription *> & AbsoluteZoomPositionSpace,
	const std::vector<tt__Space2DDescription *> & RelativePanTiltTranslationSpace,
	const std::vector<tt__Space1DDescription *> & RelativeZoomTranslationSpace,
	const std::vector<tt__Space2DDescription *> & ContinuousPanTiltVelocitySpace,
	const std::vector<tt__Space1DDescription *> & ContinuousZoomVelocitySpace,
	const std::vector<tt__Space1DDescription *> & PanTiltSpeedSpace,
	const std::vector<tt__Space1DDescription *> & ZoomSpeedSpace,
	tt__PTZSpacesExtension *Extension)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace;
		_p->tt__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace;
		_p->tt__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace;
		_p->tt__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace;
		_p->tt__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace;
		_p->tt__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace;
		_p->tt__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace;
		_p->tt__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace;
		_p->tt__PTZSpaces::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_get_tt__PTZSpaces(struct soap*, tt__PTZSpaces *, const char*, const char*);

inline int soap_read_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits_DEFINED
#define SOAP_TYPE_tt__ZoomLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ZoomLimits(struct soap*, const char*, int, const tt__ZoomLimits *, const char*);
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_in_tt__ZoomLimits(struct soap*, const char*, tt__ZoomLimits *, const char*);
SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__ZoomLimits * soap_new_tt__ZoomLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ZoomLimits(soap, n, NULL, NULL, NULL);
}

inline tt__ZoomLimits * soap_new_req_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline tt__ZoomLimits * soap_new_set_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_get_tt__ZoomLimits(struct soap*, tt__ZoomLimits *, const char*, const char*);

inline int soap_read_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ZoomLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits_DEFINED
#define SOAP_TYPE_tt__PanTiltLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PanTiltLimits(struct soap*, const char*, int, const tt__PanTiltLimits *, const char*);
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_in_tt__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits *, const char*);
SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__PanTiltLimits * soap_new_tt__PanTiltLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PanTiltLimits(soap, n, NULL, NULL, NULL);
}

inline tt__PanTiltLimits * soap_new_req_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline tt__PanTiltLimits * soap_new_set_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_get_tt__PanTiltLimits(struct soap*, tt__PanTiltLimits *, const char*, const char*);

inline int soap_read_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PanTiltLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptionsExtension(struct soap*, const char*, int, const tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_in_tt__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptionsExtension * soap_new_tt__ReverseOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptionsExtension * soap_new_req_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptionsExtension * soap_new_set_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_get_tt__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *, const char*, const char*);

inline int soap_read_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions_DEFINED
#define SOAP_TYPE_tt__ReverseOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptions(struct soap*, const char*, int, const tt__ReverseOptions *, const char*);
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_in_tt__ReverseOptions(struct soap*, const char*, tt__ReverseOptions *, const char*);
SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptions * soap_new_tt__ReverseOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptions * soap_new_req_tt__ReverseOptions(
	struct soap *soap)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptions * soap_new_set_tt__ReverseOptions(
	struct soap *soap,
	const std::vector<enum tt__ReverseMode> & Mode,
	tt__ReverseOptionsExtension *Extension)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseOptions::Mode = Mode;
		_p->tt__ReverseOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_get_tt__ReverseOptions(struct soap*, tt__ReverseOptions *, const char*, const char*);

inline int soap_read_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptionsExtension(struct soap*, const char*, int, const tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_in_tt__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptionsExtension * soap_new_tt__EFlipOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptionsExtension * soap_new_req_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptionsExtension * soap_new_set_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_get_tt__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *, const char*, const char*);

inline int soap_read_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions_DEFINED
#define SOAP_TYPE_tt__EFlipOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptions(struct soap*, const char*, int, const tt__EFlipOptions *, const char*);
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_in_tt__EFlipOptions(struct soap*, const char*, tt__EFlipOptions *, const char*);
SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptions * soap_new_tt__EFlipOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptions(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptions * soap_new_req_tt__EFlipOptions(
	struct soap *soap)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptions * soap_new_set_tt__EFlipOptions(
	struct soap *soap,
	const std::vector<enum tt__EFlipMode> & Mode,
	tt__EFlipOptionsExtension *Extension)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipOptions::Mode = Mode;
		_p->tt__EFlipOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_get_tt__EFlipOptions(struct soap*, tt__EFlipOptions *, const char*, const char*);

inline int soap_read_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptionsExtension * soap_new_tt__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptionsExtension * soap_new_req_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptionsExtension * soap_new_set_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptions(struct soap*, const char*, int, const tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptions * soap_new_tt__PTControlDirectionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptions * soap_new_req_tt__PTControlDirectionOptions(
	struct soap *soap)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptions * soap_new_set_tt__PTControlDirectionOptions(
	struct soap *soap,
	tt__EFlipOptions *EFlip,
	tt__ReverseOptions *Reverse,
	tt__PTControlDirectionOptionsExtension *Extension)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionOptions::EFlip = EFlip;
		_p->tt__PTControlDirectionOptions::Reverse = Reverse;
		_p->tt__PTControlDirectionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions2(struct soap*, const char*, int, const tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions2 * soap_new_tt__PTZConfigurationOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions2 * soap_new_req_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationOptions2 * soap_new_set_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions(struct soap*, const char*, int, const tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions * soap_new_tt__PTZConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions * soap_new_req_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
	}
	return _p;
}

inline tt__PTZConfigurationOptions * soap_new_set_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout,
	tt__PTControlDirectionOptions *PTControlDirection,
	tt__PTZConfigurationOptions2 *Extension,
	std::string *PTZRamps)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
		_p->tt__PTZConfigurationOptions::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationOptions::Extension = Extension;
		_p->tt__PTZConfigurationOptions::PTZRamps = PTZRamps;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Reverse_DEFINED
#define SOAP_TYPE_tt__Reverse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Reverse(struct soap*, const char*, int, const tt__Reverse *, const char*);
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_in_tt__Reverse(struct soap*, const char*, tt__Reverse *, const char*);
SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline tt__Reverse * soap_new_tt__Reverse(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Reverse(soap, n, NULL, NULL, NULL);
}

inline tt__Reverse * soap_new_req_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline tt__Reverse * soap_new_set_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__Reverse(struct soap *soap, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_get_tt__Reverse(struct soap*, tt__Reverse *, const char*, const char*);

inline int soap_read_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Reverse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlip_DEFINED
#define SOAP_TYPE_tt__EFlip_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlip(struct soap*, const char*, int, const tt__EFlip *, const char*);
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_in_tt__EFlip(struct soap*, const char*, tt__EFlip *, const char*);
SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlip * soap_new_tt__EFlip(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlip(soap, n, NULL, NULL, NULL);
}

inline tt__EFlip * soap_new_req_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline tt__EFlip * soap_new_set_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__EFlip(struct soap *soap, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_get_tt__EFlip(struct soap*, tt__EFlip *, const char*, const char*);

inline int soap_read_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlip(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionExtension(struct soap*, const char*, int, const tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionExtension * soap_new_tt__PTControlDirectionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionExtension * soap_new_req_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionExtension * soap_new_set_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection_DEFINED
#define SOAP_TYPE_tt__PTControlDirection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirection(struct soap*, const char*, int, const tt__PTControlDirection *, const char*);
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_in_tt__PTControlDirection(struct soap*, const char*, tt__PTControlDirection *, const char*);
SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirection * soap_new_tt__PTControlDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirection(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirection * soap_new_req_tt__PTControlDirection(
	struct soap *soap)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirection * soap_new_set_tt__PTControlDirection(
	struct soap *soap,
	tt__EFlip *EFlip,
	tt__Reverse *Reverse,
	tt__PTControlDirectionExtension *Extension)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirection::EFlip = EFlip;
		_p->tt__PTControlDirection::Reverse = Reverse;
		_p->tt__PTControlDirection::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_get_tt__PTControlDirection(struct soap*, tt__PTControlDirection *, const char*, const char*);

inline int soap_read_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension2(struct soap*, const char*, int, const tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension2 * soap_new_tt__PTZConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension2 * soap_new_req_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension2 * soap_new_set_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension(struct soap*, const char*, int, const tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension * soap_new_tt__PTZConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension * soap_new_req_tt__PTZConfigurationExtension(
	struct soap *soap)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension * soap_new_set_tt__PTZConfigurationExtension(
	struct soap *soap,
	tt__PTControlDirection *PTControlDirection,
	tt__PTZConfigurationExtension2 *Extension)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationExtension::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration_DEFINED
#define SOAP_TYPE_tt__PTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfiguration(struct soap*, const char*, int, const tt__PTZConfiguration *, const char*);
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_in_tt__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration *, const char*);
SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfiguration * soap_new_tt__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfiguration * soap_new_req_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZConfiguration * soap_new_set_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	std::string *DefaultAbsolutePantTiltPositionSpace,
	std::string *DefaultAbsoluteZoomPositionSpace,
	std::string *DefaultRelativePanTiltTranslationSpace,
	std::string *DefaultRelativeZoomTranslationSpace,
	std::string *DefaultContinuousPanTiltVelocitySpace,
	std::string *DefaultContinuousZoomVelocitySpace,
	tt__PTZSpeed *DefaultPTZSpeed,
	std::string *DefaultPTZTimeout,
	tt__PanTiltLimits *PanTiltLimits,
	tt__ZoomLimits *ZoomLimits,
	tt__PTZConfigurationExtension *Extension,
	int *MoveRamp,
	int *PresetRamp,
	int *PresetTourRamp,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace;
		_p->tt__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace;
		_p->tt__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace;
		_p->tt__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace;
		_p->tt__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace;
		_p->tt__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace;
		_p->tt__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed;
		_p->tt__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout;
		_p->tt__PTZConfiguration::PanTiltLimits = PanTiltLimits;
		_p->tt__PTZConfiguration::ZoomLimits = ZoomLimits;
		_p->tt__PTZConfiguration::Extension = Extension;
		_p->tt__PTZConfiguration::MoveRamp = MoveRamp;
		_p->tt__PTZConfiguration::PresetRamp = PresetRamp;
		_p->tt__PTZConfiguration::PresetTourRamp = PresetTourRamp;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_get_tt__PTZConfiguration(struct soap*, tt__PTZConfiguration *, const char*, const char*);

inline int soap_read_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupportedExtension * soap_new_tt__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupportedExtension * soap_new_req_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSupportedExtension * soap_new_set_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupportedExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupported(struct soap*, const char*, int, const tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupported * soap_new_tt__PTZPresetTourSupported(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupported(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupported * soap_new_req_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
	}
	return _p;
}

inline tt__PTZPresetTourSupported * soap_new_set_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours,
	const std::vector<enum tt__PTZPresetTourOperation> & PTZPresetTourOperation,
	tt__PTZPresetTourSupportedExtension *Extension)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
		_p->tt__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation;
		_p->tt__PTZPresetTourSupported::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupported(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension2(struct soap*, const char*, int, const tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_in_tt__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension2 * soap_new_tt__PTZNodeExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension2 * soap_new_req_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension2 * soap_new_set_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_get_tt__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension(struct soap*, const char*, int, const tt__PTZNodeExtension *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_in_tt__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension * soap_new_tt__PTZNodeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension * soap_new_req_tt__PTZNodeExtension(
	struct soap *soap)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension * soap_new_set_tt__PTZNodeExtension(
	struct soap *soap,
	tt__PTZPresetTourSupported *SupportedPresetTour,
	tt__PTZNodeExtension2 *Extension)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour;
		_p->tt__PTZNodeExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_get_tt__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNode_DEFINED
#define SOAP_TYPE_tt__PTZNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNode(struct soap*, const char*, int, const tt__PTZNode *, const char*);
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_in_tt__PTZNode(struct soap*, const char*, tt__PTZNode *, const char*);
SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNode * soap_new_tt__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNode(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNode * soap_new_req_tt__PTZNode(
	struct soap *soap,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZNode * soap_new_set_tt__PTZNode(
	struct soap *soap,
	std::string *Name,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__PTZNodeExtension *Extension,
	bool *FixedHomePosition,
	bool *GeoMove,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::Name = Name;
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__PTZNode::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__PTZNode::Extension = Extension;
		_p->tt__PTZNode::FixedHomePosition = FixedHomePosition;
		_p->tt__PTZNode::GeoMove = GeoMove;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZNode(struct soap *soap, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_get_tt__PTZNode(struct soap*, tt__PTZNode *, const char*, const char*);

inline int soap_read_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity_DEFINED
#define SOAP_TYPE_tt__ConfigurationEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigurationEntity(struct soap*, const char*, int, const tt__ConfigurationEntity *, const char*);
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_in_tt__ConfigurationEntity(struct soap*, const char*, tt__ConfigurationEntity *, const char*);
SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigurationEntity * soap_new_tt__ConfigurationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigurationEntity(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigurationEntity * soap_new_req_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline tt__ConfigurationEntity * soap_new_set_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_get_tt__ConfigurationEntity(struct soap*, tt__ConfigurationEntity *, const char*, const char*);

inline int soap_read_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ConfigurationEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DurationRange_DEFINED
#define SOAP_TYPE_tt__DurationRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DurationRange(struct soap*, const char*, int, const tt__DurationRange *, const char*);
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_in_tt__DurationRange(struct soap*, const char*, tt__DurationRange *, const char*);
SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DurationRange * soap_new_tt__DurationRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DurationRange(soap, n, NULL, NULL, NULL);
}

inline tt__DurationRange * soap_new_req_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline tt__DurationRange * soap_new_set_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__DurationRange(struct soap *soap, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_get_tt__DurationRange(struct soap*, tt__DurationRange *, const char*, const char*);

inline int soap_read_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DurationRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FloatRange_DEFINED
#define SOAP_TYPE_tt__FloatRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatRange(struct soap*, const char*, int, const tt__FloatRange *, const char*);
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_in_tt__FloatRange(struct soap*, const char*, tt__FloatRange *, const char*);
SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatRange * soap_new_tt__FloatRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FloatRange(soap, n, NULL, NULL, NULL);
}

inline tt__FloatRange * soap_new_req_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline tt__FloatRange * soap_new_set_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__FloatRange(struct soap *soap, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_get_tt__FloatRange(struct soap*, tt__FloatRange *, const char*, const char*);

inline int soap_read_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FloatRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity_DEFINED
#define SOAP_TYPE_tt__DeviceEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);
SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

inline int soap_read_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__MoveAndStartTrackingResponse_DEFINED
#define SOAP_TYPE__tptz__MoveAndStartTrackingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__MoveAndStartTrackingResponse(struct soap*, const char*, int, const _tptz__MoveAndStartTrackingResponse *, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC4 soap_in__tptz__MoveAndStartTrackingResponse(struct soap*, const char*, _tptz__MoveAndStartTrackingResponse *, const char*);
SOAP_FMAC1 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTrackingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__MoveAndStartTrackingResponse * soap_new__tptz__MoveAndStartTrackingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__MoveAndStartTrackingResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__MoveAndStartTrackingResponse * soap_new_req__tptz__MoveAndStartTrackingResponse(
	struct soap *soap)
{
	_tptz__MoveAndStartTrackingResponse *_p = ::soap_new__tptz__MoveAndStartTrackingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__MoveAndStartTrackingResponse * soap_new_set__tptz__MoveAndStartTrackingResponse(
	struct soap *soap)
{
	_tptz__MoveAndStartTrackingResponse *_p = ::soap_new__tptz__MoveAndStartTrackingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTrackingResponse", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTrackingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC4 soap_get__tptz__MoveAndStartTrackingResponse(struct soap*, _tptz__MoveAndStartTrackingResponse *, const char*, const char*);

inline int soap_read__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__MoveAndStartTrackingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__MoveAndStartTrackingResponse(struct soap *soap, const char *URL, _tptz__MoveAndStartTrackingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__MoveAndStartTrackingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__MoveAndStartTrackingResponse(struct soap *soap, _tptz__MoveAndStartTrackingResponse *p)
{
	if (::soap_read__tptz__MoveAndStartTrackingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE__tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__MoveAndStartTracking(struct soap*, const char*, int, const _tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTracking * SOAP_FMAC4 soap_in__tptz__MoveAndStartTracking(struct soap*, const char*, _tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC1 _tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__MoveAndStartTracking * soap_new__tptz__MoveAndStartTracking(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__MoveAndStartTracking(soap, n, NULL, NULL, NULL);
}

inline _tptz__MoveAndStartTracking * soap_new_req__tptz__MoveAndStartTracking(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__MoveAndStartTracking *_p = ::soap_new__tptz__MoveAndStartTracking(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__MoveAndStartTracking::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__MoveAndStartTracking * soap_new_set__tptz__MoveAndStartTracking(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetToken,
	tt__GeoLocation *GeoLocation,
	tt__PTZVector *TargetPosition,
	tt__PTZSpeed *Speed,
	std::string *ObjectID)
{
	_tptz__MoveAndStartTracking *_p = ::soap_new__tptz__MoveAndStartTracking(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__MoveAndStartTracking::ProfileToken = ProfileToken;
		_p->_tptz__MoveAndStartTracking::PresetToken = PresetToken;
		_p->_tptz__MoveAndStartTracking::GeoLocation = GeoLocation;
		_p->_tptz__MoveAndStartTracking::TargetPosition = TargetPosition;
		_p->_tptz__MoveAndStartTracking::Speed = Speed;
		_p->_tptz__MoveAndStartTracking::ObjectID = ObjectID;
	}
	return _p;
}

inline int soap_write__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:MoveAndStartTracking", p->soap_type() == SOAP_TYPE__tptz__MoveAndStartTracking ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__MoveAndStartTracking * SOAP_FMAC4 soap_get__tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_read__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__MoveAndStartTracking(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__MoveAndStartTracking(struct soap *soap, const char *URL, _tptz__MoveAndStartTracking *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking *p)
{
	if (::soap_read__tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurationsResponse * soap_new__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_req__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_set__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurationsResponse(struct soap*, _tptz__GetCompatibleConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurations * soap_new__tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurations * soap_new_req__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurations * soap_new_set__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTourResponse(struct soap*, const char*, int, const _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetTourResponse(struct soap*, const char*, _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTourResponse * soap_new__tptz__RemovePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTourResponse * soap_new_req__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetTourResponse * soap_new_set__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetTourResponse(struct soap*, _tptz__RemovePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTour(struct soap*, const char*, int, const _tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_in__tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTour * soap_new__tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTour * soap_new_req__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__RemovePresetTour * soap_new_set__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_get__tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTourResponse(struct soap*, const char*, int, const _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__OperatePresetTourResponse(struct soap*, const char*, _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTourResponse * soap_new__tptz__OperatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTourResponse * soap_new_req__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__OperatePresetTourResponse * soap_new_set__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__OperatePresetTourResponse(struct soap*, _tptz__OperatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTour(struct soap*, const char*, int, const _tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_in__tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTour * soap_new__tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTour * soap_new_req__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline _tptz__OperatePresetTour * soap_new_set__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_get__tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTourResponse(struct soap*, const char*, int, const _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_in__tptz__ModifyPresetTourResponse(struct soap*, const char*, _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTourResponse * soap_new__tptz__ModifyPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTourResponse * soap_new_req__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ModifyPresetTourResponse * soap_new_set__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_get__tptz__ModifyPresetTourResponse(struct soap*, _tptz__ModifyPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTour(struct soap*, const char*, int, const _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_in__tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTour * soap_new__tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTour * soap_new_req__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__ModifyPresetTour * soap_new_set__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_get__tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTourResponse(struct soap*, const char*, int, const _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__CreatePresetTourResponse(struct soap*, const char*, _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTourResponse * soap_new__tptz__CreatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTourResponse * soap_new_req__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__CreatePresetTourResponse * soap_new_set__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__CreatePresetTourResponse(struct soap*, _tptz__CreatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTour(struct soap*, const char*, int, const _tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_in__tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTour * soap_new__tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTour * soap_new_req__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__CreatePresetTour * soap_new_set__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_get__tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, int, const _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptionsResponse * soap_new__tptz__GetPresetTourOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_req__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_set__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptionsResponse(struct soap*, _tptz__GetPresetTourOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptions(struct soap*, const char*, int, const _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptions * soap_new__tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptions * soap_new_req__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTourOptions * soap_new_set__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetTourToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTourOptions::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourResponse(struct soap*, const char*, int, const _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourResponse(struct soap*, const char*, _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourResponse * soap_new__tptz__GetPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourResponse * soap_new_req__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__GetPresetTourResponse * soap_new_set__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourResponse(struct soap*, _tptz__GetPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour_DEFINED
#define SOAP_TYPE__tptz__GetPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTour(struct soap*, const char*, int, const _tptz__GetPresetTour *, const char*);
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_in__tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour *, const char*);
SOAP_FMAC1 _tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTour * soap_new__tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTour * soap_new_req__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__GetPresetTour * soap_new_set__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_get__tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *, const char*, const char*);

inline int soap_read__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetToursResponse(struct soap*, const char*, int, const _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_in__tptz__GetPresetToursResponse(struct soap*, const char*, _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetToursResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetToursResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetToursResponse * soap_new__tptz__GetPresetToursResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetToursResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetToursResponse * soap_new_req__tptz__GetPresetToursResponse(
	struct soap *soap)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetToursResponse * soap_new_set__tptz__GetPresetToursResponse(
	struct soap *soap,
	const std::vector<tt__PresetTour *> & PresetTour)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetToursResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_get__tptz__GetPresetToursResponse(struct soap*, _tptz__GetPresetToursResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetToursResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours_DEFINED
#define SOAP_TYPE__tptz__GetPresetTours_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTours(struct soap*, const char*, int, const _tptz__GetPresetTours *, const char*);
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_in__tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours *, const char*);
SOAP_FMAC1 _tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTours * soap_new__tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTours * soap_new_req__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTours * soap_new_set__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_get__tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *, const char*, const char*);

inline int soap_read__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__StopResponse_DEFINED
#define SOAP_TYPE__tptz__StopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__StopResponse(struct soap*, const char*, int, const _tptz__StopResponse *, const char*);
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_in__tptz__StopResponse(struct soap*, const char*, _tptz__StopResponse *, const char*);
SOAP_FMAC1 _tptz__StopResponse * SOAP_FMAC2 soap_instantiate__tptz__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__StopResponse * soap_new__tptz__StopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__StopResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__StopResponse * soap_new_req__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__StopResponse * soap_new_set__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__StopResponse(struct soap *soap, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_get__tptz__StopResponse(struct soap*, _tptz__StopResponse *, const char*, const char*);

inline int soap_read__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__StopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__Stop_DEFINED
#define SOAP_TYPE__tptz__Stop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__Stop(struct soap*, const char*, int, const _tptz__Stop *, const char*);
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_in__tptz__Stop(struct soap*, const char*, _tptz__Stop *, const char*);
SOAP_FMAC1 _tptz__Stop * SOAP_FMAC2 soap_instantiate__tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__Stop * soap_new__tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline _tptz__Stop * soap_new_req__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__Stop * soap_new_set__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken,
	bool *PanTilt,
	bool *Zoom)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
		_p->_tptz__Stop::PanTilt = PanTilt;
		_p->_tptz__Stop::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write__tptz__Stop(struct soap *soap, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_get__tptz__Stop(struct soap*, _tptz__Stop *, const char*, const char*);

inline int soap_read__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
#define SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMoveResponse(struct soap*, const char*, int, const _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_in__tptz__GeoMoveResponse(struct soap*, const char*, _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC1 _tptz__GeoMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__GeoMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMoveResponse * soap_new__tptz__GeoMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMoveResponse * soap_new_req__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GeoMoveResponse * soap_new_set__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_get__tptz__GeoMoveResponse(struct soap*, _tptz__GeoMoveResponse *, const char*, const char*);

inline int soap_read__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMove_DEFINED
#define SOAP_TYPE__tptz__GeoMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMove(struct soap*, const char*, int, const _tptz__GeoMove *, const char*);
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_in__tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove *, const char*);
SOAP_FMAC1 _tptz__GeoMove * SOAP_FMAC2 soap_instantiate__tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMove * soap_new__tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMove * soap_new_req__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
	}
	return _p;
}

inline _tptz__GeoMove * soap_new_set__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target,
	tt__PTZSpeed *Speed,
	float *AreaHeight,
	float *AreaWidth)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
		_p->_tptz__GeoMove::Speed = Speed;
		_p->_tptz__GeoMove::AreaHeight = AreaHeight;
		_p->_tptz__GeoMove::AreaWidth = AreaWidth;
	}
	return _p;
}

inline int soap_write__tptz__GeoMove(struct soap *soap, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_get__tptz__GeoMove(struct soap*, _tptz__GeoMove *, const char*, const char*);

inline int soap_read__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMoveResponse(struct soap*, const char*, int, const _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_in__tptz__AbsoluteMoveResponse(struct soap*, const char*, _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMoveResponse * soap_new__tptz__AbsoluteMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMoveResponse * soap_new_req__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__AbsoluteMoveResponse * soap_new_set__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_get__tptz__AbsoluteMoveResponse(struct soap*, _tptz__AbsoluteMoveResponse *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMove(struct soap*, const char*, int, const _tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_in__tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMove * soap_new__tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMove * soap_new_req__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
	}
	return _p;
}

inline _tptz__AbsoluteMove * soap_new_set__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position,
	tt__PTZSpeed *Speed)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
		_p->_tptz__AbsoluteMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_get__tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
#define SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMoveResponse(struct soap*, const char*, int, const _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_in__tptz__RelativeMoveResponse(struct soap*, const char*, _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC1 _tptz__RelativeMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__RelativeMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMoveResponse * soap_new__tptz__RelativeMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMoveResponse * soap_new_req__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RelativeMoveResponse * soap_new_set__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_get__tptz__RelativeMoveResponse(struct soap*, _tptz__RelativeMoveResponse *, const char*, const char*);

inline int soap_read__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove_DEFINED
#define SOAP_TYPE__tptz__RelativeMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMove(struct soap*, const char*, int, const _tptz__RelativeMove *, const char*);
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_in__tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove *, const char*);
SOAP_FMAC1 _tptz__RelativeMove * SOAP_FMAC2 soap_instantiate__tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMove * soap_new__tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMove * soap_new_req__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
	}
	return _p;
}

inline _tptz__RelativeMove * soap_new_set__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation,
	tt__PTZSpeed *Speed)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
		_p->_tptz__RelativeMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_get__tptz__RelativeMove(struct soap*, _tptz__RelativeMove *, const char*, const char*);

inline int soap_read__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
#define SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMoveResponse(struct soap*, const char*, int, const _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_in__tptz__ContinuousMoveResponse(struct soap*, const char*, _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC1 _tptz__ContinuousMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMoveResponse * soap_new__tptz__ContinuousMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMoveResponse * soap_new_req__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ContinuousMoveResponse * soap_new_set__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_get__tptz__ContinuousMoveResponse(struct soap*, _tptz__ContinuousMoveResponse *, const char*, const char*);

inline int soap_read__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove_DEFINED
#define SOAP_TYPE__tptz__ContinuousMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMove(struct soap*, const char*, int, const _tptz__ContinuousMove *, const char*);
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_in__tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove *, const char*);
SOAP_FMAC1 _tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMove * soap_new__tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMove * soap_new_req__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
	}
	return _p;
}

inline _tptz__ContinuousMove * soap_new_set__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity,
	std::string *Timeout)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
		_p->_tptz__ContinuousMove::Timeout = Timeout;
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_get__tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *, const char*, const char*);

inline int soap_read__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePositionResponse(struct soap*, const char*, int, const _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_in__tptz__SetHomePositionResponse(struct soap*, const char*, _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__SetHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__SetHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePositionResponse * soap_new__tptz__SetHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePositionResponse * soap_new_req__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetHomePositionResponse * soap_new_set__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_get__tptz__SetHomePositionResponse(struct soap*, _tptz__SetHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition_DEFINED
#define SOAP_TYPE__tptz__SetHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePosition(struct soap*, const char*, int, const _tptz__SetHomePosition *, const char*);
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_in__tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition *, const char*);
SOAP_FMAC1 _tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate__tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePosition * soap_new__tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePosition * soap_new_req__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetHomePosition * soap_new_set__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_get__tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *, const char*, const char*);

inline int soap_read__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePositionResponse(struct soap*, const char*, int, const _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_in__tptz__GotoHomePositionResponse(struct soap*, const char*, _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__GotoHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePositionResponse * soap_new__tptz__GotoHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePositionResponse * soap_new_req__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoHomePositionResponse * soap_new_set__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_get__tptz__GotoHomePositionResponse(struct soap*, _tptz__GotoHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE__tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePosition(struct soap*, const char*, int, const _tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_in__tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 _tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePosition * soap_new__tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePosition * soap_new_req__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GotoHomePosition * soap_new_set__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
		_p->_tptz__GotoHomePosition::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_get__tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse_DEFINED
#define SOAP_TYPE__tptz__GetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatusResponse(struct soap*, const char*, int, const _tptz__GetStatusResponse *, const char*);
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_in__tptz__GetStatusResponse(struct soap*, const char*, _tptz__GetStatusResponse *, const char*);
SOAP_FMAC1 _tptz__GetStatusResponse * SOAP_FMAC2 soap_instantiate__tptz__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatusResponse * soap_new__tptz__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatusResponse * soap_new_req__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline _tptz__GetStatusResponse * soap_new_set__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline int soap_write__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_get__tptz__GetStatusResponse(struct soap*, _tptz__GetStatusResponse *, const char*, const char*);

inline int soap_read__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatus_DEFINED
#define SOAP_TYPE__tptz__GetStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatus(struct soap*, const char*, int, const _tptz__GetStatus *, const char*);
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_in__tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus *, const char*);
SOAP_FMAC1 _tptz__GetStatus * SOAP_FMAC2 soap_instantiate__tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatus * soap_new__tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatus * soap_new_req__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetStatus * soap_new_set__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetStatus(struct soap *soap, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_get__tptz__GetStatus(struct soap*, _tptz__GetStatus *, const char*, const char*);

inline int soap_read__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
#define SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPresetResponse(struct soap*, const char*, int, const _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_in__tptz__GotoPresetResponse(struct soap*, const char*, _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC1 _tptz__GotoPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPresetResponse * soap_new__tptz__GotoPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPresetResponse * soap_new_req__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoPresetResponse * soap_new_set__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_get__tptz__GotoPresetResponse(struct soap*, _tptz__GotoPresetResponse *, const char*, const char*);

inline int soap_read__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset_DEFINED
#define SOAP_TYPE__tptz__GotoPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPreset(struct soap*, const char*, int, const _tptz__GotoPreset *, const char*);
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_in__tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset *, const char*);
SOAP_FMAC1 _tptz__GotoPreset * SOAP_FMAC2 soap_instantiate__tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPreset * soap_new__tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPreset * soap_new_req__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__GotoPreset * soap_new_set__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
		_p->_tptz__GotoPreset::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_get__tptz__GotoPreset(struct soap*, _tptz__GotoPreset *, const char*, const char*);

inline int soap_read__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetResponse(struct soap*, const char*, int, const _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetResponse(struct soap*, const char*, _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetResponse * soap_new__tptz__RemovePresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetResponse * soap_new_req__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetResponse * soap_new_set__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetResponse(struct soap*, _tptz__RemovePresetResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset_DEFINED
#define SOAP_TYPE__tptz__RemovePreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePreset(struct soap*, const char*, int, const _tptz__RemovePreset *, const char*);
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_in__tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset *, const char*);
SOAP_FMAC1 _tptz__RemovePreset * SOAP_FMAC2 soap_instantiate__tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePreset * soap_new__tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePreset * soap_new_req__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__RemovePreset * soap_new_set__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_get__tptz__RemovePreset(struct soap*, _tptz__RemovePreset *, const char*, const char*);

inline int soap_read__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse_DEFINED
#define SOAP_TYPE__tptz__SetPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPresetResponse(struct soap*, const char*, int, const _tptz__SetPresetResponse *, const char*);
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_in__tptz__SetPresetResponse(struct soap*, const char*, _tptz__SetPresetResponse *, const char*);
SOAP_FMAC1 _tptz__SetPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__SetPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPresetResponse * soap_new__tptz__SetPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPresetResponse * soap_new_req__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__SetPresetResponse * soap_new_set__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_get__tptz__SetPresetResponse(struct soap*, _tptz__SetPresetResponse *, const char*, const char*);

inline int soap_read__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPreset_DEFINED
#define SOAP_TYPE__tptz__SetPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPreset(struct soap*, const char*, int, const _tptz__SetPreset *, const char*);
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_in__tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset *, const char*);
SOAP_FMAC1 _tptz__SetPreset * SOAP_FMAC2 soap_instantiate__tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPreset * soap_new__tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPreset * soap_new_req__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetPreset * soap_new_set__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetName,
	std::string *PresetToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
		_p->_tptz__SetPreset::PresetName = PresetName;
		_p->_tptz__SetPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPreset(struct soap *soap, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_get__tptz__SetPreset(struct soap*, _tptz__SetPreset *, const char*, const char*);

inline int soap_read__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetsResponse(struct soap*, const char*, int, const _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetsResponse(struct soap*, const char*, _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetsResponse * soap_new__tptz__GetPresetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetsResponse * soap_new_req__tptz__GetPresetsResponse(
	struct soap *soap)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetsResponse * soap_new_set__tptz__GetPresetsResponse(
	struct soap *soap,
	const std::vector<tt__PTZPreset *> & Preset)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetsResponse::Preset = Preset;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetsResponse(struct soap*, _tptz__GetPresetsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresets_DEFINED
#define SOAP_TYPE__tptz__GetPresets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresets(struct soap*, const char*, int, const _tptz__GetPresets *, const char*);
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_in__tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets *, const char*);
SOAP_FMAC1 _tptz__GetPresets * SOAP_FMAC2 soap_instantiate__tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresets * soap_new__tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresets * soap_new_req__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresets * soap_new_set__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresets(struct soap *soap, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_get__tptz__GetPresets(struct soap*, _tptz__GetPresets *, const char*, const char*);

inline int soap_read__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommandResponse * soap_new__tptz__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_req__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_set__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommandResponse(struct soap*, _tptz__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommand * soap_new__tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommand * soap_new_req__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommand * soap_new_set__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptionsResponse * soap_new__tptz__GetConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_req__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_set__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptionsResponse(struct soap*, _tptz__GetConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptions(struct soap*, const char*, int, const _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptions * soap_new__tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptions * soap_new_req__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfigurationOptions * soap_new_set__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfigurationResponse(struct soap*, const char*, int, const _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__SetConfigurationResponse(struct soap*, const char*, _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfigurationResponse * soap_new__tptz__SetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfigurationResponse * soap_new_req__tptz__SetConfigurationResponse(
	struct soap *soap)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetConfigurationResponse * soap_new_set__tptz__SetConfigurationResponse(
	struct soap *soap,
	struct __tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfigurationResponse::__SetConfigurationResponse_sequence = __SetConfigurationResponse_sequence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__SetConfigurationResponse(struct soap*, _tptz__SetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration_DEFINED
#define SOAP_TYPE__tptz__SetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfiguration(struct soap*, const char*, int, const _tptz__SetConfiguration *, const char*);
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_in__tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration *, const char*);
SOAP_FMAC1 _tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfiguration * soap_new__tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfiguration * soap_new_req__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _tptz__SetConfiguration * soap_new_set__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_get__tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *, const char*, const char*);

inline int soap_read__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationResponse(struct soap*, const char*, int, const _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationResponse(struct soap*, const char*, _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationResponse * soap_new__tptz__GetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationResponse * soap_new_req__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline _tptz__GetConfigurationResponse * soap_new_set__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationResponse(struct soap*, _tptz__GetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration_DEFINED
#define SOAP_TYPE__tptz__GetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfiguration(struct soap*, const char*, int, const _tptz__GetConfiguration *, const char*);
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_in__tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration *, const char*);
SOAP_FMAC1 _tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfiguration * soap_new__tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfiguration * soap_new_req__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfiguration * soap_new_set__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_get__tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *, const char*, const char*);

inline int soap_read__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationsResponse(struct soap*, const char*, _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationsResponse * soap_new__tptz__GetConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationsResponse * soap_new_req__tptz__GetConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurationsResponse * soap_new_set__tptz__GetConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationsResponse(struct soap*, _tptz__GetConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurations(struct soap*, const char*, int, const _tptz__GetConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_in__tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurations * soap_new__tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurations * soap_new_req__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurations * soap_new_set__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_get__tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodeResponse(struct soap*, const char*, int, const _tptz__GetNodeResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_in__tptz__GetNodeResponse(struct soap*, const char*, _tptz__GetNodeResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodeResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodeResponse * soap_new__tptz__GetNodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodeResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodeResponse * soap_new_req__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline _tptz__GetNodeResponse * soap_new_set__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_get__tptz__GetNodeResponse(struct soap*, _tptz__GetNodeResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNode_DEFINED
#define SOAP_TYPE__tptz__GetNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNode(struct soap*, const char*, int, const _tptz__GetNode *, const char*);
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_in__tptz__GetNode(struct soap*, const char*, _tptz__GetNode *, const char*);
SOAP_FMAC1 _tptz__GetNode * SOAP_FMAC2 soap_instantiate__tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNode * soap_new__tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNode * soap_new_req__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline _tptz__GetNode * soap_new_set__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline int soap_write__tptz__GetNode(struct soap *soap, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_get__tptz__GetNode(struct soap*, _tptz__GetNode *, const char*, const char*);

inline int soap_read__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodesResponse(struct soap*, const char*, int, const _tptz__GetNodesResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_in__tptz__GetNodesResponse(struct soap*, const char*, _tptz__GetNodesResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodesResponse * soap_new__tptz__GetNodesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodesResponse * soap_new_req__tptz__GetNodesResponse(
	struct soap *soap)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodesResponse * soap_new_set__tptz__GetNodesResponse(
	struct soap *soap,
	const std::vector<tt__PTZNode *> & PTZNode)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodesResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_get__tptz__GetNodesResponse(struct soap*, _tptz__GetNodesResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodes_DEFINED
#define SOAP_TYPE__tptz__GetNodes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodes(struct soap*, const char*, int, const _tptz__GetNodes *, const char*);
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_in__tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes *, const char*);
SOAP_FMAC1 _tptz__GetNodes * SOAP_FMAC2 soap_instantiate__tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodes * soap_new__tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodes * soap_new_req__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodes * soap_new_set__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetNodes(struct soap *soap, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_get__tptz__GetNodes(struct soap*, _tptz__GetNodes *, const char*, const char*);

inline int soap_read__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilitiesResponse * soap_new__tptz__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_req__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_set__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilitiesResponse(struct soap*, _tptz__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilities(struct soap*, const char*, int, const _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilities * soap_new__tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilities * soap_new_req__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetServiceCapabilities * soap_new_set__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tptz__Capabilities_DEFINED
#define SOAP_TYPE_tptz__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tptz__Capabilities(struct soap*, const char*, int, const tptz__Capabilities *, const char*);
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_in_tptz__Capabilities(struct soap*, const char*, tptz__Capabilities *, const char*);
SOAP_FMAC1 tptz__Capabilities * SOAP_FMAC2 soap_instantiate_tptz__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tptz__Capabilities * soap_new_tptz__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tptz__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tptz__Capabilities * soap_new_req_tptz__Capabilities(
	struct soap *soap)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tptz__Capabilities * soap_new_set_tptz__Capabilities(
	struct soap *soap,
	bool *EFlip,
	bool *Reverse,
	bool *GetCompatibleConfigurations,
	bool *MoveStatus,
	bool *StatusPosition,
	std::string *MoveAndTrack)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tptz__Capabilities::EFlip = EFlip;
		_p->tptz__Capabilities::Reverse = Reverse;
		_p->tptz__Capabilities::GetCompatibleConfigurations = GetCompatibleConfigurations;
		_p->tptz__Capabilities::MoveStatus = MoveStatus;
		_p->tptz__Capabilities::StatusPosition = StatusPosition;
		_p->tptz__Capabilities::MoveAndTrack = MoveAndTrack;
	}
	return _p;
}

inline int soap_write_tptz__Capabilities(struct soap *soap, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_get_tptz__Capabilities(struct soap*, tptz__Capabilities *, const char*, const char*);

inline int soap_read_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tptz__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xml__lang(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__xml__lang(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_DEFINED
#define SOAP_TYPE_xsd__anySimpleType_DEFINED

inline void soap_default_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);

#define soap_xsd__anySimpleType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anySimpleType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_new_xsd__anySimpleType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anySimpleType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anySimpleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anySimpleType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE___tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__MoveAndStartTracking(struct soap*, struct __tptz__MoveAndStartTracking *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__MoveAndStartTracking(struct soap*, const struct __tptz__MoveAndStartTracking *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__MoveAndStartTracking(struct soap*, const char*, int, const struct __tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC3 struct __tptz__MoveAndStartTracking * SOAP_FMAC4 soap_in___tptz__MoveAndStartTracking(struct soap*, const char*, struct __tptz__MoveAndStartTracking *, const char*);
SOAP_FMAC1 struct __tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate___tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__MoveAndStartTracking * soap_new___tptz__MoveAndStartTracking(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__MoveAndStartTracking(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__MoveAndStartTracking * soap_new_req___tptz__MoveAndStartTracking(
	struct soap *soap)
{
	struct __tptz__MoveAndStartTracking *_p = ::soap_new___tptz__MoveAndStartTracking(soap);
	if (_p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, _p);
	}
	return _p;
}

inline struct __tptz__MoveAndStartTracking * soap_new_set___tptz__MoveAndStartTracking(
	struct soap *soap,
	_tptz__MoveAndStartTracking *tptz__MoveAndStartTracking)
{
	struct __tptz__MoveAndStartTracking *_p = ::soap_new___tptz__MoveAndStartTracking(soap);
	if (_p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, _p);
		_p->tptz__MoveAndStartTracking = tptz__MoveAndStartTracking;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__MoveAndStartTracking(struct soap*, const struct __tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_write___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__MoveAndStartTracking(soap, p), 0) || ::soap_put___tptz__MoveAndStartTracking(soap, p, "-tptz:MoveAndStartTracking", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__MoveAndStartTracking * SOAP_FMAC4 soap_get___tptz__MoveAndStartTracking(struct soap*, struct __tptz__MoveAndStartTracking *, const char*, const char*);

inline int soap_read___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking *p)
{
	if (p)
	{	::soap_default___tptz__MoveAndStartTracking(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__MoveAndStartTracking(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__MoveAndStartTracking(struct soap *soap, const char *URL, struct __tptz__MoveAndStartTracking *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__MoveAndStartTracking(struct soap *soap, struct __tptz__MoveAndStartTracking *p)
{
	if (::soap_read___tptz__MoveAndStartTracking(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in___tptz__GetCompatibleConfigurations(struct soap*, const char*, struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetCompatibleConfigurations * soap_new___tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_req___tptz__GetCompatibleConfigurations(
	struct soap *soap)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_set___tptz__GetCompatibleConfigurations(
	struct soap *soap,
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
		_p->tptz__GetCompatibleConfigurations = tptz__GetCompatibleConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE___tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePresetTour(struct soap*, const char*, int, const struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_in___tptz__RemovePresetTour(struct soap*, const char*, struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate___tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePresetTour * soap_new___tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePresetTour * soap_new_req___tptz__RemovePresetTour(
	struct soap *soap)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePresetTour * soap_new_set___tptz__RemovePresetTour(
	struct soap *soap,
	_tptz__RemovePresetTour *tptz__RemovePresetTour)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
		_p->tptz__RemovePresetTour = tptz__RemovePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_write___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_get___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__RemovePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE___tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__OperatePresetTour(struct soap*, const char*, int, const struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_in___tptz__OperatePresetTour(struct soap*, const char*, struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__OperatePresetTour * soap_new___tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__OperatePresetTour * soap_new_req___tptz__OperatePresetTour(
	struct soap *soap)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__OperatePresetTour * soap_new_set___tptz__OperatePresetTour(
	struct soap *soap,
	_tptz__OperatePresetTour *tptz__OperatePresetTour)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
		_p->tptz__OperatePresetTour = tptz__OperatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_write___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_get___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__OperatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ModifyPresetTour(struct soap*, const char*, int, const struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_in___tptz__ModifyPresetTour(struct soap*, const char*, struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate___tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ModifyPresetTour * soap_new___tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ModifyPresetTour * soap_new_req___tptz__ModifyPresetTour(
	struct soap *soap)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__ModifyPresetTour * soap_new_set___tptz__ModifyPresetTour(
	struct soap *soap,
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
		_p->tptz__ModifyPresetTour = tptz__ModifyPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_write___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_get___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__ModifyPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE___tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__CreatePresetTour(struct soap*, const char*, int, const struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_in___tptz__CreatePresetTour(struct soap*, const char*, struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__CreatePresetTour * soap_new___tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__CreatePresetTour * soap_new_req___tptz__CreatePresetTour(
	struct soap *soap)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__CreatePresetTour * soap_new_set___tptz__CreatePresetTour(
	struct soap *soap,
	_tptz__CreatePresetTour *tptz__CreatePresetTour)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
		_p->tptz__CreatePresetTour = tptz__CreatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_write___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_get___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__CreatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTourOptions(struct soap*, const char*, int, const struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in___tptz__GetPresetTourOptions(struct soap*, const char*, struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTourOptions * soap_new___tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTourOptions * soap_new_req___tptz__GetPresetTourOptions(
	struct soap *soap)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTourOptions * soap_new_set___tptz__GetPresetTourOptions(
	struct soap *soap,
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
		_p->tptz__GetPresetTourOptions = tptz__GetPresetTourOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_write___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour_DEFINED
#define SOAP_TYPE___tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTour(struct soap*, const char*, int, const struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_in___tptz__GetPresetTour(struct soap*, const char*, struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTour * soap_new___tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTour * soap_new_req___tptz__GetPresetTour(
	struct soap *soap)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTour * soap_new_set___tptz__GetPresetTour(
	struct soap *soap,
	_tptz__GetPresetTour *tptz__GetPresetTour)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
		_p->tptz__GetPresetTour = tptz__GetPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_write___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_get___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_read___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours_DEFINED
#define SOAP_TYPE___tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTours(struct soap*, const char*, int, const struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_in___tptz__GetPresetTours(struct soap*, const char*, struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTours * soap_new___tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTours * soap_new_req___tptz__GetPresetTours(
	struct soap *soap)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTours * soap_new_set___tptz__GetPresetTours(
	struct soap *soap,
	_tptz__GetPresetTours *tptz__GetPresetTours)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
		_p->tptz__GetPresetTours = tptz__GetPresetTours;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_write___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_get___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_read___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTours(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__Stop_DEFINED
#define SOAP_TYPE___tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__Stop(struct soap*, struct __tptz__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__Stop(struct soap*, const struct __tptz__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__Stop(struct soap*, const char*, int, const struct __tptz__Stop *, const char*);
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_in___tptz__Stop(struct soap*, const char*, struct __tptz__Stop *, const char*);
SOAP_FMAC1 struct __tptz__Stop * SOAP_FMAC2 soap_instantiate___tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__Stop * soap_new___tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__Stop * soap_new_req___tptz__Stop(
	struct soap *soap)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
	}
	return _p;
}

inline struct __tptz__Stop * soap_new_set___tptz__Stop(
	struct soap *soap,
	_tptz__Stop *tptz__Stop)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
		_p->tptz__Stop = tptz__Stop;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__Stop(struct soap*, const struct __tptz__Stop *, const char*, const char*);

inline int soap_write___tptz__Stop(struct soap *soap, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_get___tptz__Stop(struct soap*, struct __tptz__Stop *, const char*, const char*);

inline int soap_read___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (p)
	{	::soap_default___tptz__Stop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GeoMove_DEFINED
#define SOAP_TYPE___tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GeoMove(struct soap*, const char*, int, const struct __tptz__GeoMove *, const char*);
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_in___tptz__GeoMove(struct soap*, const char*, struct __tptz__GeoMove *, const char*);
SOAP_FMAC1 struct __tptz__GeoMove * SOAP_FMAC2 soap_instantiate___tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GeoMove * soap_new___tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GeoMove * soap_new_req___tptz__GeoMove(
	struct soap *soap)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__GeoMove * soap_new_set___tptz__GeoMove(
	struct soap *soap,
	_tptz__GeoMove *tptz__GeoMove)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
		_p->tptz__GeoMove = tptz__GeoMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *, const char*, const char*);

inline int soap_write___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_get___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *, const char*, const char*);

inline int soap_read___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (p)
	{	::soap_default___tptz__GeoMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE___tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__AbsoluteMove(struct soap*, const char*, int, const struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_in___tptz__AbsoluteMove(struct soap*, const char*, struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 struct __tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate___tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__AbsoluteMove * soap_new___tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__AbsoluteMove * soap_new_req___tptz__AbsoluteMove(
	struct soap *soap)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__AbsoluteMove * soap_new_set___tptz__AbsoluteMove(
	struct soap *soap,
	_tptz__AbsoluteMove *tptz__AbsoluteMove)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
		_p->tptz__AbsoluteMove = tptz__AbsoluteMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_write___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_get___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (p)
	{	::soap_default___tptz__AbsoluteMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tptz__SendAuxiliaryCommand(struct soap*, const char*, struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SendAuxiliaryCommand * soap_new___tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_req___tptz__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_set___tptz__SendAuxiliaryCommand(
	struct soap *soap,
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
		_p->tptz__SendAuxiliaryCommand = tptz__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove_DEFINED
#define SOAP_TYPE___tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RelativeMove(struct soap*, const char*, int, const struct __tptz__RelativeMove *, const char*);
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_in___tptz__RelativeMove(struct soap*, const char*, struct __tptz__RelativeMove *, const char*);
SOAP_FMAC1 struct __tptz__RelativeMove * SOAP_FMAC2 soap_instantiate___tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RelativeMove * soap_new___tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RelativeMove * soap_new_req___tptz__RelativeMove(
	struct soap *soap)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__RelativeMove * soap_new_set___tptz__RelativeMove(
	struct soap *soap,
	_tptz__RelativeMove *tptz__RelativeMove)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
		_p->tptz__RelativeMove = tptz__RelativeMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_write___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_get___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_read___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (p)
	{	::soap_default___tptz__RelativeMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove_DEFINED
#define SOAP_TYPE___tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ContinuousMove(struct soap*, const char*, int, const struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_in___tptz__ContinuousMove(struct soap*, const char*, struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC1 struct __tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate___tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ContinuousMove * soap_new___tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ContinuousMove * soap_new_req___tptz__ContinuousMove(
	struct soap *soap)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__ContinuousMove * soap_new_set___tptz__ContinuousMove(
	struct soap *soap,
	_tptz__ContinuousMove *tptz__ContinuousMove)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
		_p->tptz__ContinuousMove = tptz__ContinuousMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_write___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_get___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_read___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (p)
	{	::soap_default___tptz__ContinuousMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition_DEFINED
#define SOAP_TYPE___tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetHomePosition(struct soap*, const char*, int, const struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_in___tptz__SetHomePosition(struct soap*, const char*, struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate___tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetHomePosition * soap_new___tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetHomePosition * soap_new_req___tptz__SetHomePosition(
	struct soap *soap)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetHomePosition * soap_new_set___tptz__SetHomePosition(
	struct soap *soap,
	_tptz__SetHomePosition *tptz__SetHomePosition)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
		_p->tptz__SetHomePosition = tptz__SetHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_write___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_get___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_read___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__SetHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE___tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoHomePosition(struct soap*, const char*, int, const struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_in___tptz__GotoHomePosition(struct soap*, const char*, struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate___tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoHomePosition * soap_new___tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoHomePosition * soap_new_req___tptz__GotoHomePosition(
	struct soap *soap)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoHomePosition * soap_new_set___tptz__GotoHomePosition(
	struct soap *soap,
	_tptz__GotoHomePosition *tptz__GotoHomePosition)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
		_p->tptz__GotoHomePosition = tptz__GotoHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_write___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_get___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__GotoHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurationOptions(struct soap*, const char*, int, const struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in___tptz__GetConfigurationOptions(struct soap*, const char*, struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurationOptions * soap_new___tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurationOptions * soap_new_req___tptz__GetConfigurationOptions(
	struct soap *soap)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurationOptions * soap_new_set___tptz__GetConfigurationOptions(
	struct soap *soap,
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
		_p->tptz__GetConfigurationOptions = tptz__GetConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_write___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration_DEFINED
#define SOAP_TYPE___tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfiguration(struct soap*, const char*, int, const struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_in___tptz__SetConfiguration(struct soap*, const char*, struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfiguration * soap_new___tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfiguration * soap_new_req___tptz__SetConfiguration(
	struct soap *soap)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfiguration * soap_new_set___tptz__SetConfiguration(
	struct soap *soap,
	_tptz__SetConfiguration *tptz__SetConfiguration)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
		_p->tptz__SetConfiguration = tptz__SetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_write___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_get___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_read___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__SetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNode_DEFINED
#define SOAP_TYPE___tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNode(struct soap*, struct __tptz__GetNode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNode(struct soap*, const struct __tptz__GetNode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNode(struct soap*, const char*, int, const struct __tptz__GetNode *, const char*);
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_in___tptz__GetNode(struct soap*, const char*, struct __tptz__GetNode *, const char*);
SOAP_FMAC1 struct __tptz__GetNode * SOAP_FMAC2 soap_instantiate___tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNode * soap_new___tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNode * soap_new_req___tptz__GetNode(
	struct soap *soap)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNode * soap_new_set___tptz__GetNode(
	struct soap *soap,
	_tptz__GetNode *tptz__GetNode)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
		_p->tptz__GetNode = tptz__GetNode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNode(struct soap*, const struct __tptz__GetNode *, const char*, const char*);

inline int soap_write___tptz__GetNode(struct soap *soap, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_get___tptz__GetNode(struct soap*, struct __tptz__GetNode *, const char*, const char*);

inline int soap_read___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (p)
	{	::soap_default___tptz__GetNode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNodes_DEFINED
#define SOAP_TYPE___tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNodes(struct soap*, const char*, int, const struct __tptz__GetNodes *, const char*);
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_in___tptz__GetNodes(struct soap*, const char*, struct __tptz__GetNodes *, const char*);
SOAP_FMAC1 struct __tptz__GetNodes * SOAP_FMAC2 soap_instantiate___tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNodes * soap_new___tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNodes * soap_new_req___tptz__GetNodes(
	struct soap *soap)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNodes * soap_new_set___tptz__GetNodes(
	struct soap *soap,
	_tptz__GetNodes *tptz__GetNodes)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
		_p->tptz__GetNodes = tptz__GetNodes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *, const char*, const char*);

inline int soap_write___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_get___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *, const char*, const char*);

inline int soap_read___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (p)
	{	::soap_default___tptz__GetNodes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration_DEFINED
#define SOAP_TYPE___tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfiguration(struct soap*, const char*, int, const struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_in___tptz__GetConfiguration(struct soap*, const char*, struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfiguration * soap_new___tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfiguration * soap_new_req___tptz__GetConfiguration(
	struct soap *soap)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfiguration * soap_new_set___tptz__GetConfiguration(
	struct soap *soap,
	_tptz__GetConfiguration *tptz__GetConfiguration)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
		_p->tptz__GetConfiguration = tptz__GetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_write___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_get___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_read___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__GetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetStatus_DEFINED
#define SOAP_TYPE___tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetStatus(struct soap*, const char*, int, const struct __tptz__GetStatus *, const char*);
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_in___tptz__GetStatus(struct soap*, const char*, struct __tptz__GetStatus *, const char*);
SOAP_FMAC1 struct __tptz__GetStatus * SOAP_FMAC2 soap_instantiate___tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetStatus * soap_new___tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetStatus * soap_new_req___tptz__GetStatus(
	struct soap *soap)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetStatus * soap_new_set___tptz__GetStatus(
	struct soap *soap,
	_tptz__GetStatus *tptz__GetStatus)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
		_p->tptz__GetStatus = tptz__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *, const char*, const char*);

inline int soap_write___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_get___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *, const char*, const char*);

inline int soap_read___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (p)
	{	::soap_default___tptz__GetStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset_DEFINED
#define SOAP_TYPE___tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoPreset(struct soap*, const char*, int, const struct __tptz__GotoPreset *, const char*);
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_in___tptz__GotoPreset(struct soap*, const char*, struct __tptz__GotoPreset *, const char*);
SOAP_FMAC1 struct __tptz__GotoPreset * SOAP_FMAC2 soap_instantiate___tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoPreset * soap_new___tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoPreset * soap_new_req___tptz__GotoPreset(
	struct soap *soap)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoPreset * soap_new_set___tptz__GotoPreset(
	struct soap *soap,
	_tptz__GotoPreset *tptz__GotoPreset)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
		_p->tptz__GotoPreset = tptz__GotoPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_write___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_get___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_read___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (p)
	{	::soap_default___tptz__GotoPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset_DEFINED
#define SOAP_TYPE___tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePreset(struct soap*, const char*, int, const struct __tptz__RemovePreset *, const char*);
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_in___tptz__RemovePreset(struct soap*, const char*, struct __tptz__RemovePreset *, const char*);
SOAP_FMAC1 struct __tptz__RemovePreset * SOAP_FMAC2 soap_instantiate___tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePreset * soap_new___tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePreset * soap_new_req___tptz__RemovePreset(
	struct soap *soap)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePreset * soap_new_set___tptz__RemovePreset(
	struct soap *soap,
	_tptz__RemovePreset *tptz__RemovePreset)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
		_p->tptz__RemovePreset = tptz__RemovePreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_write___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_get___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_read___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (p)
	{	::soap_default___tptz__RemovePreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetPreset_DEFINED
#define SOAP_TYPE___tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetPreset(struct soap*, const char*, int, const struct __tptz__SetPreset *, const char*);
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_in___tptz__SetPreset(struct soap*, const char*, struct __tptz__SetPreset *, const char*);
SOAP_FMAC1 struct __tptz__SetPreset * SOAP_FMAC2 soap_instantiate___tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetPreset * soap_new___tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetPreset * soap_new_req___tptz__SetPreset(
	struct soap *soap)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetPreset * soap_new_set___tptz__SetPreset(
	struct soap *soap,
	_tptz__SetPreset *tptz__SetPreset)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
		_p->tptz__SetPreset = tptz__SetPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *, const char*, const char*);

inline int soap_write___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_get___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *, const char*, const char*);

inline int soap_read___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (p)
	{	::soap_default___tptz__SetPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresets_DEFINED
#define SOAP_TYPE___tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresets(struct soap*, const char*, int, const struct __tptz__GetPresets *, const char*);
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_in___tptz__GetPresets(struct soap*, const char*, struct __tptz__GetPresets *, const char*);
SOAP_FMAC1 struct __tptz__GetPresets * SOAP_FMAC2 soap_instantiate___tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresets * soap_new___tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresets * soap_new_req___tptz__GetPresets(
	struct soap *soap)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresets * soap_new_set___tptz__GetPresets(
	struct soap *soap,
	_tptz__GetPresets *tptz__GetPresets)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
		_p->tptz__GetPresets = tptz__GetPresets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *, const char*, const char*);

inline int soap_write___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_get___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *, const char*, const char*);

inline int soap_read___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (p)
	{	::soap_default___tptz__GetPresets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurations(struct soap*, const char*, int, const struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_in___tptz__GetConfigurations(struct soap*, const char*, struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurations * soap_new___tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurations * soap_new_req___tptz__GetConfigurations(
	struct soap *soap)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurations * soap_new_set___tptz__GetConfigurations(
	struct soap *soap,
	_tptz__GetConfigurations *tptz__GetConfigurations)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
		_p->tptz__GetConfigurations = tptz__GetConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_get___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetServiceCapabilities(struct soap*, const char*, int, const struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in___tptz__GetServiceCapabilities(struct soap*, const char*, struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetServiceCapabilities * soap_new___tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetServiceCapabilities * soap_new_req___tptz__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetServiceCapabilities * soap_new_set___tptz__GetServiceCapabilities(
	struct soap *soap,
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
		_p->tptz__GetServiceCapabilities = tptz__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, int, const struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_in___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC1 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC2 soap_instantiate___tptz__SetConfigurationResponse_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfigurationResponse_sequence * soap_new___tptz__SetConfigurationResponse_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfigurationResponse_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_req___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_set___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_write___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_get___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_read___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfigurationResponse_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(
	struct soap *soap)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(
	struct soap *soap,
	struct SOAP_ENV__Header *SOAP_ENV__Header,
	char *SOAP_ENV__Body)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
		_p->SOAP_ENV__Header = SOAP_ENV__Header;
		_p->SOAP_ENV__Body = SOAP_ENV__Body;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_write_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_read_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Envelope(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xop__Include_DEFINED
#define SOAP_TYPE__xop__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, const struct _xop__Include *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__xop__Include2s(struct soap*, struct _xop__Include);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_xop__Include(struct soap*, const char*, struct _xop__Include *);
SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

inline struct _xop__Include * soap_new_req__xop__Include(
	struct soap *soap)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
	}
	return _p;
}

inline struct _xop__Include * soap_new_set__xop__Include(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
		_p->id = id;
		_p->type = type;
		_p->options = options;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

inline int soap_write__xop__Include(struct soap *soap, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

inline int soap_read__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (p)
	{	::soap_default__xop__Include(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xop__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xop__Include(struct soap *soap, const char *URL, struct _xop__Include *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _tt__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__tt__union_PTZPresetTourPresetDetail(struct soap*, int*, union _tt__union_PTZPresetTourPresetDetail *);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking_DEFINED
#define SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__MoveAndStartTracking(struct soap*, const char *, int, _tptz__MoveAndStartTracking *const*, const char *);
SOAP_FMAC3 _tptz__MoveAndStartTracking ** SOAP_FMAC4 soap_in_PointerTo_tptz__MoveAndStartTracking(struct soap*, const char*, _tptz__MoveAndStartTracking **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking *const*, const char*, const char*);
SOAP_FMAC3 _tptz__MoveAndStartTracking ** SOAP_FMAC4 soap_get_PointerTo_tptz__MoveAndStartTracking(struct soap*, _tptz__MoveAndStartTracking **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char *, int, _tptz__GetCompatibleConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePresetTour(struct soap*, const char *, int, _tptz__RemovePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__OperatePresetTour(struct soap*, const char *, int, _tptz__OperatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ModifyPresetTour(struct soap*, const char *, int, _tptz__ModifyPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__CreatePresetTour(struct soap*, const char *, int, _tptz__CreatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char *, int, _tptz__GetPresetTourOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTour(struct soap*, const char *, int, _tptz__GetPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTours(struct soap*, const char *, int, _tptz__GetPresetTours *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
#define SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__Stop(struct soap*, const char *, int, _tptz__Stop *const*, const char *);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_in_PointerTo_tptz__Stop(struct soap*, const char*, _tptz__Stop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*, const char*, const char*);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_get_PointerTo_tptz__Stop(struct soap*, _tptz__Stop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GeoMove(struct soap*, const char *, int, _tptz__GeoMove *const*, const char *);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__AbsoluteMove(struct soap*, const char *, int, _tptz__AbsoluteMove *const*, const char *);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char *, int, _tptz__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RelativeMove(struct soap*, const char *, int, _tptz__RelativeMove *const*, const char *);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ContinuousMove(struct soap*, const char *, int, _tptz__ContinuousMove *const*, const char *);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetHomePosition(struct soap*, const char *, int, _tptz__SetHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoHomePosition(struct soap*, const char *, int, _tptz__GotoHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char *, int, _tptz__GetConfigurationOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetConfiguration(struct soap*, const char *, int, _tptz__SetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNode(struct soap*, const char *, int, _tptz__GetNode *const*, const char *);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNode(struct soap*, const char*, _tptz__GetNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNodes(struct soap*, const char *, int, _tptz__GetNodes *const*, const char *);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfiguration(struct soap*, const char *, int, _tptz__GetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetStatus(struct soap*, const char *, int, _tptz__GetStatus *const*, const char *);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoPreset(struct soap*, const char *, int, _tptz__GotoPreset *const*, const char *);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePreset(struct soap*, const char *, int, _tptz__RemovePreset *const*, const char *);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetPreset(struct soap*, const char *, int, _tptz__SetPreset *const*, const char *);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresets(struct soap*, const char *, int, _tptz__GetPresets *const*, const char *);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurations(struct soap*, const char *, int, _tptz__GetConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char *, int, _tptz__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension(struct soap*, const char *, int, tt__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
#define SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ZoomLimits(struct soap*, const char *, int, tt__ZoomLimits *const*, const char *);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTott__ZoomLimits(struct soap*, const char*, tt__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
#define SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PanTiltLimits(struct soap*, const char *, int, tt__PanTiltLimits *const*, const char *);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTott__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension(struct soap*, const char *, int, tt__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__MoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MoveStatus(struct soap*, const char *, int, enum tt__MoveStatus *const*, const char *);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_in_PointerTott__MoveStatus(struct soap*, const char*, enum tt__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*, const char*, const char*);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_get_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZMoveStatus(struct soap*, const char *, int, tt__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char *, int, tt__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourDirection(struct soap*, const char *, int, enum tt__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*, const char*, const char*);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char *, int, tt__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char *, int, tt__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char *, int, tt__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char *, int, tt__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourExtension(struct soap*, const char *, int, tt__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpot(struct soap*, const char *, int, tt__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char *, int, tt__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatus(struct soap*, const char *, int, tt__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Name_DEFINED
#define SOAP_TYPE_PointerTott__Name_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Name(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Name(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector1D_DEFINED
#define SOAP_TYPE_PointerTott__Vector1D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector1D(struct soap*, const char *, int, tt__Vector1D *const*, const char *);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_in_PointerTott__Vector1D(struct soap*, const char*, tt__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_get_PointerTott__Vector1D(struct soap*, tt__Vector1D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector2D_DEFINED
#define SOAP_TYPE_PointerTott__Vector2D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector2D(struct soap*, const char *, int, tt__Vector2D *const*, const char *);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_in_PointerTott__Vector2D(struct soap*, const char*, tt__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_get_PointerTott__Vector2D(struct soap*, tt__Vector2D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FloatRange_DEFINED
#define SOAP_TYPE_PointerTott__FloatRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatRange(struct soap*, const char *, int, tt__FloatRange *const*, const char *);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_in_PointerTott__FloatRange(struct soap*, const char*, tt__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*, const char*, const char*);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_get_PointerTott__FloatRange(struct soap*, tt__FloatRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpacesExtension(struct soap*, const char *, int, tt__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space1DDescription(struct soap*, const char *, int, tt__Space1DDescription *const*, const char *);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space1DDescription(struct soap*, const char*, tt__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space2DDescription(struct soap*, const char *, int, tt__Space2DDescription *const*, const char *);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space2DDescription(struct soap*, const char*, tt__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptionsExtension(struct soap*, const char *, int, tt__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptionsExtension(struct soap*, const char *, int, tt__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char *, int, tt__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptions(struct soap*, const char *, int, tt__ReverseOptions *const*, const char *);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptions(struct soap*, const char*, tt__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptions(struct soap*, const char *, int, tt__EFlipOptions *const*, const char *);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptions(struct soap*, const char*, tt__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntAttrList_DEFINED
#define SOAP_TYPE_PointerTott__IntAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions2(struct soap*, const char *, int, tt__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptions(struct soap*, const char *, int, tt__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DurationRange_DEFINED
#define SOAP_TYPE_PointerTott__DurationRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DurationRange(struct soap*, const char *, int, tt__DurationRange *const*, const char *);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_in_PointerTott__DurationRange(struct soap*, const char*, tt__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_get_PointerTott__DurationRange(struct soap*, tt__DurationRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpaces(struct soap*, const char *, int, tt__PTZSpaces *const*, const char *);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTott__PTZSpaces(struct soap*, const char*, tt__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionExtension(struct soap*, const char *, int, tt__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Reverse_DEFINED
#define SOAP_TYPE_PointerTott__Reverse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Reverse(struct soap*, tt__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Reverse(struct soap*, const char *, int, tt__Reverse *const*, const char *);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_in_PointerTott__Reverse(struct soap*, const char*, tt__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Reverse(struct soap*, tt__Reverse *const*, const char*, const char*);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_get_PointerTott__Reverse(struct soap*, tt__Reverse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlip_DEFINED
#define SOAP_TYPE_PointerTott__EFlip_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlip(struct soap*, tt__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlip(struct soap*, const char *, int, tt__EFlip *const*, const char *);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_in_PointerTott__EFlip(struct soap*, const char*, tt__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlip(struct soap*, tt__EFlip *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_get_PointerTott__EFlip(struct soap*, tt__EFlip **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension2(struct soap*, const char *, int, tt__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirection(struct soap*, const char *, int, tt__PTControlDirection *const*, const char *);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirection(struct soap*, const char*, tt__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char *, int, tt__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension2(struct soap*, const char *, int, tt__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupported(struct soap*, const char *, int, tt__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourOptions(struct soap*, const char *, int, tt__PTZPresetTourOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PresetTour_DEFINED
#define SOAP_TYPE_PointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PresetTour(struct soap*, const char *, int, tt__PresetTour *const*, const char *);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_in_PointerTott__PresetTour(struct soap*, const char*, tt__PresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*, const char*, const char*);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_get_PointerTott__PresetTour(struct soap*, tt__PresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GeoLocation_DEFINED
#define SOAP_TYPE_PointerTott__GeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoLocation(struct soap*, const char *, int, tt__GeoLocation *const*, const char *);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_in_PointerTott__GeoLocation(struct soap*, const char*, tt__GeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*, const char*, const char*);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_get_PointerTott__GeoLocation(struct soap*, tt__GeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZVector_DEFINED
#define SOAP_TYPE_PointerTott__PTZVector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZVector(struct soap*, const char *, int, tt__PTZVector *const*, const char *);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_in_PointerTott__PTZVector(struct soap*, const char*, tt__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_get_PointerTott__PTZVector(struct soap*, tt__PTZVector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatus(struct soap*, const char *, int, tt__PTZStatus *const*, const char *);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZStatus(struct soap*, const char*, tt__PTZStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZStatus(struct soap*, tt__PTZStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpeed(struct soap*, const char *, int, tt__PTZSpeed *const*, const char *);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTott__PTZSpeed(struct soap*, const char*, tt__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
#define SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_PointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPreset(struct soap*, const char *, int, tt__PTZPreset *const*, const char *);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_in_PointerTott__PTZPreset(struct soap*, const char*, tt__PTZPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_get_PointerTott__PTZPreset(struct soap*, tt__PTZPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions(struct soap*, const char *, int, tt__PTZConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char *, int, struct __tptz__SetConfigurationResponse_sequence *const*, const char *);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_in_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_get_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfiguration(struct soap*, const char *, int, tt__PTZConfiguration *const*, const char *);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTott__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNode_DEFINED
#define SOAP_TYPE_PointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNode(struct soap*, const char *, int, tt__PTZNode *const*, const char *);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_in_PointerTott__PTZNode(struct soap*, const char*, tt__PTZNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_get_PointerTott__PTZNode(struct soap*, tt__PTZNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotptz__Capabilities(struct soap*, const char *, int, tptz__Capabilities *const*, const char *);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_in_PointerTotptz__Capabilities(struct soap*, const char*, tptz__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_get_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringList_DEFINED
#define SOAP_TYPE_PointerTott__StringList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourDirection> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourDirection>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourDirection>  * soap_new_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPresetTourSpot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPresetTourSpot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPresetTourSpot *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, int, const std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space1DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space1DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space1DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, int, const std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space2DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space2DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space2DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReverseMode(struct soap*, std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReverseMode(struct soap*, const std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, int, const std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ReverseMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ReverseMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ReverseMode>  * soap_new_std__vectorTemplateOftt__ReverseMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__EFlipMode(struct soap*, std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__EFlipMode(struct soap*, const std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, int, const std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__EFlipMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__EFlipMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__EFlipMode>  * soap_new_std__vectorTemplateOftt__EFlipMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourOperation> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourOperation>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourOperation>  * soap_new_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, std::vector<tt__PresetTour *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const std::vector<tt__PresetTour *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, int, const std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC3 std::vector<tt__PresetTour *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC1 std::vector<tt__PresetTour *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PresetTour *>  * soap_new_std__vectorTemplateOfPointerTott__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, int, const std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPreset *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPreset *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPreset *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, int, const std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, std::vector<tt__PTZNode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const std::vector<tt__PTZNode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, int, const std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZNode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZNode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZNode *>  * soap_new_std__vectorTemplateOfPointerTott__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
